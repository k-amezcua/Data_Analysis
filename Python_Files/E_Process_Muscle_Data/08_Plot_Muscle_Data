import os, glob
import re
import numpy as np
import pandas as pd

path = "C:\\Users\\kryst\\Desktop\\THESIS\\Torso Deformation\\Partioned Update with Stiffer Chest\\Activation\\Flexors and Extensors\\"
os.chdir(path)
print('running')
###########################################################################################################
filename = 'Trapezius_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    # print(lines)
    print (i)
    print(j)
    values = []
    if "Time  = " in j:
        start = i + 2
        print(i)
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        print(lines)
        print(element1)
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        e13_Fr = float(element13[1])
        e13_Fr = abs(round(e13_Fr, 6))
        e13_Fy = float(element13[3])
        e13_Fy = abs(round(e13_Fy, 6))
        e13_Fz = float(element13[4])
        e13_Fz = abs(round(e13_Fz, 6))
        e13_stretch = float(element13[5])
        e13_stretch = abs(round(e13_stretch, 6))

        e14_Fr = float(element14[1])
        e14_Fr = abs(round(e14_Fr, 6))
        e14_Fy = float(element14[3])
        e14_Fy = abs(round(e14_Fy, 6))
        e14_Fz = float(element14[4])
        e14_Fz = abs(round(e14_Fz, 6))
        e14_stretch = float(element14[5])
        e14_stretch = abs(round(e14_stretch, 6))

        e15_Fr = float(element15[1])
        e15_Fr = abs(round(e15_Fr, 6))
        e15_Fy = float(element15[3])
        e15_Fy = abs(round(e15_Fy, 6))
        e15_Fz = float(element15[4])
        e15_Fz = abs(round(e15_Fz, 6))
        e15_stretch = float(element15[5])
        e15_stretch = abs(round(e15_stretch, 6))

        e16_Fr = float(element16[1])
        e16_Fr = abs(round(e16_Fr, 6))
        e16_Fy = float(element16[3])
        e16_Fy = abs(round(e16_Fy, 6))
        e16_Fz = float(element16[4])
        e16_Fz = abs(round(e16_Fz, 6))
        e16_stretch = float(element16[5])
        e16_stretch = abs(round(e16_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)

Trapezius_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                            pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                            pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                            pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                            pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                            pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                            pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                            pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                            pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                            pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                            pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                            pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                            pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                            pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                            pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                            pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                            pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                            pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                            pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                            pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                            pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                            pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                            pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                            pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                            pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                            pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'),
                            pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                            pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'),
                            pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                            pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'),
                            pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                            pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'),
                            pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch'),
                            ], axis=1)

Trapezius_data['Trapezius_Fr'] = (
            Trapezius_data['E1_Fr'] + Trapezius_data['E2_Fr'] + Trapezius_data['E3_Fr'] + Trapezius_data['E4_Fr'] +
            Trapezius_data['E5_Fr'] + Trapezius_data['E6_Fr'] + Trapezius_data['E7_Fr'] + Trapezius_data['E8_Fr'] +
            Trapezius_data['E9_Fr'] + Trapezius_data['E10_Fr'] + Trapezius_data['E11_Fr'] + Trapezius_data['E12_Fr'] +
            Trapezius_data['E13_Fr'] + Trapezius_data['E14_Fr'] + Trapezius_data['E15_Fr'] + Trapezius_data['E16_Fr']
            )
Trapezius_data['Trapezius_Fy'] = (
            Trapezius_data['E1_Fy'] + Trapezius_data['E2_Fy'] + Trapezius_data['E3_Fy'] + Trapezius_data['E4_Fy'] +
            Trapezius_data['E5_Fy'] + Trapezius_data['E6_Fy'] + Trapezius_data['E7_Fy'] + Trapezius_data['E8_Fy'] +
            Trapezius_data['E9_Fy'] + Trapezius_data['E10_Fy'] + Trapezius_data['E11_Fy'] + Trapezius_data['E12_Fy'] +
            Trapezius_data['E13_Fy'] + Trapezius_data['E14_Fy'] + Trapezius_data['E15_Fy'] + Trapezius_data['E16_Fy']
            )
Trapezius_data['Trapezius_Fz'] = Trapezius_data['E1_Fz'] + Trapezius_data['E2_Fz'] + Trapezius_data['E3_Fz'] + \
                                 Trapezius_data['E4_Fz'] + Trapezius_data['E5_Fz'] + Trapezius_data['E6_Fz'] + \
                                 Trapezius_data['E7_Fz'] + Trapezius_data['E8_Fz'] + Trapezius_data['E9_Fz'] + \
                                 Trapezius_data['E10_Fz'] + Trapezius_data['E11_Fz'] + Trapezius_data['E12_Fz'] + \
                                 Trapezius_data['E13_Fz'] + Trapezius_data['E14_Fz'] + Trapezius_data['E15_Fz'] + \
                                 Trapezius_data['E16_Fz']
Trapezius_data['Trapezius_stretch'] = (Trapezius_data['E1_stretch'] + Trapezius_data['E2_stretch'] + Trapezius_data[
    'E3_stretch'] + Trapezius_data['E4_stretch'] + Trapezius_data['E5_stretch'] + Trapezius_data['E6_stretch'] +
                                       Trapezius_data['E7_stretch'] + Trapezius_data['E8_stretch'] + Trapezius_data[
                                           'E9_stretch'] + Trapezius_data['E10_stretch'] + Trapezius_data[
                                           'E11_stretch'] + Trapezius_data['E12_stretch'] + Trapezius_data[
                                           'E13_stretch'] + Trapezius_data['E14_stretch'] + Trapezius_data[
                                           'E15_stretch'] + Trapezius_data['E16_stretch']
                                       ) / 16  # AVERAGE
Trapezius_data['Trapezius_Fres'] = ((Trapezius_data['Trapezius_Fy']) ** 2 + (
Trapezius_data['Trapezius_Fz']) ** 2) ** 0.5
Trapezius_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Splenius_Capitis_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

Splenius_Capitis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                   pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                   pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                                   pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                   pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                                   ], axis=1)

Splenius_Capitis_data['Splenius_Capitis_Fr'] = (Splenius_Capitis_data['E1_Fr'] + Splenius_Capitis_data['E2_Fr'])
Splenius_Capitis_data['Splenius_Capitis_Fy'] = (Splenius_Capitis_data['E1_Fy'] + Splenius_Capitis_data['E2_Fy'])
Splenius_Capitis_data['Splenius_Capitis_Fz'] = Splenius_Capitis_data['E1_Fz'] + Splenius_Capitis_data['E2_Fz']
Splenius_Capitis_data['Splenius_Capitis_stretch'] = (Splenius_Capitis_data['E1_stretch'] + Splenius_Capitis_data[
    'E2_stretch']) / 2  # AVERAGE
Splenius_Capitis_data['Splenius_Capitis_Fres'] = ((Splenius_Capitis_data['Splenius_Capitis_Fy']) ** 2 + (
Splenius_Capitis_data['Splenius_Capitis_Fz']) ** 2) ** 0.5

# print(Splenius_Capitis_data)
Splenius_Capitis_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'SCM_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element1_Fy = []
element2_Fy = []
element1_Fz = []
element2_Fz = []
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

SCM_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                      pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                      pd.Series(element1_stretch, name='E1_stretch'),
                      pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                      pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch')
                      ], axis=1)

SCM_data['SCM_Fr'] = (SCM_data['E1_Fr'] + SCM_data['E2_Fr'])
SCM_data['SCM_Fy'] = (SCM_data['E1_Fy'] + SCM_data['E2_Fy'])
SCM_data['SCM_Fz'] = SCM_data['E1_Fz'] + SCM_data['E2_Fz']
SCM_data['SCM_stretch'] = (SCM_data['E1_stretch'] + SCM_data['E2_stretch']) / 2  # AVERAGE
SCM_data['SCM_Fres'] = ((SCM_data['SCM_Fy']) ** 2 + (SCM_data['SCM_Fz']) ** 2) ** 0.5

# print(SCM_data)
SCM_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'Semispinalis_Capitis_results'  # 20 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
element17_Fr = []
element18_Fr = []
element19_Fr = []
element20_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
element17_Fy = []
element18_Fy = []
element19_Fy = []
element20_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
element17_Fz = []
element18_Fz = []
element19_Fz = []
element20_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []
element17_stretch = []
element18_stretch = []
element19_stretch = []
element20_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        element17 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 16])
        element18 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 17])
        element19 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 18])
        element20 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 19])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        e13_Fr = float(element13[1])
        e13_Fr = abs(round(e13_Fr, 6))
        e13_Fy = float(element13[3])
        e13_Fy = abs(round(e13_Fy, 6))
        e13_Fz = float(element13[4])
        e13_Fz = abs(round(e13_Fz, 6))
        e13_stretch = float(element13[5])
        e13_stretch = abs(round(e13_stretch, 6))

        e14_Fr = float(element14[1])
        e14_Fr = abs(round(e14_Fr, 6))
        e14_Fy = float(element14[3])
        e14_Fy = abs(round(e14_Fy, 6))
        e14_Fz = float(element14[4])
        e14_Fz = abs(round(e14_Fz, 6))
        e14_stretch = float(element14[5])
        e14_stretch = abs(round(e14_stretch, 6))

        e15_Fr = float(element15[1])
        e15_Fr = abs(round(e15_Fr, 6))
        e15_Fy = float(element15[3])
        e15_Fy = abs(round(e15_Fy, 6))
        e15_Fz = float(element15[4])
        e15_Fz = abs(round(e15_Fz, 6))
        e15_stretch = float(element15[5])
        e15_stretch = abs(round(e15_stretch, 6))

        e16_Fr = float(element16[1])
        e16_Fr = abs(round(e16_Fr, 6))
        e16_Fy = float(element16[3])
        e16_Fy = abs(round(e16_Fy, 6))
        e16_Fz = float(element16[4])
        e16_Fz = abs(round(e16_Fz, 6))
        e16_stretch = float(element16[5])
        e16_stretch = abs(round(e16_stretch, 6))

        e17_Fr = float(element17[1])
        e17_Fr = abs(round(e17_Fr, 6))
        e17_Fy = float(element17[3])
        e17_Fy = abs(round(e17_Fy, 6))
        e17_Fz = float(element17[4])
        e17_Fz = abs(round(e17_Fz, 6))
        e17_stretch = float(element17[5])
        e17_stretch = abs(round(e17_stretch, 6))

        e18_Fr = float(element18[1])
        e18_Fr = abs(round(e18_Fr, 6))
        e18_Fy = float(element18[3])
        e18_Fy = abs(round(e18_Fy, 6))
        e18_Fz = float(element18[4])
        e18_Fz = abs(round(e18_Fz, 6))
        e18_stretch = float(element18[5])
        e18_stretch = abs(round(e18_stretch, 6))

        e19_Fr = float(element19[1])
        e19_Fr = abs(round(e19_Fr, 6))
        e19_Fy = float(element19[3])
        e19_Fy = abs(round(e19_Fy, 6))
        e19_Fz = float(element19[4])
        e19_Fz = abs(round(e19_Fz, 6))
        e19_stretch = float(element19[5])
        e19_stretch = abs(round(e19_stretch, 6))

        e20_Fr = float(element20[1])
        e20_Fr = abs(round(e20_Fr, 6))
        e20_Fy = float(element20[3])
        e20_Fy = abs(round(e20_Fy, 6))
        e20_Fz = float(element20[4])
        e20_Fz = abs(round(e20_Fz, 6))
        e20_stretch = float(element20[5])
        e20_stretch = abs(round(e20_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
        element17_Fr.append(e17_Fr)
        element17_Fy.append(e17_Fy)
        element17_Fz.append(e17_Fz)
        element17_stretch.append(e17_stretch)
        element18_Fr.append(e18_Fr)
        element18_Fy.append(e18_Fy)
        element18_Fz.append(e18_Fz)
        element18_stretch.append(e18_stretch)
        element19_Fr.append(e19_Fr)
        element19_Fy.append(e19_Fy)
        element19_Fz.append(e19_Fz)
        element19_stretch.append(e19_stretch)
        element20_Fr.append(e20_Fr)
        element20_Fy.append(e20_Fy)
        element20_Fz.append(e20_Fz)
        element20_stretch.append(e20_stretch)

Semispinalis_Capitis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                       pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                       pd.Series(element1_Fz, name='E1_Fz'),
                                       pd.Series(element1_stretch, name='E1_stretch'),
                                       pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                       pd.Series(element2_Fz, name='E2_Fz'),
                                       pd.Series(element2_stretch, name='E2_stretch'),
                                       pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                       pd.Series(element3_Fz, name='E3_Fz'),
                                       pd.Series(element3_stretch, name='E3_stretch'),
                                       pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                       pd.Series(element4_Fz, name='E4_Fz'),
                                       pd.Series(element4_stretch, name='E4_stretch'),
                                       pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                       pd.Series(element5_Fz, name='E5_Fz'),
                                       pd.Series(element5_stretch, name='E5_stretch'),
                                       pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                       pd.Series(element6_Fz, name='E6_Fz'),
                                       pd.Series(element6_stretch, name='E6_stretch'),
                                       pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                       pd.Series(element7_Fz, name='E7_Fz'),
                                       pd.Series(element7_stretch, name='E7_stretch'),
                                       pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                       pd.Series(element8_Fz, name='E8_Fz'),
                                       pd.Series(element8_stretch, name='E8_stretch'),
                                       pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                       pd.Series(element9_Fz, name='E9_Fz'),
                                       pd.Series(element9_stretch, name='E9_stretch'),
                                       pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                       pd.Series(element10_Fz, name='E10_Fz'),
                                       pd.Series(element10_stretch, name='E10_stretch'),
                                       pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                       pd.Series(element11_Fz, name='E11_Fz'),
                                       pd.Series(element11_stretch, name='E11_stretch'),
                                       pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                       pd.Series(element12_Fz, name='E12_Fz'),
                                       pd.Series(element12_stretch, name='E12_stretch'),
                                       pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'),
                                       pd.Series(element13_Fz, name='E13_Fz'),
                                       pd.Series(element13_stretch, name='E13_stretch'),
                                       pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'),
                                       pd.Series(element14_Fz, name='E14_Fz'),
                                       pd.Series(element14_stretch, name='E14_stretch'),
                                       pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'),
                                       pd.Series(element15_Fz, name='E15_Fz'),
                                       pd.Series(element15_stretch, name='E15_stretch'),
                                       pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'),
                                       pd.Series(element16_Fz, name='E16_Fz'),
                                       pd.Series(element16_stretch, name='E16_stretch'),
                                       pd.Series(element17_Fr, name='E17_Fr'), pd.Series(element17_Fy, name='E17_Fy'),
                                       pd.Series(element17_Fz, name='E17_Fz'),
                                       pd.Series(element17_stretch, name='E17_stretch'),
                                       pd.Series(element18_Fr, name='E18_Fr'), pd.Series(element18_Fy, name='E18_Fy'),
                                       pd.Series(element18_Fz, name='E18_Fz'),
                                       pd.Series(element18_stretch, name='E18_stretch'),
                                       pd.Series(element19_Fr, name='E19_Fr'), pd.Series(element19_Fy, name='E19_Fy'),
                                       pd.Series(element19_Fz, name='E19_Fz'),
                                       pd.Series(element19_stretch, name='E19_stretch'),
                                       pd.Series(element20_Fr, name='E20_Fr'), pd.Series(element20_Fy, name='E20_Fy'),
                                       pd.Series(element20_Fz, name='E20_Fz'),
                                       pd.Series(element20_stretch, name='E20_stretch'),
                                       ], axis=1)

Semispinalis_Capitis_data['Semispinalis_Capitis_Fr'] = (
            Semispinalis_Capitis_data['E1_Fr'] + Semispinalis_Capitis_data['E2_Fr'] + Semispinalis_Capitis_data[
        'E3_Fr'] + Semispinalis_Capitis_data['E4_Fr'] + Semispinalis_Capitis_data['E5_Fr'] + Semispinalis_Capitis_data[
                'E6_Fr'] + Semispinalis_Capitis_data['E7_Fr'] + Semispinalis_Capitis_data['E8_Fr'] +
            Semispinalis_Capitis_data['E9_Fr'] + Semispinalis_Capitis_data['E10_Fr'] + Semispinalis_Capitis_data[
                'E11_Fr'] + Semispinalis_Capitis_data['E12_Fr'] + Semispinalis_Capitis_data['E13_Fr'] +
            Semispinalis_Capitis_data['E14_Fr'] + Semispinalis_Capitis_data['E15_Fr'] + Semispinalis_Capitis_data[
                'E16_Fr'] + Semispinalis_Capitis_data['E17_Fr'] + Semispinalis_Capitis_data['E18_Fr'] +
            Semispinalis_Capitis_data['E19_Fr'] + Semispinalis_Capitis_data['E20_Fr']
)
Semispinalis_Capitis_data['Semispinalis_Capitis_Fy'] = (
            Semispinalis_Capitis_data['E1_Fy'] + Semispinalis_Capitis_data['E2_Fy'] + Semispinalis_Capitis_data[
        'E3_Fy'] + Semispinalis_Capitis_data['E4_Fy'] + Semispinalis_Capitis_data['E5_Fy'] + Semispinalis_Capitis_data[
                'E6_Fy'] + Semispinalis_Capitis_data['E7_Fy'] + Semispinalis_Capitis_data['E8_Fy'] +
            Semispinalis_Capitis_data['E9_Fy'] + Semispinalis_Capitis_data['E10_Fy'] + Semispinalis_Capitis_data[
                'E11_Fy'] + Semispinalis_Capitis_data['E12_Fy'] + Semispinalis_Capitis_data['E13_Fy'] +
            Semispinalis_Capitis_data['E14_Fy'] + Semispinalis_Capitis_data['E15_Fy'] + Semispinalis_Capitis_data[
                'E16_Fy'] + Semispinalis_Capitis_data['E17_Fy'] + Semispinalis_Capitis_data['E18_Fy'] +
            Semispinalis_Capitis_data['E19_Fy'] + Semispinalis_Capitis_data['E20_Fy']
)
Semispinalis_Capitis_data['Semispinalis_Capitis_Fz'] = Semispinalis_Capitis_data['E1_Fz'] + Semispinalis_Capitis_data[
    'E2_Fz'] + Semispinalis_Capitis_data['E3_Fz'] + Semispinalis_Capitis_data['E4_Fz'] + Semispinalis_Capitis_data[
                                                           'E5_Fz'] + Semispinalis_Capitis_data['E6_Fz'] + Semispinalis_Capitis_data['E7_Fz'] + Semispinalis_Capitis_data[
                                                           'E8_Fz'] + Semispinalis_Capitis_data['E9_Fz'] +Semispinalis_Capitis_data['E10_Fz'] + Semispinalis_Capitis_data[
                                                           'E11_Fz'] + Semispinalis_Capitis_data['E12_Fz'] + Semispinalis_Capitis_data['E13_Fz'] + Semispinalis_Capitis_data[
                                                           'E14_Fz'] + Semispinalis_Capitis_data['E15_Fz'] + Semispinalis_Capitis_data['E16_Fz'] + Semispinalis_Capitis_data[
                                                           'E17_Fz'] + Semispinalis_Capitis_data['E18_Fz'] + Semispinalis_Capitis_data['E19_Fz'] + Semispinalis_Capitis_data[
                                                           'E20_Fz']
Semispinalis_Capitis_data['Semispinalis_Capitis_stretch'] = (
            Semispinalis_Capitis_data['E1_stretch'] + Semispinalis_Capitis_data['E2_stretch'] +
            Semispinalis_Capitis_data['E3_stretch'] + Semispinalis_Capitis_data['E4_stretch'] +
            Semispinalis_Capitis_data['E5_stretch'] + Semispinalis_Capitis_data['E6_stretch'] +
            Semispinalis_Capitis_data['E7_stretch'] + Semispinalis_Capitis_data['E8_stretch'] +
            Semispinalis_Capitis_data['E9_stretch'] + Semispinalis_Capitis_data['E10_stretch'] +
            Semispinalis_Capitis_data['E11_stretch'] + Semispinalis_Capitis_data['E12_stretch'] +
            Semispinalis_Capitis_data['E13_stretch'] + Semispinalis_Capitis_data['E14_stretch'] +
            Semispinalis_Capitis_data['E15_stretch'] + Semispinalis_Capitis_data['E16_stretch'] +
            Semispinalis_Capitis_data['E17_stretch'] + Semispinalis_Capitis_data['E18_stretch'] +
            Semispinalis_Capitis_data['E19_stretch'] + Semispinalis_Capitis_data['E20_stretch']
) / 20  # AVERAGE
Semispinalis_Capitis_data['Semispinalis_Capitis_Fres'] = ((
                                                          Semispinalis_Capitis_data['Semispinalis_Capitis_Fy']) ** 2 + (
                                                          Semispinalis_Capitis_data[
                                                              'Semispinalis_Capitis_Fz']) ** 2) ** 0.5

# print(Semispinalis_Capitis_data)
Semispinalis_Capitis_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'Semispinalis_Cervicis_results'  # 12 spring element
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)

Semispinalis_Cervicis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                        pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                        pd.Series(element1_Fz, name='E1_Fz'),
                                        pd.Series(element1_stretch, name='E1_stretch'),
                                        pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                        pd.Series(element2_Fz, name='E2_Fz'),
                                        pd.Series(element2_stretch, name='E2_stretch'),
                                        pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                        pd.Series(element3_Fz, name='E3_Fz'),
                                        pd.Series(element3_stretch, name='E3_stretch'),
                                        pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                        pd.Series(element4_Fz, name='E4_Fz'),
                                        pd.Series(element4_stretch, name='E4_stretch'),
                                        pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                        pd.Series(element5_Fz, name='E5_Fz'),
                                        pd.Series(element5_stretch, name='E5_stretch'),
                                        pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                        pd.Series(element6_Fz, name='E6_Fz'),
                                        pd.Series(element6_stretch, name='E6_stretch'),
                                        pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                        pd.Series(element7_Fz, name='E7_Fz'),
                                        pd.Series(element7_stretch, name='E7_stretch'),
                                        pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                        pd.Series(element8_Fz, name='E8_Fz'),
                                        pd.Series(element8_stretch, name='E8_stretch'),
                                        pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                        pd.Series(element9_Fz, name='E9_Fz'),
                                        pd.Series(element9_stretch, name='E9_stretch'),
                                        pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                        pd.Series(element10_Fz, name='E10_Fz'),
                                        pd.Series(element10_stretch, name='E10_stretch'),
                                        pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                        pd.Series(element11_Fz, name='E11_Fz'),
                                        pd.Series(element11_stretch, name='E11_stretch'),
                                        pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                        pd.Series(element12_Fz, name='E12_Fz'),
                                        pd.Series(element12_stretch, name='E12_stretch')
                                        ], axis=1)

Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fr'] = (
Semispinalis_Cervicis_data['E1_Fr'] + Semispinalis_Cervicis_data['E2_Fr'] + Semispinalis_Cervicis_data['E3_Fr'] +
Semispinalis_Cervicis_data['E4_Fr'] +
Semispinalis_Cervicis_data['E5_Fr'] + Semispinalis_Cervicis_data['E6_Fr'] + Semispinalis_Cervicis_data['E7_Fr'] +
Semispinalis_Cervicis_data['E8_Fr'] +
Semispinalis_Cervicis_data['E9_Fr'] + Semispinalis_Cervicis_data['E10_Fr'] + Semispinalis_Cervicis_data['E11_Fr'] + \
Semispinalis_Cervicis_data['E12_Fr']
)
Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fy'] = (
Semispinalis_Cervicis_data['E1_Fy'] + Semispinalis_Cervicis_data['E2_Fy'] + Semispinalis_Cervicis_data['E3_Fy'] +
Semispinalis_Cervicis_data['E4_Fy'] +
Semispinalis_Cervicis_data['E5_Fy'] + Semispinalis_Cervicis_data['E6_Fy'] + Semispinalis_Cervicis_data['E7_Fy'] +
Semispinalis_Cervicis_data['E8_Fy'] +
Semispinalis_Cervicis_data['E9_Fy'] + Semispinalis_Cervicis_data['E10_Fy'] + Semispinalis_Cervicis_data['E11_Fy'] + \
Semispinalis_Cervicis_data['E12_Fy']
)
Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fz'] = Semispinalis_Cervicis_data['E1_Fz'] + Semispinalis_Cervicis_data['E2_Fz'] +Semispinalis_Cervicis_data['E3_Fz'] +Semispinalis_Cervicis_data['E4_Fz'] + Semispinalis_Cervicis_data['E5_Fz'] +Semispinalis_Cervicis_data['E6_Fz'] +Semispinalis_Cervicis_data['E7_Fz'] +Semispinalis_Cervicis_data['E8_Fz'] +Semispinalis_Cervicis_data['E9_Fz'] +Semispinalis_Cervicis_data['E10_Fz'] + Semispinalis_Cervicis_data['E11_Fz'] + Semispinalis_Cervicis_data['E12_Fz']
Semispinalis_Cervicis_data['Semispinalis_Cervicis_stretch'] = (
Semispinalis_Cervicis_data['E1_stretch'] + Semispinalis_Cervicis_data['E2_stretch'] + Semispinalis_Cervicis_data[
    'E3_stretch'] + Semispinalis_Cervicis_data[
    'E4_stretch'] + Semispinalis_Cervicis_data['E5_stretch'] + Semispinalis_Cervicis_data['E6_stretch'] +
Semispinalis_Cervicis_data['E7_stretch'] +
Semispinalis_Cervicis_data['E8_stretch'] + Semispinalis_Cervicis_data['E9_stretch'] + Semispinalis_Cervicis_data[
    'E10_stretch'] +
Semispinalis_Cervicis_data['E11_stretch'] + Semispinalis_Cervicis_data['E12_stretch']
) / 12  # AVERAGE
Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fres'] = ((Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fy']) ** 2 + (Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fz']) ** 2) ** 0.5

###########################################################################################################

###########################################################################################################
filename = 'RCPM_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element1_Fy = []
element2_Fy = []
element1_Fz = []
element2_Fz = []
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

RCPM_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                       pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                       pd.Series(element1_stretch, name='E1_stretch'),
                       pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                       pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch')
                       ], axis=1)

RCPM_data['RCPM_Fr'] = (RCPM_data['E1_Fr'] + RCPM_data['E2_Fr'])
RCPM_data['RCPM_Fy'] = (RCPM_data['E1_Fy'] + RCPM_data['E2_Fy'])
RCPM_data['RCPM_Fz'] = RCPM_data['E1_Fz'] + RCPM_data['E2_Fz']
RCPM_data['RCPM_stretch'] = (RCPM_data['E1_stretch'] + RCPM_data['E2_stretch']) / 2  # AVERAGE
RCPM_data['RCPM_Fres'] = ((RCPM_data['RCPM_Fy']) ** 2 + (RCPM_data['RCPM_Fz']) ** 2) ** 0.5

# print(RCPM_data)
RCPM_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Longissimus_Cervicis_results'  # 18 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
element17_Fr = []
element18_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
element17_Fy = []
element18_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
element17_Fz = []
element18_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []
element17_stretch = []
element18_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        element17 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 16])
        element18 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 17])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        e13_Fr = float(element13[1])
        e13_Fr = abs(round(e13_Fr, 6))
        e13_Fy = float(element13[3])
        e13_Fy = abs(round(e13_Fy, 6))
        e13_Fz = float(element13[4])
        e13_Fz = abs(round(e13_Fz, 6))
        e13_stretch = float(element13[5])
        e13_stretch = abs(round(e13_stretch, 6))

        e14_Fr = float(element14[1])
        e14_Fr = abs(round(e14_Fr, 6))
        e14_Fy = float(element14[3])
        e14_Fy = abs(round(e14_Fy, 6))
        e14_Fz = float(element14[4])
        e14_Fz = abs(round(e14_Fz, 6))
        e14_stretch = float(element14[5])
        e14_stretch = abs(round(e14_stretch, 6))

        e15_Fr = float(element15[1])
        e15_Fr = abs(round(e15_Fr, 6))
        e15_Fy = float(element15[3])
        e15_Fy = abs(round(e15_Fy, 6))
        e15_Fz = float(element15[4])
        e15_Fz = abs(round(e15_Fz, 6))
        e15_stretch = float(element15[5])
        e15_stretch = abs(round(e15_stretch, 6))

        e16_Fr = float(element16[1])
        e16_Fr = abs(round(e16_Fr, 6))
        e16_Fy = float(element16[3])
        e16_Fy = abs(round(e16_Fy, 6))
        e16_Fz = float(element16[4])
        e16_Fz = abs(round(e16_Fz, 6))
        e16_stretch = float(element16[5])
        e16_stretch = abs(round(e16_stretch, 6))

        e17_Fr = float(element17[1])
        e17_Fr = abs(round(e17_Fr, 6))
        e17_Fy = float(element17[3])
        e17_Fy = abs(round(e17_Fy, 6))
        e17_Fz = float(element17[4])
        e17_Fz = abs(round(e17_Fz, 6))
        e17_stretch = float(element17[5])
        e17_stretch = abs(round(e17_stretch, 6))

        e18_Fr = float(element18[1])
        e18_Fr = abs(round(e18_Fr, 6))
        e18_Fy = float(element18[3])
        e18_Fy = abs(round(e18_Fy, 6))
        e18_Fz = float(element18[4])
        e18_Fz = abs(round(e18_Fz, 6))
        e18_stretch = float(element18[5])
        e18_stretch = abs(round(e18_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
        element17_Fr.append(e17_Fr)
        element17_Fy.append(e17_Fy)
        element17_Fz.append(e17_Fz)
        element17_stretch.append(e17_stretch)
        element18_Fr.append(e18_Fr)
        element18_Fy.append(e18_Fy)
        element18_Fz.append(e18_Fz)
        element18_stretch.append(e18_stretch)

Longissimus_Cervicis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                       pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                       pd.Series(element1_Fz, name='E1_Fz'),
                                       pd.Series(element1_stretch, name='E1_stretch'),
                                       pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                       pd.Series(element2_Fz, name='E2_Fz'),
                                       pd.Series(element2_stretch, name='E2_stretch'),
                                       pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                       pd.Series(element3_Fz, name='E3_Fz'),
                                       pd.Series(element3_stretch, name='E3_stretch'),
                                       pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                       pd.Series(element4_Fz, name='E4_Fz'),
                                       pd.Series(element4_stretch, name='E4_stretch'),
                                       pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                       pd.Series(element5_Fz, name='E5_Fz'),
                                       pd.Series(element5_stretch, name='E5_stretch'),
                                       pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                       pd.Series(element6_Fz, name='E6_Fz'),
                                       pd.Series(element6_stretch, name='E6_stretch'),
                                       pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                       pd.Series(element7_Fz, name='E7_Fz'),
                                       pd.Series(element7_stretch, name='E7_stretch'),
                                       pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                       pd.Series(element8_Fz, name='E8_Fz'),
                                       pd.Series(element8_stretch, name='E8_stretch'),
                                       pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                       pd.Series(element9_Fz, name='E9_Fz'),
                                       pd.Series(element9_stretch, name='E9_stretch'),
                                       pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                       pd.Series(element10_Fz, name='E10_Fz'),
                                       pd.Series(element10_stretch, name='E10_stretch'),
                                       pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                       pd.Series(element11_Fz, name='E11_Fz'),
                                       pd.Series(element11_stretch, name='E11_stretch'),
                                       pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                       pd.Series(element12_Fz, name='E12_Fz'),
                                       pd.Series(element12_stretch, name='E12_stretch'),
                                       pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'),
                                       pd.Series(element13_Fz, name='E13_Fz'),
                                       pd.Series(element13_stretch, name='E13_stretch'),
                                       pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'),
                                       pd.Series(element14_Fz, name='E14_Fz'),
                                       pd.Series(element14_stretch, name='E14_stretch'),
                                       pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'),
                                       pd.Series(element15_Fz, name='E15_Fz'),
                                       pd.Series(element15_stretch, name='E15_stretch'),
                                       pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'),
                                       pd.Series(element16_Fz, name='E16_Fz'),
                                       pd.Series(element16_stretch, name='E16_stretch'),
                                       pd.Series(element17_Fr, name='E17_Fr'), pd.Series(element17_Fy, name='E17_Fy'),
                                       pd.Series(element17_Fz, name='E17_Fz'),
                                       pd.Series(element17_stretch, name='E17_stretch'),
                                       pd.Series(element18_Fr, name='E18_Fr'), pd.Series(element18_Fy, name='E18_Fy'),
                                       pd.Series(element18_Fz, name='E18_Fz'),
                                       pd.Series(element18_stretch, name='E18_stretch'),
                                       ], axis=1)

Longissimus_Cervicis_data['Longissimus_Cervicis_Fr'] = (
            Longissimus_Cervicis_data['E1_Fr'] + Longissimus_Cervicis_data['E2_Fr'] + Longissimus_Cervicis_data[
        'E3_Fr'] + Longissimus_Cervicis_data['E4_Fr'] + Longissimus_Cervicis_data['E5_Fr'] + Longissimus_Cervicis_data[
                'E6_Fr'] + Longissimus_Cervicis_data['E7_Fr'] + Longissimus_Cervicis_data['E8_Fr'] +
            Longissimus_Cervicis_data['E9_Fr'] + Longissimus_Cervicis_data['E10_Fr'] + Longissimus_Cervicis_data[
                'E11_Fr'] + Longissimus_Cervicis_data['E12_Fr'] + Longissimus_Cervicis_data['E13_Fr'] +
            Longissimus_Cervicis_data['E14_Fr'] + Longissimus_Cervicis_data['E15_Fr'] + Longissimus_Cervicis_data[
                'E16_Fr'] + Longissimus_Cervicis_data['E17_Fr'] + Longissimus_Cervicis_data['E18_Fr']
)
Longissimus_Cervicis_data['Longissimus_Cervicis_Fy'] = (
            Longissimus_Cervicis_data['E1_Fy'] + Longissimus_Cervicis_data['E2_Fy'] + Longissimus_Cervicis_data[
        'E3_Fy'] + Longissimus_Cervicis_data['E4_Fy'] + Longissimus_Cervicis_data['E5_Fy'] + Longissimus_Cervicis_data[
                'E6_Fy'] + Longissimus_Cervicis_data['E7_Fy'] + Longissimus_Cervicis_data['E8_Fy'] +
            Longissimus_Cervicis_data['E9_Fy'] + Longissimus_Cervicis_data['E10_Fy'] + Longissimus_Cervicis_data[
                'E11_Fy'] + Longissimus_Cervicis_data['E12_Fy'] + Longissimus_Cervicis_data['E13_Fy'] +
            Longissimus_Cervicis_data['E14_Fy'] + Longissimus_Cervicis_data['E15_Fy'] + Longissimus_Cervicis_data[
                'E16_Fy'] + Longissimus_Cervicis_data['E17_Fy'] + Longissimus_Cervicis_data['E18_Fy']
)
Longissimus_Cervicis_data['Longissimus_Cervicis_Fz'] = Longissimus_Cervicis_data['E1_Fz'] + Longissimus_Cervicis_data[
    'E2_Fz'] + Longissimus_Cervicis_data['E3_Fz'] + Longissimus_Cervicis_data['E4_Fz'] + Longissimus_Cervicis_data[
                                                           'E5_Fz'] + Longissimus_Cervicis_data['E6_Fz'] +Longissimus_Cervicis_data['E7_Fz'] + Longissimus_Cervicis_data[
                                                           'E8_Fz'] + Longissimus_Cervicis_data['E9_Fz'] +Longissimus_Cervicis_data['E10_Fz'] + Longissimus_Cervicis_data[
                                                           'E11_Fz'] + Longissimus_Cervicis_data['E12_Fz'] +Longissimus_Cervicis_data['E13_Fz'] + Longissimus_Cervicis_data[
                                                           'E14_Fz'] + Longissimus_Cervicis_data['E15_Fz'] +Longissimus_Cervicis_data['E16_Fz'] + Longissimus_Cervicis_data[
                                                           'E17_Fz'] + Longissimus_Cervicis_data['E18_Fz']
Longissimus_Cervicis_data['Longissimus_Cervicis_stretch'] = (
            Longissimus_Cervicis_data['E1_stretch'] + Longissimus_Cervicis_data['E2_stretch'] +
            Longissimus_Cervicis_data['E3_stretch'] + Longissimus_Cervicis_data['E4_stretch'] +
            Longissimus_Cervicis_data['E5_stretch'] + Longissimus_Cervicis_data['E6_stretch'] +
            Longissimus_Cervicis_data['E7_stretch'] + Longissimus_Cervicis_data['E8_stretch'] +
            Longissimus_Cervicis_data['E9_stretch'] + Longissimus_Cervicis_data['E10_stretch'] +
            Longissimus_Cervicis_data['E11_stretch'] + Longissimus_Cervicis_data['E12_stretch'] +
            Longissimus_Cervicis_data['E13_stretch'] + Longissimus_Cervicis_data['E14_stretch'] +
            Longissimus_Cervicis_data['E15_stretch'] + Longissimus_Cervicis_data['E16_stretch'] +
            Longissimus_Cervicis_data['E17_stretch'] + Longissimus_Cervicis_data['E18_stretch']
) / 18  # AVERAGE
Longissimus_Cervicis_data['Longissimus_Cervicis_Fres'] = ((Longissimus_Cervicis_data['Longissimus_Cervicis_Fy']) ** 2 + (Longissimus_Cervicis_data['Longissimus_Cervicis_Fz']) ** 2) ** 0.5

# print(Longissimus_Cervicis_data)
Longissimus_Cervicis_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'Splenius_Cervicis_results'  # 12 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)

Splenius_Cervicis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                    pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                    pd.Series(element1_Fz, name='E1_Fz'),
                                    pd.Series(element1_stretch, name='E1_stretch'),
                                    pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                    pd.Series(element2_Fz, name='E2_Fz'),
                                    pd.Series(element2_stretch, name='E2_stretch'),
                                    pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                    pd.Series(element3_Fz, name='E3_Fz'),
                                    pd.Series(element3_stretch, name='E3_stretch'),
                                    pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                    pd.Series(element4_Fz, name='E4_Fz'),
                                    pd.Series(element4_stretch, name='E4_stretch'),
                                    pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                    pd.Series(element5_Fz, name='E5_Fz'),
                                    pd.Series(element5_stretch, name='E5_stretch'),
                                    pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                    pd.Series(element6_Fz, name='E6_Fz'),
                                    pd.Series(element6_stretch, name='E6_stretch'),
                                    pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                    pd.Series(element7_Fz, name='E7_Fz'),
                                    pd.Series(element7_stretch, name='E7_stretch'),
                                    pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                    pd.Series(element8_Fz, name='E8_Fz'),
                                    pd.Series(element8_stretch, name='E8_stretch'),
                                    pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                    pd.Series(element9_Fz, name='E9_Fz'),
                                    pd.Series(element9_stretch, name='E9_stretch'),
                                    pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                    pd.Series(element10_Fz, name='E10_Fz'),
                                    pd.Series(element10_stretch, name='E10_stretch'),
                                    pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                    pd.Series(element11_Fz, name='E11_Fz'),
                                    pd.Series(element11_stretch, name='E11_stretch'),
                                    pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                    pd.Series(element12_Fz, name='E12_Fz'),
                                    pd.Series(element12_stretch, name='E12_stretch')
                                    ], axis=1)

Splenius_Cervicis_data['Splenius_Cervicis_Fr'] = (
Splenius_Cervicis_data['E1_Fr'] + Splenius_Cervicis_data['E2_Fr'] + Splenius_Cervicis_data['E3_Fr'] +
Splenius_Cervicis_data['E4_Fr'] +
Splenius_Cervicis_data['E5_Fr'] + Splenius_Cervicis_data['E6_Fr'] + Splenius_Cervicis_data['E7_Fr'] +
Splenius_Cervicis_data['E8_Fr'] +
Splenius_Cervicis_data['E9_Fr'] + Splenius_Cervicis_data['E10_Fr'] + Splenius_Cervicis_data['E11_Fr'] + \
Splenius_Cervicis_data['E12_Fr']
)
Splenius_Cervicis_data['Splenius_Cervicis_Fy'] = (
Splenius_Cervicis_data['E1_Fy'] + Splenius_Cervicis_data['E2_Fy'] + Splenius_Cervicis_data['E3_Fy'] +
Splenius_Cervicis_data['E4_Fy'] +
Splenius_Cervicis_data['E5_Fy'] + Splenius_Cervicis_data['E6_Fy'] + Splenius_Cervicis_data['E7_Fy'] +
Splenius_Cervicis_data['E8_Fy'] +
Splenius_Cervicis_data['E9_Fy'] + Splenius_Cervicis_data['E10_Fy'] + Splenius_Cervicis_data['E11_Fy'] + \
Splenius_Cervicis_data['E12_Fy']
)
Splenius_Cervicis_data['Splenius_Cervicis_Fz'] = Splenius_Cervicis_data['E1_Fz'] + Splenius_Cervicis_data['E2_Fz'] +  Splenius_Cervicis_data['E3_Fz'] + Splenius_Cervicis_data['E4_Fz'] + Splenius_Cervicis_data['E5_Fz'] +  Splenius_Cervicis_data['E6_Fz'] +Splenius_Cervicis_data['E7_Fz'] + Splenius_Cervicis_data['E8_Fz'] +Splenius_Cervicis_data['E9_Fz'] +Splenius_Cervicis_data['E10_Fz'] + Splenius_Cervicis_data['E11_Fz'] + Splenius_Cervicis_data['E12_Fz']
Splenius_Cervicis_data['Splenius_Cervicis_stretch'] = (
Splenius_Cervicis_data['E1_stretch'] + Splenius_Cervicis_data['E2_stretch'] + Splenius_Cervicis_data['E3_stretch'] +
Splenius_Cervicis_data[
    'E4_stretch'] + Splenius_Cervicis_data['E5_stretch'] + Splenius_Cervicis_data['E6_stretch'] +
Splenius_Cervicis_data['E7_stretch'] +
Splenius_Cervicis_data['E8_stretch'] + Splenius_Cervicis_data['E9_stretch'] + Splenius_Cervicis_data['E10_stretch'] +
Splenius_Cervicis_data['E11_stretch'] + Splenius_Cervicis_data['E12_stretch']
) / 12  # AVERAGE
# print(Splenius_Cervicis_data)
Splenius_Cervicis_data['Splenius_Cervicis_Fres'] = ((Splenius_Cervicis_data['Splenius_Cervicis_Fy']) ** 2 + (Splenius_Cervicis_data['Splenius_Cervicis_Fz']) ** 2) ** 0.5
Splenius_Cervicis_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Longus_Capitis_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)

Longus_Capitis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                 pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                 pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                                 pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                 pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                                 pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                 pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                                 pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                 pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                                 pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                 pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                                 pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                 pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                                 pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                 pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                                 pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                 pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                                 pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                 pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                                 pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                 pd.Series(element10_Fz, name='E10_Fz'),
                                 pd.Series(element10_stretch, name='E10_stretch'),
                                 pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                 pd.Series(element11_Fz, name='E11_Fz'),
                                 pd.Series(element11_stretch, name='E11_stretch'),
                                 pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                 pd.Series(element12_Fz, name='E12_Fz'),
                                 pd.Series(element12_stretch, name='E12_stretch')
                                 ], axis=1)

Longus_Capitis_data['Longus_Capitis_Fr'] = (
Longus_Capitis_data['E1_Fr'] + Longus_Capitis_data['E2_Fr'] + Longus_Capitis_data['E3_Fr'] + Longus_Capitis_data[
    'E4_Fr'] +
Longus_Capitis_data['E5_Fr'] + Longus_Capitis_data['E6_Fr'] + Longus_Capitis_data['E7_Fr'] + Longus_Capitis_data[
    'E8_Fr'] +
Longus_Capitis_data['E9_Fr'] + Longus_Capitis_data['E10_Fr'] + Longus_Capitis_data['E11_Fr'] + Longus_Capitis_data[
    'E12_Fr']
)
Longus_Capitis_data['Longus_Capitis_Fy'] = (
Longus_Capitis_data['E1_Fy'] + Longus_Capitis_data['E2_Fy'] + Longus_Capitis_data['E3_Fy'] + Longus_Capitis_data[
    'E4_Fy'] +
Longus_Capitis_data['E5_Fy'] + Longus_Capitis_data['E6_Fy'] + Longus_Capitis_data['E7_Fy'] + Longus_Capitis_data[
    'E8_Fy'] +
Longus_Capitis_data['E9_Fy'] + Longus_Capitis_data['E10_Fy'] + Longus_Capitis_data['E11_Fy'] + Longus_Capitis_data[
    'E12_Fy']
)
Longus_Capitis_data['Longus_Capitis_Fz'] = Longus_Capitis_data['E1_Fz'] + Longus_Capitis_data['E2_Fz'] +Longus_Capitis_data['E3_Fz'] +Longus_Capitis_data['E4_Fz'] + Longus_Capitis_data['E5_Fz'] +Longus_Capitis_data['E6_Fz'] + Longus_Capitis_data['E7_Fz'] + Longus_Capitis_data['E8_Fz'] + Longus_Capitis_data['E9_Fz'] +Longus_Capitis_data['E10_Fz'] + Longus_Capitis_data['E11_Fz'] +Longus_Capitis_data['E12_Fz']
Longus_Capitis_data['Longus_Capitis_stretch'] = (
Longus_Capitis_data['E1_stretch'] + Longus_Capitis_data['E2_stretch'] + Longus_Capitis_data['E3_stretch'] +
Longus_Capitis_data[
    'E4_stretch'] + Longus_Capitis_data['E5_stretch'] + Longus_Capitis_data['E6_stretch'] + Longus_Capitis_data[
    'E7_stretch'] +
Longus_Capitis_data['E8_stretch'] + Longus_Capitis_data['E9_stretch'] + Longus_Capitis_data['E10_stretch'] +
Longus_Capitis_data['E11_stretch'] + Longus_Capitis_data['E12_stretch']
) / 12  # AVERAGE
Longus_Capitis_data['Longus_Capitis_Fres'] = ((Longus_Capitis_data['Longus_Capitis_Fy']) ** 2 + (Longus_Capitis_data['Longus_Capitis_Fz']) ** 2) ** 0.5
# print(Longus_Capitis_data)
Longus_Capitis_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'RCPminor_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

RCPminor_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                           pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                           pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           ], axis=1)

RCPminor_data['RCPminor_Fr'] = (RCPminor_data['E1_Fr'] + RCPminor_data['E2_Fr'])
RCPminor_data['RCPminor_Fy'] = (RCPminor_data['E1_Fy'] + RCPminor_data['E2_Fy'])
RCPminor_data['RCPminor_Fz'] = RCPminor_data['E1_Fz'] + RCPminor_data['E2_Fz']
RCPminor_data['RCPminor_stretch'] = (RCPminor_data['E1_stretch'] + RCPminor_data['E2_stretch']) / 2  # AVERAGE
RCPminor_data['RCPminor_Fres'] = ((RCPminor_data['RCPminor_Fy']) ** 2 + (RCPminor_data['RCPminor_Fz']) ** 2) ** 0.5

# print(RCPminor_data)
RCPminor_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'Levator_Scapulae_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

Levator_Scapulae_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                   pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                   pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                                   pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                   pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                                   pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                   pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                                   pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                   pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                                   pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                   pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                                   pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                   pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                                   pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                   pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                                   pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                   pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                                   ], axis=1)

Levator_Scapulae_data['Levator_Scapulae_Fr'] = (
Levator_Scapulae_data['E1_Fr'] + Levator_Scapulae_data['E2_Fr'] + Levator_Scapulae_data['E3_Fr'] +
Levator_Scapulae_data['E4_Fr'] +
Levator_Scapulae_data['E5_Fr'] + Levator_Scapulae_data['E6_Fr'] + Levator_Scapulae_data['E7_Fr'] + \
Levator_Scapulae_data['E8_Fr']
)
Levator_Scapulae_data['Levator_Scapulae_Fy'] = (
Levator_Scapulae_data['E1_Fy'] + Levator_Scapulae_data['E2_Fy'] + Levator_Scapulae_data['E3_Fy'] +
Levator_Scapulae_data['E4_Fy'] +
Levator_Scapulae_data['E5_Fy'] + Levator_Scapulae_data['E6_Fy'] + Levator_Scapulae_data['E7_Fy'] + \
Levator_Scapulae_data['E8_Fy']
)
Levator_Scapulae_data['Levator_Scapulae_Fz'] = Levator_Scapulae_data['E1_Fz'] + Levator_Scapulae_data['E2_Fz'] +Levator_Scapulae_data['E3_Fz'] + Levator_Scapulae_data['E4_Fz'] + Levator_Scapulae_data['E5_Fz'] +Levator_Scapulae_data['E6_Fz'] +Levator_Scapulae_data['E7_Fz'] + Levator_Scapulae_data['E8_Fz']
Levator_Scapulae_data['Levator_Scapulae_stretch'] = (Levator_Scapulae_data['E1_stretch'] + Levator_Scapulae_data['E2_stretch'] + Levator_Scapulae_data['E3_stretch'] +
Levator_Scapulae_data['E4_stretch'] + Levator_Scapulae_data['E5_stretch'] + Levator_Scapulae_data['E6_stretch'] + Levator_Scapulae_data['E7_stretch'] +
Levator_Scapulae_data['E8_stretch']
) / 8  # AVERAGE
Levator_Scapulae_data['Levator_Scapulae_Fres'] = ((Levator_Scapulae_data['Levator_Scapulae_Fy']) ** 2 + (Levator_Scapulae_data['Levator_Scapulae_Fz']) ** 2) ** 0.5
# print(Levator_Scapulae_data)
Levator_Scapulae_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Oblique_Capitis_Inferior_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

Oblique_Capitis_Inferior_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                           pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                           pd.Series(element1_Fz, name='E1_Fz'),
                                           pd.Series(element1_stretch, name='E1_stretch'),
                                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                           pd.Series(element2_Fz, name='E2_Fz'),
                                           pd.Series(element2_stretch, name='E2_stretch'),
                                           ], axis=1)

Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fr'] = (
            Oblique_Capitis_Inferior_data['E1_Fr'] + Oblique_Capitis_Inferior_data['E2_Fr'])
Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fy'] = (
            Oblique_Capitis_Inferior_data['E1_Fy'] + Oblique_Capitis_Inferior_data['E2_Fy'])
Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fz'] = Oblique_Capitis_Inferior_data['E1_Fz'] +Oblique_Capitis_Inferior_data['E2_Fz']
Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_stretch'] = (Oblique_Capitis_Inferior_data['E1_stretch'] +Oblique_Capitis_Inferior_data['E2_stretch']) / 2  # AVERAGE
Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fres'] = ((Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fy']) ** 2 + (Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fz']) ** 2) ** 0.5

# print(Oblique_Capitis_Inferior_data)
Oblique_Capitis_Inferior_data.to_csv(path + filename + ".csv")

###########################################################################################################
filename = 'Oblique_Capitis_Superior_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

Oblique_Capitis_Superior_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                           pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                           pd.Series(element1_Fz, name='E1_Fz'),
                                           pd.Series(element1_stretch, name='E1_stretch'),
                                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                           pd.Series(element2_Fz, name='E2_Fz'),
                                           pd.Series(element2_stretch, name='E2_stretch'),
                                           ], axis=1)

Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fr'] = (
            Oblique_Capitis_Superior_data['E1_Fr'] + Oblique_Capitis_Superior_data['E2_Fr'])
Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fy'] = (
            Oblique_Capitis_Superior_data['E1_Fy'] + Oblique_Capitis_Superior_data['E2_Fy'])
Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fz'] = Oblique_Capitis_Superior_data['E1_Fz'] +Oblique_Capitis_Superior_data['E2_Fz']
Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_stretch'] = (Oblique_Capitis_Superior_data['E1_stretch'] +Oblique_Capitis_Superior_data[
                                                                         'E2_stretch']) / 2  # AVERAGE
Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fres'] = ((Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fy']) ** 2 + (Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fz']) ** 2) ** 0.5

# print(Oblique_Capitis_Superior_data)
Oblique_Capitis_Superior_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Rectus_Capitis_Lateralis_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

Rectus_Capitis_Lateralis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                           pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                           pd.Series(element1_Fz, name='E1_Fz'),
                                           pd.Series(element1_stretch, name='E1_stretch'),
                                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                           pd.Series(element2_Fz, name='E2_Fz'),
                                           pd.Series(element2_stretch, name='E2_stretch'),
                                           ], axis=1)

Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fr'] = (
            Rectus_Capitis_Lateralis_data['E1_Fr'] + Rectus_Capitis_Lateralis_data['E2_Fr'])
Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fy'] = (
            Rectus_Capitis_Lateralis_data['E1_Fy'] + Rectus_Capitis_Lateralis_data['E2_Fy'])
Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fz'] = Rectus_Capitis_Lateralis_data['E1_Fz'] +Rectus_Capitis_Lateralis_data['E2_Fz']
Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_stretch'] = (Rectus_Capitis_Lateralis_data['E1_stretch'] +Rectus_Capitis_Lateralis_data[
                                                                         'E2_stretch']) / 2  # AVERAGE
Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fres'] = ((Rectus_Capitis_Lateralis_data[
    'Rectus_Capitis_Lateralis_Fy']) ** 2 + (Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fz']) ** 2) ** 0.5

# print(Rectus_Capitis_Lateralis_data)
Rectus_Capitis_Lateralis_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'Rectus_Capitis_Anterior_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

Rectus_Capitis_Anterior_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                          pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                          pd.Series(element1_Fz, name='E1_Fz'),
                                          pd.Series(element1_stretch, name='E1_stretch'),
                                          pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                          pd.Series(element2_Fz, name='E2_Fz'),
                                          pd.Series(element2_stretch, name='E2_stretch'),
                                          ], axis=1)

Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fr'] = (
            Rectus_Capitis_Anterior_data['E1_Fr'] + Rectus_Capitis_Anterior_data['E2_Fr'])
Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fy'] = (
            Rectus_Capitis_Anterior_data['E1_Fy'] + Rectus_Capitis_Anterior_data['E2_Fy'])
Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fz'] = Rectus_Capitis_Anterior_data['E1_Fz'] +Rectus_Capitis_Anterior_data['E2_Fz']
Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_stretch'] = (Rectus_Capitis_Anterior_data['E1_stretch'] +Rectus_Capitis_Anterior_data[
                                                                       'E2_stretch']) / 2  # AVERAGE
Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fres'] = ((Rectus_Capitis_Anterior_data[
    'Rectus_Capitis_Anterior_Fy']) ** 2 + (Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fz']) ** 2) ** 0.5

# print(Rectus_Capitis_Anterior_data)
Rectus_Capitis_Anterior_data.to_csv(path + filename + ".csv")

###########################################################################################################
filename = 'Iliocostalis_Cervicis_results'  # 6 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)

Iliocostalis_Cervicis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                        pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                        pd.Series(element1_Fz, name='E1_Fz'),
                                        pd.Series(element1_stretch, name='E1_stretch'),
                                        pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                        pd.Series(element2_Fz, name='E2_Fz'),
                                        pd.Series(element2_stretch, name='E2_stretch'),
                                        pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                        pd.Series(element3_Fz, name='E3_Fz'),
                                        pd.Series(element3_stretch, name='E3_stretch'),
                                        pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                        pd.Series(element4_Fz, name='E4_Fz'),
                                        pd.Series(element4_stretch, name='E4_stretch'),
                                        pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                        pd.Series(element5_Fz, name='E5_Fz'),
                                        pd.Series(element5_stretch, name='E5_stretch'),
                                        pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                        pd.Series(element6_Fz, name='E6_Fz'),
                                        pd.Series(element6_stretch, name='E6_stretch')
                                        ], axis=1)

Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fr'] = (
Iliocostalis_Cervicis_data['E1_Fr'] + Iliocostalis_Cervicis_data['E2_Fr'] + Iliocostalis_Cervicis_data['E3_Fr'] +
Iliocostalis_Cervicis_data['E4_Fr'] +
Iliocostalis_Cervicis_data['E5_Fr'] + Iliocostalis_Cervicis_data['E6_Fr']
)
Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fy'] = (
Iliocostalis_Cervicis_data['E1_Fy'] + Iliocostalis_Cervicis_data['E2_Fy'] + Iliocostalis_Cervicis_data['E3_Fy'] +
Iliocostalis_Cervicis_data['E4_Fy'] +
Iliocostalis_Cervicis_data['E5_Fy'] + Iliocostalis_Cervicis_data['E6_Fy']
)
Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fz'] = Iliocostalis_Cervicis_data['E1_Fz'] + Iliocostalis_Cervicis_data['E2_Fz'] +Iliocostalis_Cervicis_data['E3_Fz'] + Iliocostalis_Cervicis_data['E4_Fz'] +Iliocostalis_Cervicis_data['E5_Fz'] + Iliocostalis_Cervicis_data['E6_Fz']
Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_stretch'] = (Iliocostalis_Cervicis_data['E1_stretch'] + Iliocostalis_Cervicis_data['E2_stretch'] + Iliocostalis_Cervicis_data[
    'E3_stretch'] + Iliocostalis_Cervicis_data[
    'E4_stretch'] + Iliocostalis_Cervicis_data['E5_stretch'] + Iliocostalis_Cervicis_data['E6_stretch']
) / 6  # AVERAGE
Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fres'] = ((Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fy']) ** 2 + (Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fz']) ** 2) ** 0.5
# print(Iliocostalis_Cervicis_data)
Iliocostalis_Cervicis_data.to_csv(path + filename + ".csv")
###########################################################################################################


###########################################################################################################

filename = 'Longissimus_Capitis_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        e13_Fr = float(element13[1])
        e13_Fr = abs(round(e13_Fr, 6))
        e13_Fy = float(element13[3])
        e13_Fy = abs(round(e13_Fy, 6))
        e13_Fz = float(element13[4])
        e13_Fz = abs(round(e13_Fz, 6))
        e13_stretch = float(element13[5])
        e13_stretch = abs(round(e13_stretch, 6))

        e14_Fr = float(element14[1])
        e14_Fr = abs(round(e14_Fr, 6))
        e14_Fy = float(element14[3])
        e14_Fy = abs(round(e14_Fy, 6))
        e14_Fz = float(element14[4])
        e14_Fz = abs(round(e14_Fz, 6))
        e14_stretch = float(element14[5])
        e14_stretch = abs(round(e14_stretch, 6))

        e15_Fr = float(element15[1])
        e15_Fr = abs(round(e15_Fr, 6))
        e15_Fy = float(element15[3])
        e15_Fy = abs(round(e15_Fy, 6))
        e15_Fz = float(element15[4])
        e15_Fz = abs(round(e15_Fz, 6))
        e15_stretch = float(element15[5])
        e15_stretch = abs(round(e15_stretch, 6))

        e16_Fr = float(element16[1])
        e16_Fr = abs(round(e16_Fr, 6))
        e16_Fy = float(element16[3])
        e16_Fy = abs(round(e16_Fy, 6))
        e16_Fz = float(element16[4])
        e16_Fz = abs(round(e16_Fz, 6))
        e16_stretch = float(element16[5])
        e16_stretch = abs(round(e16_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)

Longissimus_Capitis_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                      pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                      pd.Series(element1_Fz, name='E1_Fz'),
                                      pd.Series(element1_stretch, name='E1_stretch'),
                                      pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                      pd.Series(element2_Fz, name='E2_Fz'),
                                      pd.Series(element2_stretch, name='E2_stretch'),
                                      pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                      pd.Series(element3_Fz, name='E3_Fz'),
                                      pd.Series(element3_stretch, name='E3_stretch'),
                                      pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                      pd.Series(element4_Fz, name='E4_Fz'),
                                      pd.Series(element4_stretch, name='E4_stretch'),
                                      pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                      pd.Series(element5_Fz, name='E5_Fz'),
                                      pd.Series(element5_stretch, name='E5_stretch'),
                                      pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                      pd.Series(element6_Fz, name='E6_Fz'),
                                      pd.Series(element6_stretch, name='E6_stretch'),
                                      pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                      pd.Series(element7_Fz, name='E7_Fz'),
                                      pd.Series(element7_stretch, name='E7_stretch'),
                                      pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                      pd.Series(element8_Fz, name='E8_Fz'),
                                      pd.Series(element8_stretch, name='E8_stretch'),
                                      pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                      pd.Series(element9_Fz, name='E9_Fz'),
                                      pd.Series(element9_stretch, name='E9_stretch'),
                                      pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                      pd.Series(element10_Fz, name='E10_Fz'),
                                      pd.Series(element10_stretch, name='E10_stretch'),
                                      pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                      pd.Series(element11_Fz, name='E11_Fz'),
                                      pd.Series(element11_stretch, name='E11_stretch'),
                                      pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                      pd.Series(element12_Fz, name='E12_Fz'),
                                      pd.Series(element12_stretch, name='E12_stretch'),
                                      pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'),
                                      pd.Series(element13_Fz, name='E13_Fz'),
                                      pd.Series(element13_stretch, name='E13_stretch'),
                                      pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'),
                                      pd.Series(element14_Fz, name='E14_Fz'),
                                      pd.Series(element14_stretch, name='E14_stretch'),
                                      pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'),
                                      pd.Series(element15_Fz, name='E15_Fz'),
                                      pd.Series(element15_stretch, name='E15_stretch'),
                                      pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'),
                                      pd.Series(element16_Fz, name='E16_Fz'),
                                      pd.Series(element16_stretch, name='E16_stretch'),
                                      ], axis=1)

Longissimus_Capitis_data['Longissimus_Capitis_Fr'] = (
Longissimus_Capitis_data['E1_Fr'] + Longissimus_Capitis_data['E2_Fr'] + Longissimus_Capitis_data['E3_Fr'] +
Longissimus_Capitis_data['E4_Fr'] +
Longissimus_Capitis_data['E5_Fr'] + Longissimus_Capitis_data['E6_Fr'] + Longissimus_Capitis_data['E7_Fr'] +
Longissimus_Capitis_data['E8_Fr'] +
Longissimus_Capitis_data['E9_Fr'] + Longissimus_Capitis_data['E10_Fr'] + Longissimus_Capitis_data['E11_Fr'] +
Longissimus_Capitis_data['E12_Fr'] +
Longissimus_Capitis_data['E13_Fr'] + Longissimus_Capitis_data['E14_Fr'] + Longissimus_Capitis_data['E15_Fr'] + \
Longissimus_Capitis_data['E16_Fr']
)
Longissimus_Capitis_data['Longissimus_Capitis_Fy'] = (
Longissimus_Capitis_data['E1_Fy'] + Longissimus_Capitis_data['E2_Fy'] + Longissimus_Capitis_data['E3_Fy'] +
Longissimus_Capitis_data['E4_Fy'] +
Longissimus_Capitis_data['E5_Fy'] + Longissimus_Capitis_data['E6_Fy'] + Longissimus_Capitis_data['E7_Fy'] +
Longissimus_Capitis_data['E8_Fy'] +
Longissimus_Capitis_data['E9_Fy'] + Longissimus_Capitis_data['E10_Fy'] + Longissimus_Capitis_data['E11_Fy'] +
Longissimus_Capitis_data['E12_Fy'] +
Longissimus_Capitis_data['E13_Fy'] + Longissimus_Capitis_data['E14_Fy'] + Longissimus_Capitis_data['E15_Fy'] + \
Longissimus_Capitis_data['E16_Fy']
)
Longissimus_Capitis_data['Longissimus_Capitis_Fz'] = Longissimus_Capitis_data['E1_Fz'] + Longissimus_Capitis_data[
    'E2_Fz'] + Longissimus_Capitis_data['E3_Fz'] +Longissimus_Capitis_data['E4_Fz'] + Longissimus_Capitis_data[
                                                         'E5_Fz'] + Longissimus_Capitis_data['E6_Fz'] + Longissimus_Capitis_data['E7_Fz'] + Longissimus_Capitis_data[
                                                         'E8_Fz'] + Longissimus_Capitis_data['E9_Fz'] + Longissimus_Capitis_data['E10_Fz'] + Longissimus_Capitis_data[
                                                         'E11_Fz'] + Longissimus_Capitis_data['E12_Fz'] +  Longissimus_Capitis_data['E13_Fz'] + Longissimus_Capitis_data[
                                                         'E14_Fz'] + Longissimus_Capitis_data['E15_Fz'] +Longissimus_Capitis_data['E16_Fz']
Longissimus_Capitis_data['Longissimus_Capitis_stretch'] = (
Longissimus_Capitis_data['E1_stretch'] + Longissimus_Capitis_data['E2_stretch'] + Longissimus_Capitis_data[
    'E3_stretch'] + Longissimus_Capitis_data[
    'E4_stretch'] + Longissimus_Capitis_data['E5_stretch'] + Longissimus_Capitis_data['E6_stretch'] +
Longissimus_Capitis_data['E7_stretch'] +
Longissimus_Capitis_data['E8_stretch'] + Longissimus_Capitis_data['E9_stretch'] + Longissimus_Capitis_data[
    'E10_stretch'] +
Longissimus_Capitis_data['E11_stretch'] + Longissimus_Capitis_data['E12_stretch'] + Longissimus_Capitis_data[
    'E13_stretch'] +
Longissimus_Capitis_data['E14_stretch'] + Longissimus_Capitis_data['E15_stretch'] + Longissimus_Capitis_data[
    'E16_stretch']
) / 16  # AVERAGE
Longissimus_Capitis_data['Longissimus_Capitis_Fres'] = ((Longissimus_Capitis_data['Longissimus_Capitis_Fy']) ** 2 + (
    Longissimus_Capitis_data['Longissimus_Capitis_Fz']) ** 2) ** 0.5
# print(Longissimus_Capitis_data)
Longissimus_Capitis_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'Multifidus_results'  # 12 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)

Multifidus_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                             pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                             pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                             pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                             pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                             pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                             pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                             pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                             pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                             pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                             pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                             pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                             pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                             pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                             pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                             pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                             pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                             pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                             pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                             pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                             pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                             pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                             pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                             pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                             pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch')
                             ], axis=1)

Multifidus_data['Multifidus_Fr'] = (
Multifidus_data['E1_Fr'] + Multifidus_data['E2_Fr'] + Multifidus_data['E3_Fr'] + Multifidus_data['E4_Fr'] +
Multifidus_data['E5_Fr'] + Multifidus_data['E6_Fr'] + Multifidus_data['E7_Fr'] + Multifidus_data['E8_Fr'] +
Multifidus_data['E9_Fr'] + Multifidus_data['E10_Fr'] + Multifidus_data['E11_Fr'] + Multifidus_data['E12_Fr']
)
Multifidus_data['Multifidus_Fy'] = (
Multifidus_data['E1_Fy'] + Multifidus_data['E2_Fy'] + Multifidus_data['E3_Fy'] + Multifidus_data['E4_Fy'] +
Multifidus_data['E5_Fy'] + Multifidus_data['E6_Fy'] + Multifidus_data['E7_Fy'] + Multifidus_data['E8_Fy'] +
Multifidus_data['E9_Fy'] + Multifidus_data['E10_Fy'] + Multifidus_data['E11_Fy'] + Multifidus_data['E12_Fy']
)
Multifidus_data['Multifidus_Fz'] = Multifidus_data['E1_Fz'] + Multifidus_data['E2_Fz'] + Multifidus_data['E3_Fz'] +Multifidus_data['E4_Fz'] + Multifidus_data['E5_Fz'] + Multifidus_data['E6_Fz'] +Multifidus_data['E7_Fz'] + Multifidus_data['E8_Fz'] + Multifidus_data['E9_Fz'] +Multifidus_data['E10_Fz'] + Multifidus_data['E11_Fz'] + Multifidus_data['E12_Fz']
Multifidus_data['Multifidus_stretch'] = (
Multifidus_data['E1_stretch'] + Multifidus_data['E2_stretch'] + Multifidus_data['E3_stretch'] + Multifidus_data[
    'E4_stretch'] + Multifidus_data['E5_stretch'] + Multifidus_data['E6_stretch'] + Multifidus_data['E7_stretch'] +
Multifidus_data['E8_stretch'] + Multifidus_data['E9_stretch'] + Multifidus_data['E10_stretch'] +
Multifidus_data['E11_stretch'] + Multifidus_data['E12_stretch']
) / 12  # AVERAGE
Multifidus_data['Multifidus_Fres'] = ((Multifidus_data['Multifidus_Fy']) ** 2 + (Multifidus_data['Multifidus_Fz']) ** 2) ** 0.5

# print(Multifidus_data)
Multifidus_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Omohyoid_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

Omohyoid_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                           pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                           pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           ], axis=1)

Omohyoid_data['Omohyoid_Fr'] = (Omohyoid_data['E1_Fr'] + Omohyoid_data['E2_Fr'])
Omohyoid_data['Omohyoid_Fy'] = (Omohyoid_data['E1_Fy'] + Omohyoid_data['E2_Fy'])
Omohyoid_data['Omohyoid_Fz'] = Omohyoid_data['E1_Fz'] + Omohyoid_data['E2_Fz']
Omohyoid_data['Omohyoid_stretch'] = (Omohyoid_data['E1_stretch'] + Omohyoid_data['E2_stretch']) / 2  # AVERAGE
Omohyoid_data['Omohyoid_Fres'] = ((Omohyoid_data['Omohyoid_Fy']) ** 2 + (Omohyoid_data['Omohyoid_Fz']) ** 2) ** 0.5

# print(Omohyoid_data)
Omohyoid_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Sternohyoid_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
#
element1_Fy = []
element2_Fy = []
#
element1_Fz = []
element2_Fz = []
#
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

Sternohyoid_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                              pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                              pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                              pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                              pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                              ], axis=1)

Sternohyoid_data['Sternohyoid_Fr'] = (Sternohyoid_data['E1_Fr'] + Sternohyoid_data['E2_Fr'])
Sternohyoid_data['Sternohyoid_Fy'] = (Sternohyoid_data['E1_Fy'] + Sternohyoid_data['E2_Fy'])
Sternohyoid_data['Sternohyoid_Fz'] = Sternohyoid_data['E1_Fz'] + Sternohyoid_data['E2_Fz']
Sternohyoid_data['Sternohyoid_stretch'] = (Sternohyoid_data['E1_stretch'] + Sternohyoid_data[
    'E2_stretch']) / 2  # AVERAGE
Sternohyoid_data['Sternohyoid_Fres'] = ((Sternohyoid_data['Sternohyoid_Fy']) ** 2 + (
Sternohyoid_data['Sternohyoid_Fz']) ** 2) ** 0.5

# print(Sternohyoid_data)
Sternohyoid_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'Longus_Colli_Superior_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

Longus_Colli_Superior_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                        pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                        pd.Series(element1_Fz, name='E1_Fz'),
                                        pd.Series(element1_stretch, name='E1_stretch'),
                                        pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                        pd.Series(element2_Fz, name='E2_Fz'),
                                        pd.Series(element2_stretch, name='E2_stretch'),
                                        pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                        pd.Series(element3_Fz, name='E3_Fz'),
                                        pd.Series(element3_stretch, name='E3_stretch'),
                                        pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                        pd.Series(element4_Fz, name='E4_Fz'),
                                        pd.Series(element4_stretch, name='E4_stretch'),
                                        pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                        pd.Series(element5_Fz, name='E5_Fz'),
                                        pd.Series(element5_stretch, name='E5_stretch'),
                                        pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                        pd.Series(element6_Fz, name='E6_Fz'),
                                        pd.Series(element6_stretch, name='E6_stretch'),
                                        pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                        pd.Series(element7_Fz, name='E7_Fz'),
                                        pd.Series(element7_stretch, name='E7_stretch'),
                                        pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                        pd.Series(element8_Fz, name='E8_Fz'),
                                        pd.Series(element8_stretch, name='E8_stretch')
                                        ], axis=1)

Longus_Colli_Superior_data['Longus_Colli_Superior_Fr'] = (
Longus_Colli_Superior_data['E1_Fr'] + Longus_Colli_Superior_data['E2_Fr'] + Longus_Colli_Superior_data['E3_Fr'] +
Longus_Colli_Superior_data['E4_Fr'] +
Longus_Colli_Superior_data['E5_Fr'] + Longus_Colli_Superior_data['E6_Fr'] + Longus_Colli_Superior_data['E7_Fr'] + \
Longus_Colli_Superior_data['E8_Fr']
)
Longus_Colli_Superior_data['Longus_Colli_Superior_Fy'] = (
Longus_Colli_Superior_data['E1_Fy'] + Longus_Colli_Superior_data['E2_Fy'] + Longus_Colli_Superior_data['E3_Fy'] +
Longus_Colli_Superior_data['E4_Fy'] +
Longus_Colli_Superior_data['E5_Fy'] + Longus_Colli_Superior_data['E6_Fy'] + Longus_Colli_Superior_data['E7_Fy'] + \
Longus_Colli_Superior_data['E8_Fy']
)
Longus_Colli_Superior_data['Longus_Colli_Superior_Fz'] = Longus_Colli_Superior_data['E1_Fz'] +Longus_Colli_Superior_data['E2_Fz'] +Longus_Colli_Superior_data['E3_Fz'] +Longus_Colli_Superior_data['E4_Fz'] +Longus_Colli_Superior_data['E5_Fz'] +Longus_Colli_Superior_data['E6_Fz'] +Longus_Colli_Superior_data['E7_Fz'] +Longus_Colli_Superior_data['E8_Fz']
Longus_Colli_Superior_data['Longus_Colli_Superior_stretch'] = (
Longus_Colli_Superior_data['E1_stretch'] + Longus_Colli_Superior_data['E2_stretch'] + Longus_Colli_Superior_data[
    'E3_stretch'] + Longus_Colli_Superior_data[
    'E4_stretch'] + Longus_Colli_Superior_data['E5_stretch'] + Longus_Colli_Superior_data['E6_stretch'] +
Longus_Colli_Superior_data['E7_stretch'] +
Longus_Colli_Superior_data['E8_stretch']
) / 8  # AVERAGE
Longus_Colli_Superior_data['Longus_Colli_Superior_Fres'] = ((Longus_Colli_Superior_data['Longus_Colli_Superior_Fy']) ** 2 + (Longus_Colli_Superior_data['Longus_Colli_Superior_Fz']) ** 2) ** 0.5
# print(Longus_Colli_Superior_data)
Longus_Colli_Superior_data.to_csv(path + filename + ".csv")

###########################################################################################################

###########################################################################################################

filename = 'Longus_Colli_Inferior_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

Longus_Colli_Inferior_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                        pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                        pd.Series(element1_Fz, name='E1_Fz'),
                                        pd.Series(element1_stretch, name='E1_stretch'),
                                        pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                        pd.Series(element2_Fz, name='E2_Fz'),
                                        pd.Series(element2_stretch, name='E2_stretch'),
                                        pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                        pd.Series(element3_Fz, name='E3_Fz'),
                                        pd.Series(element3_stretch, name='E3_stretch'),
                                        pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                        pd.Series(element4_Fz, name='E4_Fz'),
                                        pd.Series(element4_stretch, name='E4_stretch'),
                                        pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                        pd.Series(element5_Fz, name='E5_Fz'),
                                        pd.Series(element5_stretch, name='E5_stretch'),
                                        pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                        pd.Series(element6_Fz, name='E6_Fz'),
                                        pd.Series(element6_stretch, name='E6_stretch'),
                                        pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                        pd.Series(element7_Fz, name='E7_Fz'),
                                        pd.Series(element7_stretch, name='E7_stretch'),
                                        pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                        pd.Series(element8_Fz, name='E8_Fz'),
                                        pd.Series(element8_stretch, name='E8_stretch')
                                        ], axis=1)

Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fr'] = (
Longus_Colli_Inferior_data['E1_Fr'] + Longus_Colli_Inferior_data['E2_Fr'] + Longus_Colli_Inferior_data['E3_Fr'] +
Longus_Colli_Inferior_data['E4_Fr'] +
Longus_Colli_Inferior_data['E5_Fr'] + Longus_Colli_Inferior_data['E6_Fr'] + Longus_Colli_Inferior_data['E7_Fr'] + \
Longus_Colli_Inferior_data['E8_Fr']
)
Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fy'] = (
Longus_Colli_Inferior_data['E1_Fy'] + Longus_Colli_Inferior_data['E2_Fy'] + Longus_Colli_Inferior_data['E3_Fy'] +
Longus_Colli_Inferior_data['E4_Fy'] +
Longus_Colli_Inferior_data['E5_Fy'] + Longus_Colli_Inferior_data['E6_Fy'] + Longus_Colli_Inferior_data['E7_Fy'] + \
Longus_Colli_Inferior_data['E8_Fy']
)
Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fz'] = Longus_Colli_Inferior_data['E1_Fz'] +Longus_Colli_Inferior_data['E2_Fz'] +Longus_Colli_Inferior_data['E3_Fz'] +Longus_Colli_Inferior_data['E4_Fz'] +Longus_Colli_Inferior_data['E5_Fz'] +Longus_Colli_Inferior_data['E6_Fz'] +Longus_Colli_Inferior_data['E7_Fz'] +Longus_Colli_Inferior_data['E8_Fz']
Longus_Colli_Inferior_data['Longus_Colli_Inferior_stretch'] = (
Longus_Colli_Inferior_data['E1_stretch'] + Longus_Colli_Inferior_data['E2_stretch'] + Longus_Colli_Inferior_data[
    'E3_stretch'] + Longus_Colli_Inferior_data[
    'E4_stretch'] + Longus_Colli_Inferior_data['E5_stretch'] + Longus_Colli_Inferior_data['E6_stretch'] +
Longus_Colli_Inferior_data['E7_stretch'] +
Longus_Colli_Inferior_data['E8_stretch']
) / 8  # AVERAGE
Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fres'] = ((Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fy']) ** 2 + (Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fz']) ** 2) ** 0.5

# print(Longus_Colli_Inferior_data)
Longus_Colli_Inferior_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'Longus_Colli_Vertical_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        e13_Fr = float(element13[1])
        e13_Fr = abs(round(e13_Fr, 6))
        e13_Fy = float(element13[3])
        e13_Fy = abs(round(e13_Fy, 6))
        e13_Fz = float(element13[4])
        e13_Fz = abs(round(e13_Fz, 6))
        e13_stretch = float(element13[5])
        e13_stretch = abs(round(e13_stretch, 6))

        e14_Fr = float(element14[1])
        e14_Fr = abs(round(e14_Fr, 6))
        e14_Fy = float(element14[3])
        e14_Fy = abs(round(e14_Fy, 6))
        e14_Fz = float(element14[4])
        e14_Fz = abs(round(e14_Fz, 6))
        e14_stretch = float(element14[5])
        e14_stretch = abs(round(e14_stretch, 6))

        e15_Fr = float(element15[1])
        e15_Fr = abs(round(e15_Fr, 6))
        e15_Fy = float(element15[3])
        e15_Fy = abs(round(e15_Fy, 6))
        e15_Fz = float(element15[4])
        e15_Fz = abs(round(e15_Fz, 6))
        e15_stretch = float(element15[5])
        e15_stretch = abs(round(e15_stretch, 6))

        e16_Fr = float(element16[1])
        e16_Fr = abs(round(e16_Fr, 6))
        e16_Fy = float(element16[3])
        e16_Fy = abs(round(e16_Fy, 6))
        e16_Fz = float(element16[4])
        e16_Fz = abs(round(e16_Fz, 6))
        e16_stretch = float(element16[5])
        e16_stretch = abs(round(e16_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)

Longus_Colli_Vertical_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                        pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                        pd.Series(element1_Fz, name='E1_Fz'),
                                        pd.Series(element1_stretch, name='E1_stretch'),
                                        pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                        pd.Series(element2_Fz, name='E2_Fz'),
                                        pd.Series(element2_stretch, name='E2_stretch'),
                                        pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                        pd.Series(element3_Fz, name='E3_Fz'),
                                        pd.Series(element3_stretch, name='E3_stretch'),
                                        pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                        pd.Series(element4_Fz, name='E4_Fz'),
                                        pd.Series(element4_stretch, name='E4_stretch'),
                                        pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                        pd.Series(element5_Fz, name='E5_Fz'),
                                        pd.Series(element5_stretch, name='E5_stretch'),
                                        pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                        pd.Series(element6_Fz, name='E6_Fz'),
                                        pd.Series(element6_stretch, name='E6_stretch'),
                                        pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                        pd.Series(element7_Fz, name='E7_Fz'),
                                        pd.Series(element7_stretch, name='E7_stretch'),
                                        pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                        pd.Series(element8_Fz, name='E8_Fz'),
                                        pd.Series(element8_stretch, name='E8_stretch'),
                                        pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                        pd.Series(element9_Fz, name='E9_Fz'),
                                        pd.Series(element9_stretch, name='E9_stretch'),
                                        pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                        pd.Series(element10_Fz, name='E10_Fz'),
                                        pd.Series(element10_stretch, name='E10_stretch'),
                                        pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                        pd.Series(element11_Fz, name='E11_Fz'),
                                        pd.Series(element11_stretch, name='E11_stretch'),
                                        pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                        pd.Series(element12_Fz, name='E12_Fz'),
                                        pd.Series(element12_stretch, name='E12_stretch'),
                                        pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'),
                                        pd.Series(element13_Fz, name='E13_Fz'),
                                        pd.Series(element13_stretch, name='E13_stretch'),
                                        pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'),
                                        pd.Series(element14_Fz, name='E14_Fz'),
                                        pd.Series(element14_stretch, name='E14_stretch'),
                                        pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'),
                                        pd.Series(element15_Fz, name='E15_Fz'),
                                        pd.Series(element15_stretch, name='E15_stretch'),
                                        pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'),
                                        pd.Series(element16_Fz, name='E16_Fz'),
                                        pd.Series(element16_stretch, name='E16_stretch'),
                                        ], axis=1)

Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fr'] = (
Longus_Colli_Vertical_data['E1_Fr'] + Longus_Colli_Vertical_data['E2_Fr'] + Longus_Colli_Vertical_data['E3_Fr'] +
Longus_Colli_Vertical_data['E4_Fr'] +
Longus_Colli_Vertical_data['E5_Fr'] + Longus_Colli_Vertical_data['E6_Fr'] + Longus_Colli_Vertical_data['E7_Fr'] +
Longus_Colli_Vertical_data['E8_Fr'] +
Longus_Colli_Vertical_data['E9_Fr'] + Longus_Colli_Vertical_data['E10_Fr'] + Longus_Colli_Vertical_data['E11_Fr'] +
Longus_Colli_Vertical_data['E12_Fr'] +
Longus_Colli_Vertical_data['E13_Fr'] + Longus_Colli_Vertical_data['E14_Fr'] + Longus_Colli_Vertical_data['E15_Fr'] + \
Longus_Colli_Vertical_data['E16_Fr']
)
Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fy'] = (
Longus_Colli_Vertical_data['E1_Fy'] + Longus_Colli_Vertical_data['E2_Fy'] + Longus_Colli_Vertical_data['E3_Fy'] +
Longus_Colli_Vertical_data['E4_Fy'] +
Longus_Colli_Vertical_data['E5_Fy'] + Longus_Colli_Vertical_data['E6_Fy'] + Longus_Colli_Vertical_data['E7_Fy'] +
Longus_Colli_Vertical_data['E8_Fy'] +
Longus_Colli_Vertical_data['E9_Fy'] + Longus_Colli_Vertical_data['E10_Fy'] + Longus_Colli_Vertical_data['E11_Fy'] +
Longus_Colli_Vertical_data['E12_Fy'] +
Longus_Colli_Vertical_data['E13_Fy'] + Longus_Colli_Vertical_data['E14_Fy'] + Longus_Colli_Vertical_data['E15_Fy'] + \
Longus_Colli_Vertical_data['E16_Fy']
)
Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fz'] = Longus_Colli_Vertical_data['E1_Fz'] +Longus_Colli_Vertical_data['E2_Fz'] +Longus_Colli_Vertical_data['E3_Fz'] +Longus_Colli_Vertical_data['E4_Fz'] +Longus_Colli_Vertical_data['E5_Fz'] +Longus_Colli_Vertical_data['E6_Fz'] +Longus_Colli_Vertical_data['E7_Fz'] +Longus_Colli_Vertical_data['E8_Fz'] +Longus_Colli_Vertical_data['E9_Fz'] +Longus_Colli_Vertical_data['E10_Fz'] +Longus_Colli_Vertical_data['E11_Fz'] +Longus_Colli_Vertical_data['E12_Fz'] +Longus_Colli_Vertical_data['E13_Fz'] +Longus_Colli_Vertical_data['E14_Fz'] +Longus_Colli_Vertical_data['E15_Fz'] +Longus_Colli_Vertical_data['E16_Fz']
Longus_Colli_Vertical_data['Longus_Colli_Vertical_stretch'] = (
Longus_Colli_Vertical_data['E1_stretch'] + Longus_Colli_Vertical_data['E2_stretch'] + Longus_Colli_Vertical_data[
    'E3_stretch'] + Longus_Colli_Vertical_data[
    'E4_stretch'] + Longus_Colli_Vertical_data['E5_stretch'] + Longus_Colli_Vertical_data['E6_stretch'] +
Longus_Colli_Vertical_data['E7_stretch'] +
Longus_Colli_Vertical_data['E8_stretch'] + Longus_Colli_Vertical_data['E9_stretch'] + Longus_Colli_Vertical_data[
    'E10_stretch'] +
Longus_Colli_Vertical_data['E11_stretch'] + Longus_Colli_Vertical_data['E12_stretch'] + Longus_Colli_Vertical_data[
    'E13_stretch'] +
Longus_Colli_Vertical_data['E14_stretch'] + Longus_Colli_Vertical_data['E15_stretch'] + Longus_Colli_Vertical_data[
    'E16_stretch']
) / 16  # AVERAGE
Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fres'] = ((Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fy']) ** 2 + (Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fz']) ** 2) ** 0.5

# print(Longus_Colli_Vertical_data)
Longus_Colli_Vertical_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Anterior_Scalene_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

Anterior_Scalene_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                   pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                   pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                                   pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                   pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                                   pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                   pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                                   pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                   pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                                   pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                   pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                                   pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                   pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                                   pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                   pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                                   pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                   pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                                   ], axis=1)

Anterior_Scalene_data['Anterior_Scalene_Fr'] = (
Anterior_Scalene_data['E1_Fr'] + Anterior_Scalene_data['E2_Fr'] + Anterior_Scalene_data['E3_Fr'] +
Anterior_Scalene_data['E4_Fr'] +
Anterior_Scalene_data['E5_Fr'] + Anterior_Scalene_data['E6_Fr'] + Anterior_Scalene_data['E7_Fr'] + \
Anterior_Scalene_data['E8_Fr']
)
Anterior_Scalene_data['Anterior_Scalene_Fy'] = (
Anterior_Scalene_data['E1_Fy'] + Anterior_Scalene_data['E2_Fy'] + Anterior_Scalene_data['E3_Fy'] +
Anterior_Scalene_data['E4_Fy'] +
Anterior_Scalene_data['E5_Fy'] + Anterior_Scalene_data['E6_Fy'] + Anterior_Scalene_data['E7_Fy'] + \
Anterior_Scalene_data['E8_Fy']
)
Anterior_Scalene_data['Anterior_Scalene_Fz'] = Anterior_Scalene_data['E1_Fz'] + Anterior_Scalene_data['E2_Fz'] +Anterior_Scalene_data['E3_Fz'] +Anterior_Scalene_data['E4_Fz'] + Anterior_Scalene_data['E5_Fz'] +Anterior_Scalene_data['E6_Fz'] +Anterior_Scalene_data['E7_Fz'] + Anterior_Scalene_data['E8_Fz']
Anterior_Scalene_data['Anterior_Scalene_stretch'] = (
Anterior_Scalene_data['E1_stretch'] + Anterior_Scalene_data['E2_stretch'] + Anterior_Scalene_data['E3_stretch'] +
Anterior_Scalene_data[
    'E4_stretch'] + Anterior_Scalene_data['E5_stretch'] + Anterior_Scalene_data['E6_stretch'] + Anterior_Scalene_data[
    'E7_stretch'] +
Anterior_Scalene_data['E8_stretch']
) / 8  # AVERAGE
Anterior_Scalene_data['Anterior_Scalene_Fres'] = ((Anterior_Scalene_data['Anterior_Scalene_Fy']) ** 2 + (Anterior_Scalene_data['Anterior_Scalene_Fz']) ** 2) ** 0.5

# print(Anterior_Scalene_data)
Anterior_Scalene_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'Middle_Scalene_results'  # 12 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        e7_Fr = float(element7[1])
        e7_Fr = abs(round(e7_Fr, 6))
        e7_Fy = float(element7[3])
        e7_Fy = abs(round(e7_Fy, 6))
        e7_Fz = float(element7[4])
        e7_Fz = abs(round(e7_Fz, 6))
        e7_stretch = float(element7[5])
        e7_stretch = abs(round(e7_stretch, 6))

        e8_Fr = float(element8[1])
        e8_Fr = abs(round(e8_Fr, 6))
        e8_Fy = float(element8[3])
        e8_Fy = abs(round(e8_Fy, 6))
        e8_Fz = float(element8[4])
        e8_Fz = abs(round(e8_Fz, 6))
        e8_stretch = float(element8[5])
        e8_stretch = abs(round(e8_stretch, 6))

        e9_Fr = float(element9[1])
        e9_Fr = abs(round(e9_Fr, 6))
        e9_Fy = float(element9[3])
        e9_Fy = abs(round(e9_Fy, 6))
        e9_Fz = float(element9[4])
        e9_Fz = abs(round(e9_Fz, 6))
        e9_stretch = float(element9[5])
        e9_stretch = abs(round(e9_stretch, 6))

        e10_Fr = float(element10[1])
        e10_Fr = abs(round(e10_Fr, 6))
        e10_Fy = float(element10[3])
        e10_Fy = abs(round(e10_Fy, 6))
        e10_Fz = float(element10[4])
        e10_Fz = abs(round(e10_Fz, 6))
        e10_stretch = float(element10[5])
        e10_stretch = abs(round(e10_stretch, 6))

        e11_Fr = float(element11[1])
        e11_Fr = abs(round(e11_Fr, 6))
        e11_Fy = float(element11[3])
        e11_Fy = abs(round(e11_Fy, 6))
        e11_Fz = float(element11[4])
        e11_Fz = abs(round(e11_Fz, 6))
        e11_stretch = float(element11[5])
        e11_stretch = abs(round(e11_stretch, 6))

        e12_Fr = float(element12[1])
        e12_Fr = abs(round(e12_Fr, 6))
        e12_Fy = float(element12[3])
        e12_Fy = abs(round(e12_Fy, 6))
        e12_Fz = float(element12[4])
        e12_Fz = abs(round(e12_Fz, 6))
        e12_stretch = float(element12[5])
        e12_stretch = abs(round(e12_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)

Middle_Scalene_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                 pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                 pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                                 pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                 pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                                 pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                 pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                                 pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                 pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                                 pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                 pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                                 pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                 pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                                 pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'),
                                 pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                                 pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'),
                                 pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                                 pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'),
                                 pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                                 pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'),
                                 pd.Series(element10_Fz, name='E10_Fz'),
                                 pd.Series(element10_stretch, name='E10_stretch'),
                                 pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'),
                                 pd.Series(element11_Fz, name='E11_Fz'),
                                 pd.Series(element11_stretch, name='E11_stretch'),
                                 pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'),
                                 pd.Series(element12_Fz, name='E12_Fz'),
                                 pd.Series(element12_stretch, name='E12_stretch')
                                 ], axis=1)

Middle_Scalene_data['Middle_Scalene_Fr'] = (
Middle_Scalene_data['E1_Fr'] + Middle_Scalene_data['E2_Fr'] + Middle_Scalene_data['E3_Fr'] + Middle_Scalene_data[
    'E4_Fr'] +
Middle_Scalene_data['E5_Fr'] + Middle_Scalene_data['E6_Fr'] + Middle_Scalene_data['E7_Fr'] + Middle_Scalene_data[
    'E8_Fr'] +
Middle_Scalene_data['E9_Fr'] + Middle_Scalene_data['E10_Fr'] + Middle_Scalene_data['E11_Fr'] + Middle_Scalene_data[
    'E12_Fr']
)
Middle_Scalene_data['Middle_Scalene_Fy'] = (
Middle_Scalene_data['E1_Fy'] + Middle_Scalene_data['E2_Fy'] + Middle_Scalene_data['E3_Fy'] + Middle_Scalene_data[
    'E4_Fy'] +
Middle_Scalene_data['E5_Fy'] + Middle_Scalene_data['E6_Fy'] + Middle_Scalene_data['E7_Fy'] + Middle_Scalene_data[
    'E8_Fy'] +
Middle_Scalene_data['E9_Fy'] + Middle_Scalene_data['E10_Fy'] + Middle_Scalene_data['E11_Fy'] + Middle_Scalene_data[
    'E12_Fy']
)
Middle_Scalene_data['Middle_Scalene_Fz'] = Middle_Scalene_data['E1_Fz'] + Middle_Scalene_data['E2_Fz'] + Middle_Scalene_data['E3_Fz'] + Middle_Scalene_data['E4_Fz'] + Middle_Scalene_data['E5_Fz'] +Middle_Scalene_data['E6_Fz'] +Middle_Scalene_data['E7_Fz'] + Middle_Scalene_data['E8_Fz'] +Middle_Scalene_data['E9_Fz'] +Middle_Scalene_data['E10_Fz'] + Middle_Scalene_data['E11_Fz'] +Middle_Scalene_data['E12_Fz']
Middle_Scalene_data['Middle_Scalene_stretch'] = (
Middle_Scalene_data['E1_stretch'] + Middle_Scalene_data['E2_stretch'] + Middle_Scalene_data['E3_stretch'] +
Middle_Scalene_data[
    'E4_stretch'] + Middle_Scalene_data['E5_stretch'] + Middle_Scalene_data['E6_stretch'] + Middle_Scalene_data[
    'E7_stretch'] +
Middle_Scalene_data['E8_stretch'] + Middle_Scalene_data['E9_stretch'] + Middle_Scalene_data['E10_stretch'] +
Middle_Scalene_data['E11_stretch'] + Middle_Scalene_data['E12_stretch']
) / 12  # AVERAGE
Middle_Scalene_data['Middle_Scalene_Fres'] = ((Middle_Scalene_data['Middle_Scalene_Fy']) ** 2 + (Middle_Scalene_data['Middle_Scalene_Fz']) ** 2) ** 0.5

# print(Middle_Scalene_data)
Middle_Scalene_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'Posterior_Scalene_results'  # 6 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        e5_Fr = float(element5[1])
        e5_Fr = abs(round(e5_Fr, 6))
        e5_Fy = float(element5[3])
        e5_Fy = abs(round(e5_Fy, 6))
        e5_Fz = float(element5[4])
        e5_Fz = abs(round(e5_Fz, 6))
        e5_stretch = float(element5[5])
        e5_stretch = abs(round(e5_stretch, 6))

        e6_Fr = float(element6[1])
        e6_Fr = abs(round(e6_Fr, 6))
        e6_Fy = float(element6[3])
        e6_Fy = abs(round(e6_Fy, 6))
        e6_Fz = float(element6[4])
        e6_Fz = abs(round(e6_Fz, 6))
        e6_stretch = float(element6[5])
        e6_stretch = abs(round(e6_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)

Posterior_Scalene_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                                    pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'),
                                    pd.Series(element1_Fz, name='E1_Fz'),
                                    pd.Series(element1_stretch, name='E1_stretch'),
                                    pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                    pd.Series(element2_Fz, name='E2_Fz'),
                                    pd.Series(element2_stretch, name='E2_stretch'),
                                    pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                    pd.Series(element3_Fz, name='E3_Fz'),
                                    pd.Series(element3_stretch, name='E3_stretch'),
                                    pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                    pd.Series(element4_Fz, name='E4_Fz'),
                                    pd.Series(element4_stretch, name='E4_stretch'),
                                    pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'),
                                    pd.Series(element5_Fz, name='E5_Fz'),
                                    pd.Series(element5_stretch, name='E5_stretch'),
                                    pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'),
                                    pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch')
                                    ], axis=1)

Posterior_Scalene_data['Posterior_Scalene_Fr'] = (
Posterior_Scalene_data['E1_Fr'] + Posterior_Scalene_data['E2_Fr'] + Posterior_Scalene_data['E3_Fr'] +
Posterior_Scalene_data['E4_Fr'] +
Posterior_Scalene_data['E5_Fr'] + Posterior_Scalene_data['E6_Fr']
)
Posterior_Scalene_data['Posterior_Scalene_Fy'] = (
Posterior_Scalene_data['E1_Fy'] + Posterior_Scalene_data['E2_Fy'] + Posterior_Scalene_data['E3_Fy'] +
Posterior_Scalene_data['E4_Fy'] +
Posterior_Scalene_data['E5_Fy'] + Posterior_Scalene_data['E6_Fy']
)
Posterior_Scalene_data['Posterior_Scalene_Fz'] = Posterior_Scalene_data['E1_Fz'] + Posterior_Scalene_data['E2_Fz'] +Posterior_Scalene_data['E3_Fz'] +Posterior_Scalene_data['E4_Fz'] + Posterior_Scalene_data['E5_Fz'] +Posterior_Scalene_data['E6_Fz']
Posterior_Scalene_data['Posterior_Scalene_stretch'] = (
Posterior_Scalene_data['E1_stretch'] + Posterior_Scalene_data['E2_stretch'] + Posterior_Scalene_data['E3_stretch'] + \
Posterior_Scalene_data[
    'E4_stretch'] + Posterior_Scalene_data['E5_stretch'] + Posterior_Scalene_data['E6_stretch']
) / 6  # AVERAGE

Posterior_Scalene_data['Posterior_Scalene_Fres'] = ((Posterior_Scalene_data['Posterior_Scalene_Fy']) ** 2 + (Posterior_Scalene_data['Posterior_Scalene_Fz']) ** 2) ** 0.5

# print(Posterior_Scalene_data)
Posterior_Scalene_data.to_csv(path + filename + ".csv")

###########################################################################################################

###########################################################################################################

filename = 'Minor_Rhomboid_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = abs(round(e1_Fr, 6))
        e1_Fy = float(element1[3])
        e1_Fy = abs(round(e1_Fy, 6))
        e1_Fz = float(element1[4])
        e1_Fz = abs(round(e1_Fz, 6))
        e1_stretch = float(element1[5])
        e1_stretch = abs(round(e1_stretch, 6))

        e2_Fr = float(element2[1])
        e2_Fr = abs(round(e2_Fr, 6))
        e2_Fy = float(element2[3])
        e2_Fy = abs(round(e2_Fy, 6))
        e2_Fz = float(element2[4])
        e2_Fz = abs(round(e2_Fz, 6))
        e2_stretch = float(element2[5])
        e2_stretch = abs(round(e2_stretch, 6))

        e3_Fr = float(element3[1])
        e3_Fr = abs(round(e3_Fr, 6))
        e3_Fy = float(element3[3])
        e3_Fy = abs(round(e3_Fy, 6))
        e3_Fz = float(element3[4])
        e3_Fz = abs(round(e3_Fz, 6))
        e3_stretch = float(element3[5])
        e3_stretch = abs(round(e3_stretch, 6))

        e4_Fr = float(element4[1])
        e4_Fr = abs(round(e4_Fr, 6))
        e4_Fy = float(element4[3])
        e4_Fy = abs(round(e4_Fy, 6))
        e4_Fz = float(element4[4])
        e4_Fz = abs(round(e4_Fz, 6))
        e4_stretch = float(element4[5])
        e4_stretch = abs(round(e4_stretch, 6))

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

Minor_Rhomboid_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                                 pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                                 pd.Series(element1_stretch, name='E1_stretch'),
                                 pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                                 pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                                 pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                                 pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                                 pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                                 pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                                 ], axis=1)

Minor_Rhomboid_data['Minor_Rhomboid_Fr'] = (
            Minor_Rhomboid_data['E1_Fr'] + Minor_Rhomboid_data['E2_Fr'] + Minor_Rhomboid_data['E3_Fr'] +
Minor_Rhomboid_data['E4_Fr'])
Minor_Rhomboid_data['Minor_Rhomboid_Fy'] = (
            Minor_Rhomboid_data['E1_Fy'] + Minor_Rhomboid_data['E2_Fy'] + Minor_Rhomboid_data['E3_Fy'] +
Minor_Rhomboid_data['E4_Fy'])
Minor_Rhomboid_data['Minor_Rhomboid_Fz'] = Minor_Rhomboid_data['E1_Fz'] + Minor_Rhomboid_data['E2_Fz'] +Minor_Rhomboid_data['E3_Fz'] + Minor_Rhomboid_data[
'E4_Fz']
Minor_Rhomboid_data['Minor_Rhomboid_stretch'] = (Minor_Rhomboid_data['E1_stretch'] + Minor_Rhomboid_data['E2_stretch'] +
                                                 Minor_Rhomboid_data[
                                                     'E3_stretch'] + Minor_Rhomboid_data['E4_stretch']) / 4  # AVERAGE
Minor_Rhomboid_data['Minor_Rhomboid_Fres'] = ((Minor_Rhomboid_data['Minor_Rhomboid_Fy']) ** 2 + (
Minor_Rhomboid_data['Minor_Rhomboid_Fz']) ** 2) ** 0.5

# print(Minor_Rhomboid_data)
Minor_Rhomboid_data.to_csv(path + filename + ".csv")

###########################################################################################################


frames_df = [Trapezius_data, Splenius_Capitis_data, SCM_data, Semispinalis_Capitis_data, Semispinalis_Cervicis_data,
             RCPM_data, Oblique_Capitis_Inferior_data, Oblique_Capitis_Superior_data, Rectus_Capitis_Lateralis_data,
             Rectus_Capitis_Anterior_data, Iliocostalis_Cervicis_data,
Longissimus_Capitis_data, Multifidus_data, Omohyoid_data, Sternohyoid_data, Longus_Colli_Superior_data, Longus_Colli_Inferior_data, Longus_Colli_Vertical_data, Anterior_Scalene_data, Middle_Scalene_data, Posterior_Scalene_data,
Minor_Rhomboid_data, Longissimus_Cervicis_data, Splenius_Cervicis_data, Longus_Capitis_data, RCPminor_data, Levator_Scapulae_data]
summary_df = pd.concat(frames_df, axis="columns")
summary_df = summary_df.loc[:, ~summary_df.columns.str.contains("E")]
summary_df.to_csv("Muscle Data.csv")
print('maximum:')
print(summary_df.values.max())
print('minimum:')
print(summary_df.values.min())

###########################################################################################################

# Quick Plot
import matplotlib as mpl
import matplotlib.pyplot as plt

channelsimt = 'Sim_Time_s'

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Trapezius_data[channelsimt], Trapezius_data['Trapezius_Fres'], label='Trapezius_Fres', color='red')
ax.plot(Trapezius_data[channelsimt], Trapezius_data['Trapezius_Fy'], label='Trapezius_Fy', color='orange')
ax.plot(Trapezius_data[channelsimt], Trapezius_data['Trapezius_Fz'], label='Trapezius_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Trapezius (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Trapezius N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Trapezius_data[channelsimt], Trapezius_data['Trapezius_stretch'], label='Trapezius_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Trapezius')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Trapezius.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Splenius_Capitis_data[channelsimt], Splenius_Capitis_data['Splenius_Capitis_Fres'],
        label='Splenius_Capitis_Fres', color='red')
ax.plot(Splenius_Capitis_data[channelsimt], Splenius_Capitis_data['Splenius_Capitis_Fy'], label='Splenius_Capitis_Fy',
        color='orange')
ax.plot(Splenius_Capitis_data[channelsimt], Splenius_Capitis_data['Splenius_Capitis_Fz'], label='Splenius_Capitis_Fz',
        color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Splenius_Capitis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Splenius_Capitis N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Splenius_Capitis_data[channelsimt], Splenius_Capitis_data['Splenius_Capitis_stretch'],
        label='Splenius_Capitis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Splenius_Capitis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Splenius_Capitis.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(SCM_data[channelsimt], SCM_data['SCM_Fres'], label='SCM_Fres', color='red')
ax.plot(SCM_data[channelsimt], SCM_data['SCM_Fy'], label='SCM_Fy', color='orange')
ax.plot(SCM_data[channelsimt], SCM_data['SCM_Fz'], label='SCM_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - SCM (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - SCM N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(SCM_data[channelsimt], SCM_data['SCM_stretch'], label='SCM_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - SCM')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - SCM.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Semispinalis_Capitis_data[channelsimt], Semispinalis_Capitis_data['Semispinalis_Capitis_Fres'],
        label='Semispinalis_Capitis_Fres', color='red')
ax.plot(Semispinalis_Capitis_data[channelsimt], Semispinalis_Capitis_data['Semispinalis_Capitis_Fy'],
        label='Semispinalis_Capitis_Fy', color='orange')
ax.plot(Semispinalis_Capitis_data[channelsimt], Semispinalis_Capitis_data['Semispinalis_Capitis_Fz'],
        label='Semispinalis_Capitis_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Semispinalis_Capitis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Semispinalis_Capitis N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Semispinalis_Capitis_data[channelsimt], Semispinalis_Capitis_data['Semispinalis_Capitis_stretch'],
        label='Semispinalis_Capitis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Semispinalis_Capitis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Semispinalis_Capitis.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Semispinalis_Cervicis_data[channelsimt], Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fres'],
        label='Semispinalis_Cervicis_Fres', color='red')
ax.plot(Semispinalis_Cervicis_data[channelsimt], Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fy'],
        label='Semispinalis_Cervicis_Fy', color='orange')
ax.plot(Semispinalis_Cervicis_data[channelsimt], Semispinalis_Cervicis_data['Semispinalis_Cervicis_Fz'],
        label='Semispinalis_Cervicis_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Semispinalis_Cervicis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Semispinalis_Cervicis N.png')

plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Semispinalis_Cervicis_data[channelsimt], Semispinalis_Cervicis_data['Semispinalis_Cervicis_stretch'],
        label='Semispinalis_Cervicis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Semispinalis_Cervicis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Semispinalis_Cervicis.png')
plt.show()

###########################################################################################################

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(RCPM_data[channelsimt], RCPM_data['RCPM_Fres'], label='RCPM_Fres', color='red')
ax.plot(RCPM_data[channelsimt], RCPM_data['RCPM_Fy'], label='RCPM_Fy', color='orange')
ax.plot(RCPM_data[channelsimt], RCPM_data['RCPM_Fz'], label='RCPM_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - RCPM (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - RCPM N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(RCPM_data[channelsimt], RCPM_data['RCPM_stretch'], label='RCPM_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - RCPM')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - RCPM.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longissimus_Cervicis_data[channelsimt], Longissimus_Cervicis_data['Longissimus_Cervicis_Fres'],
        label='Longissimus_Cervicis_Fres', color='red')
ax.plot(Longissimus_Cervicis_data[channelsimt], Longissimus_Cervicis_data['Longissimus_Cervicis_Fy'],
        label='Longissimus_Cervicis_Fy', color='orange')
ax.plot(Longissimus_Cervicis_data[channelsimt], Longissimus_Cervicis_data['Longissimus_Cervicis_Fz'],
        label='Longissimus_Cervicis_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Longissimus_Cervicis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Longissimus_Cervicis N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longissimus_Cervicis_data[channelsimt], Longissimus_Cervicis_data['Longissimus_Cervicis_stretch'],
        label='Longissimus_Cervicis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Longissimus_Cervicis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Longissimus_Cervicis.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Splenius_Cervicis_data[channelsimt], Splenius_Cervicis_data['Splenius_Cervicis_Fr'],
        label='Splenius_Cervicis_Fr', color='red')
ax.plot(Splenius_Cervicis_data[channelsimt], Splenius_Cervicis_data['Splenius_Cervicis_Fy'],
        label='Splenius_Cervicis_Fy', color='orange')
ax.plot(Splenius_Cervicis_data[channelsimt], Splenius_Cervicis_data['Splenius_Cervicis_Fz'],
        label='Splenius_Cervicis_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Splenius_Cervicis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Splenius_Cervicis N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Splenius_Cervicis_data[channelsimt], Splenius_Cervicis_data['Splenius_Cervicis_stretch'],
        label='Splenius_Cervicis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Splenius_Cervicis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Splenius_Cervicis.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Capitis_data[channelsimt], Longus_Capitis_data['Longus_Capitis_Fres'], label='Longus_Capitis_Fres',
        color='red')
ax.plot(Longus_Capitis_data[channelsimt], Longus_Capitis_data['Longus_Capitis_Fy'], label='Longus_Capitis_Fy',
        color='orange')
ax.plot(Longus_Capitis_data[channelsimt], Longus_Capitis_data['Longus_Capitis_Fz'], label='Longus_Capitis_Fz',
        color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Longus_Capitis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Longus_Capitis N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Capitis_data[channelsimt], Longus_Capitis_data['Longus_Capitis_stretch'], label='Longus_Capitis_stretch',
        color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Longus_Capitis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Longus_Capitis.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(RCPminor_data[channelsimt], RCPminor_data['RCPminor_Fres'], label='RCPminor_Fres', color='red')
ax.plot(RCPminor_data[channelsimt], RCPminor_data['RCPminor_Fy'], label='RCPminor_Fy', color='orange')
ax.plot(RCPminor_data[channelsimt], RCPminor_data['RCPminor_Fz'], label='RCPminor_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - RCPminor (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - RCPminor N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(RCPminor_data[channelsimt], RCPminor_data['RCPminor_stretch'], label='RCPminor_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - RCPminor')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - RCPminor.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Levator_Scapulae_data[channelsimt], Levator_Scapulae_data['Levator_Scapulae_Fres'],
        label='Levator_Scapulae_Fres', color='red')
ax.plot(Levator_Scapulae_data[channelsimt], Levator_Scapulae_data['Levator_Scapulae_Fy'], label='Levator_Scapulae_Fy',
        color='orange')
ax.plot(Levator_Scapulae_data[channelsimt], Levator_Scapulae_data['Levator_Scapulae_Fz'], label='Levator_Scapulae_Fz',
        color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Levator_Scapulae (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Levator_Scapulae N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Levator_Scapulae_data[channelsimt], Levator_Scapulae_data['Levator_Scapulae_stretch'],
        label='Levator_Scapulae_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Levator_Scapulae')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Levator_Scapulae.png')
plt.show()
###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Oblique_Capitis_Inferior_data[channelsimt], Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fres'],
        label='Oblique_Capitis_Inferior_Fres', color='red')
ax.plot(Oblique_Capitis_Inferior_data[channelsimt], Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fy'],
        label='Oblique_Capitis_Inferior_Fy', color='orange')
ax.plot(Oblique_Capitis_Inferior_data[channelsimt], Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_Fz'],
        label='Oblique_Capitis_Inferior_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Oblique_Capitis_Inferior (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Oblique_Capitis_Inferior N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Oblique_Capitis_Inferior_data[channelsimt], Oblique_Capitis_Inferior_data['Oblique_Capitis_Inferior_stretch'],
        label='Oblique_Capitis_Inferior_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Oblique_Capitis_Inferior')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Oblique_Capitis_Inferior.png')
plt.show()
###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Oblique_Capitis_Superior_data[channelsimt], Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fres'],
        label='Oblique_Capitis_Superior_Fres', color='red')
ax.plot(Oblique_Capitis_Superior_data[channelsimt], Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fy'],
        label='Oblique_Capitis_Superior_Fy', color='orange')
ax.plot(Oblique_Capitis_Superior_data[channelsimt], Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_Fz'],
        label='Oblique_Capitis_Superior_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Oblique_Capitis_Superior (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Oblique_Capitis_Superior N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Oblique_Capitis_Superior_data[channelsimt], Oblique_Capitis_Superior_data['Oblique_Capitis_Superior_stretch'],
        label='Oblique_Capitis_Superior_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Oblique_Capitis_Superior')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Oblique_Capitis_Superior.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Rectus_Capitis_Lateralis_data[channelsimt], Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fres'],
        label='Rectus_Capitis_Lateralis_Fres', color='red')
ax.plot(Rectus_Capitis_Lateralis_data[channelsimt], Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fy'],
        label='Rectus_Capitis_Lateralis_Fy', color='orange')
ax.plot(Rectus_Capitis_Lateralis_data[channelsimt], Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_Fz'],
        label='Rectus_Capitis_Lateralis_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Rectus_Capitis_Lateralis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Rectus_Capitis_Lateralis N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Rectus_Capitis_Lateralis_data[channelsimt], Rectus_Capitis_Lateralis_data['Rectus_Capitis_Lateralis_stretch'],
        label='Rectus_Capitis_Lateralis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Rectus_Capitis_Lateralis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Rectus_Capitis_Lateralis.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Rectus_Capitis_Anterior_data[channelsimt], Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fres'],
        label='Rectus_Capitis_Anterior_Fres', color='red')
ax.plot(Rectus_Capitis_Anterior_data[channelsimt], Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fy'],
        label='Rectus_Capitis_Anterior_Fy', color='orange')
ax.plot(Rectus_Capitis_Anterior_data[channelsimt], Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_Fz'],
        label='Rectus_Capitis_Anterior_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Rectus_Capitis_Anterior (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Rectus_Capitis_Anterior N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Rectus_Capitis_Anterior_data[channelsimt], Rectus_Capitis_Anterior_data['Rectus_Capitis_Anterior_stretch'],
        label='Rectus_Capitis_Anterior_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Rectus_Capitis_Anterior')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Rectus_Capitis_Anterior.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Iliocostalis_Cervicis_data[channelsimt], Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fres'],
        label='Iliocostalis_Cervicis_Fres', color='red')
ax.plot(Iliocostalis_Cervicis_data[channelsimt], Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fy'],
        label='Iliocostalis_Cervicis_Fy', color='orange')
ax.plot(Iliocostalis_Cervicis_data[channelsimt], Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_Fz'],
        label='Iliocostalis_Cervicis_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Iliocostalis_Cervicis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Iliocostalis_Cervicis N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Iliocostalis_Cervicis_data[channelsimt], Iliocostalis_Cervicis_data['Iliocostalis_Cervicis_stretch'],
        label='Iliocostalis_Cervicis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Iliocostalis_Cervicis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Iliocostalis_Cervicis.png')
plt.show()

###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longissimus_Capitis_data[channelsimt], Longissimus_Capitis_data['Longissimus_Capitis_Fres'],
        label='Longissimus_Capitis_Fres', color='red')
ax.plot(Longissimus_Capitis_data[channelsimt], Longissimus_Capitis_data['Longissimus_Capitis_Fy'],
        label='Longissimus_Capitis_Fy', color='orange')
ax.plot(Longissimus_Capitis_data[channelsimt], Longissimus_Capitis_data['Longissimus_Capitis_Fz'],
        label='Longissimus_Capitis_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Longissimus_Capitis (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Longissimus_Capitis N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longissimus_Capitis_data[channelsimt], Longissimus_Capitis_data['Longissimus_Capitis_stretch'],
        label='Longissimus_Capitis_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Longissimus_Capitis')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Longissimus_Capitis.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Multifidus_data[channelsimt], Multifidus_data['Multifidus_Fres'], label='Multifidus_Fres', color='red')
ax.plot(Multifidus_data[channelsimt], Multifidus_data['Multifidus_Fy'], label='Multifidus_Fy', color='orange')
ax.plot(Multifidus_data[channelsimt], Multifidus_data['Multifidus_Fz'], label='Multifidus_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Multifidus (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Multifidus N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Multifidus_data[channelsimt], Multifidus_data['Multifidus_stretch'], label='Multifidus_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Multifidus')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Multifidus.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Omohyoid_data[channelsimt], Omohyoid_data['Omohyoid_Fres'], label='Omohyoid_Fres', color='red')
ax.plot(Omohyoid_data[channelsimt], Omohyoid_data['Omohyoid_Fy'], label='Omohyoid_Fy', color='orange')
ax.plot(Omohyoid_data[channelsimt], Omohyoid_data['Omohyoid_Fz'], label='Omohyoid_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Omohyoid (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Omohyoid N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Omohyoid_data[channelsimt], Omohyoid_data['Omohyoid_stretch'], label='Omohyoid_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Omohyoid')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Omohyoid.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Sternohyoid_data[channelsimt], Sternohyoid_data['Sternohyoid_Fres'], label='Sternohyoid_Fres', color='red')
ax.plot(Sternohyoid_data[channelsimt], Sternohyoid_data['Sternohyoid_Fy'], label='Sternohyoid_Fy', color='orange')
ax.plot(Sternohyoid_data[channelsimt], Sternohyoid_data['Sternohyoid_Fz'], label='Sternohyoid_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Sternohyoid (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Sternohyoid N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Sternohyoid_data[channelsimt], Sternohyoid_data['Sternohyoid_stretch'], label='Sternohyoid_stretch',
        color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Sternohyoid')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Sternohyoid.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Colli_Superior_data[channelsimt], Longus_Colli_Superior_data['Longus_Colli_Superior_Fres'],
        label='Longus_Colli_Superior_Fres', color='red')
ax.plot(Longus_Colli_Superior_data[channelsimt], Longus_Colli_Superior_data['Longus_Colli_Superior_Fy'],
        label='Longus_Colli_Superior_Fy', color='orange')
ax.plot(Longus_Colli_Superior_data[channelsimt], Longus_Colli_Superior_data['Longus_Colli_Superior_Fz'],
        label='Longus_Colli_Superior_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Longus_Colli_Superior (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Longus_Colli_Superior N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Colli_Superior_data[channelsimt], Longus_Colli_Superior_data['Longus_Colli_Superior_stretch'],
        label='Longus_Colli_Superior_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Longus_Colli_Superior')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Longus_Colli_Superior.png')
plt.show()
###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Colli_Inferior_data[channelsimt], Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fres'],
        label='Longus_Colli_Inferior_Fres', color='red')
ax.plot(Longus_Colli_Inferior_data[channelsimt], Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fy'],
        label='Longus_Colli_Inferior_Fy', color='orange')
ax.plot(Longus_Colli_Inferior_data[channelsimt], Longus_Colli_Inferior_data['Longus_Colli_Inferior_Fz'],
        label='Longus_Colli_Inferior_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Longus_Colli_Inferior (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Longus_Colli_Inferior N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Colli_Inferior_data[channelsimt], Longus_Colli_Inferior_data['Longus_Colli_Inferior_stretch'],
        label='Longus_Colli_Inferior_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Longus_Colli_Inferior')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Longus_Colli_Inferior.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Colli_Vertical_data[channelsimt], Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fres'],
        label='Longus_Colli_Vertical_Fres', color='red')
ax.plot(Longus_Colli_Vertical_data[channelsimt], Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fy'],
        label='Longus_Colli_Vertical_Fy', color='orange')
ax.plot(Longus_Colli_Vertical_data[channelsimt], Longus_Colli_Vertical_data['Longus_Colli_Vertical_Fz'],
        label='Longus_Colli_Vertical_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Longus_Colli_Vertical (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Longus_Colli_Vertical N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Longus_Colli_Vertical_data[channelsimt], Longus_Colli_Vertical_data['Longus_Colli_Vertical_stretch'],
        label='Longus_Colli_Vertical_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Longus_Colli_Vertical')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Longus_Colli_Vertical.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Anterior_Scalene_data[channelsimt], Anterior_Scalene_data['Anterior_Scalene_Fres'],
        label='Anterior_Scalene_Fres', color='red')
ax.plot(Anterior_Scalene_data[channelsimt], Anterior_Scalene_data['Anterior_Scalene_Fy'], label='Anterior_Scalene_Fy',
        color='orange')
ax.plot(Anterior_Scalene_data[channelsimt], Anterior_Scalene_data['Anterior_Scalene_Fz'], label='Anterior_Scalene_Fz',
        color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Anterior_Scalene (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Anterior_Scalene N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Anterior_Scalene_data[channelsimt], Anterior_Scalene_data['Anterior_Scalene_stretch'],
        label='Anterior_Scalene_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Anterior_Scalene')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Anterior_Scalene.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Middle_Scalene_data[channelsimt], Middle_Scalene_data['Middle_Scalene_Fres'], label='Middle_Scalene_Fres',
        color='red')
ax.plot(Middle_Scalene_data[channelsimt], Middle_Scalene_data['Middle_Scalene_Fy'], label='Middle_Scalene_Fy',
        color='orange')
ax.plot(Middle_Scalene_data[channelsimt], Middle_Scalene_data['Middle_Scalene_Fz'], label='Middle_Scalene_Fz',
        color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Middle_Scalene (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Middle_Scalene N.png')
plt.show()

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Middle_Scalene_data[channelsimt], Middle_Scalene_data['Middle_Scalene_stretch'], label='Middle_Scalene_stretch',
        color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Middle_Scalene')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Middle_Scalene.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Posterior_Scalene_data[channelsimt], Posterior_Scalene_data['Posterior_Scalene_Fres'],
        label='Posterior_Scalene_Fres', color='red')
ax.plot(Posterior_Scalene_data[channelsimt], Posterior_Scalene_data['Posterior_Scalene_Fy'],
        label='Posterior_Scalene_Fy', color='orange')
ax.plot(Posterior_Scalene_data[channelsimt], Posterior_Scalene_data['Posterior_Scalene_Fz'],
        label='Posterior_Scalene_Fz', color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Posterior_Scalene (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Posterior_Scalene N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Posterior_Scalene_data[channelsimt], Posterior_Scalene_data['Posterior_Scalene_stretch'],
        label='Posterior_Scalene_stretch', color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Posterior_Scalene')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Posterior_Scalene.png')
plt.show()
###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Minor_Rhomboid_data[channelsimt], Minor_Rhomboid_data['Minor_Rhomboid_Fres'], label='Minor_Rhomboid_Fres',
        color='red')
ax.plot(Minor_Rhomboid_data[channelsimt], Minor_Rhomboid_data['Minor_Rhomboid_Fy'], label='Minor_Rhomboid_Fy',
        color='orange')
ax.plot(Minor_Rhomboid_data[channelsimt], Minor_Rhomboid_data['Minor_Rhomboid_Fz'], label='Minor_Rhomboid_Fz',
        color='green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Forces - Minor_Rhomboid (N)')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Forces - Minor_Rhomboid N.png')

plt.show()  # mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig, ax = plt.subplots()
ax.plot(Minor_Rhomboid_data[channelsimt], Minor_Rhomboid_data['Minor_Rhomboid_stretch'], label='Minor_Rhomboid_stretch',
        color='blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Muscle Stretch - Minor_Rhomboid')
plt.subplots_adjust(left=0.17, bottom=0.13)
plt.savefig('Muscle Stretch - Minor_Rhomboid.png')
plt.show()

###########################################################################################################
print("complete")