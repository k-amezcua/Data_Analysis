import os, glob
import re
import numpy as np
import pandas as pd
path = "C:\\Users\\kamezcua\\Desktop\\0000 THESIS\\Model Development\\0 15 G Sled Test Validation\\0924\\Disp BC\\Baseline\\Ligament Forces\\New Position\\"
os.chdir(path)
print('running')
###########################################################################################################
filename= 'C01_AAOM_results' # 4 spring elements
with open(path+filename+'.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i,j in enumerate(lines):
    values = []
    if "Time  = " in j:

        start = i+2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?',lines[start-2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?',lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?',lines[start+1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?',lines[start+2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?',lines[start+3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr,6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy,6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz,6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch,6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C01_AAOM_data = pd.concat([pd.Series(time, name='Sim_Time_s'),pd.Series(element1_Fr, name='E1_Fr'),
                  pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                  pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                  pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                  pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                  ], axis=1)

C01_AAOM_data['C01_AAOM_Fr'] = (C01_AAOM_data['E1_Fr'] + C01_AAOM_data['E2_Fr'] + C01_AAOM_data['E3_Fr'] + C01_AAOM_data['E4_Fr'])
C01_AAOM_data['C01_AAOM_Fy'] = (C01_AAOM_data['E1_Fy'] + C01_AAOM_data['E2_Fy'] + C01_AAOM_data['E3_Fy'] + C01_AAOM_data['E4_Fy']) *-1 #Rearward
C01_AAOM_data['C01_AAOM_Fz'] = C01_AAOM_data['E1_Fz'] + C01_AAOM_data['E2_Fz'] + C01_AAOM_data['E3_Fz'] + C01_AAOM_data['E4_Fz']
C01_AAOM_data['C01_AAOM_stretch'] = (C01_AAOM_data['E1_stretch'] + C01_AAOM_data['E2_stretch'] + C01_AAOM_data['E3_stretch'] + C01_AAOM_data['E4_stretch'])/4 #AVERAGE
C01_AAOM_data['C01_AAOM_Fres'] = ((C01_AAOM_data['C01_AAOM_Fy'] )**2 + (C01_AAOM_data['C01_AAOM_Fz'] )**2)**0.5

# print(C01_AAOM_data)
C01_AAOM_data.to_csv(path+filename+".csv")

###########################################################################################################

filename = 'C01_JC_results'  # 26 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
element17_Fr = []
element18_Fr = []
element19_Fr = []
element20_Fr = []
element21_Fr = []
element22_Fr = []
element23_Fr = []
element24_Fr = []
element25_Fr = []
element26_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
element17_Fy = []
element18_Fy = []
element19_Fy = []
element20_Fy = []
element21_Fy = []
element22_Fy = []
element23_Fy = []
element24_Fy = []
element25_Fy = []
element26_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
element17_Fz = []
element18_Fz = []
element19_Fz = []
element20_Fz = []
element21_Fz = []
element22_Fz = []
element23_Fz = []
element24_Fz = []
element25_Fz = []
element26_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []
element17_stretch = []
element18_stretch = []
element19_stretch = []
element20_stretch = []
element21_stretch = []
element22_stretch = []
element23_stretch = []
element24_stretch = []
element25_stretch = []
element26_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        element17 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 16])
        element18 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 17])
        element19 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 18])
        element20 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 19])
        element21 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 20])
        element22 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 21])
        element23 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 22])
        element24 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 23])
        element25 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 24])
        element26 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 25])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        e17_Fr = float(element17[1])
        e17_Fr = round(e17_Fr, 6)
        e17_Fy = float(element17[3])
        e17_Fy = round(e17_Fy, 6)
        e17_Fz = float(element17[4])
        e17_Fz = round(e17_Fz, 6)
        e17_stretch = float(element17[5])
        e17_stretch = round(e17_stretch, 6)

        e18_Fr = float(element18[1])
        e18_Fr = round(e18_Fr, 6)
        e18_Fy = float(element18[3])
        e18_Fy = round(e18_Fy, 6)
        e18_Fz = float(element18[4])
        e18_Fz = round(e18_Fz, 6)
        e18_stretch = float(element18[5])
        e18_stretch = round(e18_stretch, 6)

        e19_Fr = float(element19[1])
        e19_Fr = round(e19_Fr, 6)
        e19_Fy = float(element19[3])
        e19_Fy = round(e19_Fy, 6)
        e19_Fz = float(element19[4])
        e19_Fz = round(e19_Fz, 6)
        e19_stretch = float(element19[5])
        e19_stretch = round(e19_stretch, 6)

        e20_Fr = float(element20[1])
        e20_Fr = round(e20_Fr, 6)
        e20_Fy = float(element20[3])
        e20_Fy = round(e20_Fy, 6)
        e20_Fz = float(element20[4])
        e20_Fz = round(e20_Fz, 6)
        e20_stretch = float(element20[5])
        e20_stretch = round(e20_stretch, 6)

        e21_Fr = float(element21[1])
        e21_Fr = round(e21_Fr, 6)
        e21_Fy = float(element21[3])
        e21_Fy = round(e21_Fy, 6)
        e21_Fz = float(element21[4])
        e21_Fz = round(e21_Fz, 6)
        e21_stretch = float(element21[5])
        e21_stretch = round(e21_stretch, 6)

        e22_Fr = float(element22[1])
        e22_Fr = round(e22_Fr, 6)
        e22_Fy = float(element22[3])
        e22_Fy = round(e22_Fy, 6)
        e22_Fz = float(element22[4])
        e22_Fz = round(e22_Fz, 6)
        e22_stretch = float(element22[5])
        e22_stretch = round(e22_stretch, 6)

        e23_Fr = float(element23[1])
        e23_Fr = round(e23_Fr, 6)
        e23_Fy = float(element23[3])
        e23_Fy = round(e23_Fy, 6)
        e23_Fz = float(element23[4])
        e23_Fz = round(e23_Fz, 6)
        e23_stretch = float(element23[5])
        e23_stretch = round(e23_stretch, 6)

        e24_Fr = float(element24[1])
        e24_Fr = round(e24_Fr, 6)
        e24_Fy = float(element24[3])
        e24_Fy = round(e24_Fy, 6)
        e24_Fz = float(element24[4])
        e24_Fz = round(e24_Fz, 6)
        e24_stretch = float(element24[5])
        e24_stretch = round(e24_stretch, 6)

        e25_Fr = float(element25[1])
        e25_Fr = round(e25_Fr, 6)
        e25_Fy = float(element25[3])
        e25_Fy = round(e25_Fy, 6)
        e25_Fz = float(element25[4])
        e25_Fz = round(e25_Fz, 6)
        e25_stretch = float(element25[5])
        e25_stretch = round(e25_stretch, 6)

        e26_Fr = float(element26[1])
        e26_Fr = round(e26_Fr, 6)
        e26_Fy = float(element26[3])
        e26_Fy = round(e26_Fy, 6)
        e26_Fz = float(element26[4])
        e26_Fz = round(e26_Fz, 6)
        e26_stretch = float(element26[5])
        e26_stretch = round(e26_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
        element17_Fr.append(e17_Fr)
        element17_Fy.append(e17_Fy)
        element17_Fz.append(e17_Fz)
        element17_stretch.append(e17_stretch)
        element18_Fr.append(e18_Fr)
        element18_Fy.append(e18_Fy)
        element18_Fz.append(e18_Fz)
        element18_stretch.append(e18_stretch)
        element19_Fr.append(e19_Fr)
        element19_Fy.append(e19_Fy)
        element19_Fz.append(e19_Fz)
        element19_stretch.append(e19_stretch)
        element20_Fr.append(e20_Fr)
        element20_Fy.append(e20_Fy)
        element20_Fz.append(e20_Fz)
        element20_stretch.append(e20_stretch)
        element21_Fr.append(e21_Fr)
        element21_Fy.append(e21_Fy)
        element21_Fz.append(e21_Fz)
        element21_stretch.append(e21_stretch)
        element22_Fr.append(e22_Fr)
        element22_Fy.append(e22_Fy)
        element22_Fz.append(e22_Fz)
        element22_stretch.append(e22_stretch)
        element23_Fr.append(e23_Fr)
        element23_Fy.append(e23_Fy)
        element23_Fz.append(e23_Fz)
        element23_stretch.append(e23_stretch)
        element24_Fr.append(e24_Fr)
        element24_Fy.append(e24_Fy)
        element24_Fz.append(e24_Fz)
        element24_stretch.append(e24_stretch)
        element25_Fr.append(e25_Fr)
        element25_Fy.append(e25_Fy)
        element25_Fz.append(e25_Fz)
        element25_stretch.append(e25_stretch)
        element26_Fr.append(e26_Fr)
        element26_Fy.append(e26_Fy)
        element26_Fz.append(e26_Fz)
        element26_stretch.append(e26_stretch)

C01_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch'),
                  pd.Series(element17_Fr, name='E17_Fr'), pd.Series(element17_Fy, name='E17_Fy'), pd.Series(element17_Fz, name='E17_Fz'), pd.Series(element17_stretch, name='E17_stretch'),
                  pd.Series(element18_Fr, name='E18_Fr'), pd.Series(element18_Fy, name='E18_Fy'), pd.Series(element18_Fz, name='E18_Fz'), pd.Series(element18_stretch, name='E18_stretch'),
                  pd.Series(element19_Fr, name='E19_Fr'), pd.Series(element19_Fy, name='E19_Fy'), pd.Series(element19_Fz, name='E19_Fz'), pd.Series(element19_stretch, name='E19_stretch'),
                  pd.Series(element20_Fr, name='E20_Fr'), pd.Series(element20_Fy, name='E20_Fy'), pd.Series(element20_Fz, name='E20_Fz'), pd.Series(element20_stretch, name='E20_stretch'),
                  pd.Series(element21_Fr, name='E21_Fr'), pd.Series(element21_Fy, name='E21_Fy'), pd.Series(element21_Fz, name='E21_Fz'), pd.Series(element21_stretch, name='E21_stretch'),
                  pd.Series(element22_Fr, name='E22_Fr'), pd.Series(element22_Fy, name='E22_Fy'), pd.Series(element22_Fz, name='E22_Fz'), pd.Series(element22_stretch, name='E22_stretch'),
                  pd.Series(element23_Fr, name='E23_Fr'), pd.Series(element23_Fy, name='E23_Fy'), pd.Series(element23_Fz, name='E23_Fz'), pd.Series(element23_stretch, name='E23_stretch'),
                  pd.Series(element24_Fr, name='E24_Fr'), pd.Series(element24_Fy, name='E24_Fy'), pd.Series(element24_Fz, name='E24_Fz'), pd.Series(element24_stretch, name='E24_stretch'),
                  pd.Series(element25_Fr, name='E25_Fr'), pd.Series(element25_Fy, name='E25_Fy'), pd.Series(element25_Fz, name='E25_Fz'), pd.Series(element25_stretch, name='E25_stretch'),
                  pd.Series(element26_Fr, name='E26_Fr'), pd.Series(element26_Fy, name='E26_Fy'), pd.Series(element26_Fz, name='E26_Fz'), pd.Series(element26_stretch, name='E26_stretch')
                  ], axis=1)

C01_JC_data['C01_JC_Fr'] = (C01_JC_data['E1_Fr'] + C01_JC_data['E2_Fr'] + C01_JC_data['E3_Fr'] + C01_JC_data['E4_Fr'] + C01_JC_data['E5_Fr'] + C01_JC_data['E6_Fr'] + C01_JC_data['E7_Fr'] + C01_JC_data['E8_Fr'] + C01_JC_data['E9_Fr'] + C01_JC_data['E10_Fr'] + C01_JC_data['E11_Fr'] + C01_JC_data['E12_Fr'] + C01_JC_data['E13_Fr'] + C01_JC_data['E14_Fr'] + C01_JC_data['E15_Fr'] + C01_JC_data['E16_Fr'] + C01_JC_data['E17_Fr'] + C01_JC_data['E18_Fr'] + C01_JC_data['E19_Fr'] + C01_JC_data['E20_Fr'] + C01_JC_data['E21_Fr'] + C01_JC_data['E22_Fr'] + C01_JC_data['E23_Fr'] + C01_JC_data['E24_Fr'] + C01_JC_data['E25_Fr'] + C01_JC_data['E26_Fr']
                     )
C01_JC_data['C01_JC_Fy'] = (C01_JC_data['E1_Fy'] + C01_JC_data['E2_Fy'] + C01_JC_data['E3_Fy'] + C01_JC_data['E4_Fy'] + C01_JC_data['E5_Fy'] + C01_JC_data['E6_Fy'] + C01_JC_data['E7_Fy'] + C01_JC_data['E8_Fy'] + C01_JC_data['E9_Fy'] + C01_JC_data['E10_Fy'] + C01_JC_data['E11_Fy'] + C01_JC_data['E12_Fy'] + C01_JC_data['E13_Fy'] + C01_JC_data['E14_Fy'] + C01_JC_data['E15_Fy'] + C01_JC_data['E16_Fy'] + C01_JC_data['E17_Fy'] + C01_JC_data['E18_Fy'] + C01_JC_data['E19_Fy'] + C01_JC_data['E20_Fy'] + C01_JC_data['E21_Fy'] + C01_JC_data['E22_Fy'] + C01_JC_data['E23_Fy'] + C01_JC_data['E24_Fy'] + C01_JC_data['E25_Fy'] + C01_JC_data['E26_Fy']
                     )*-1 #Rearward
C01_JC_data['C01_JC_Fz'] = C01_JC_data['E1_Fz'] + C01_JC_data['E2_Fz'] + C01_JC_data['E3_Fz'] + C01_JC_data['E4_Fz'] + C01_JC_data['E5_Fz'] + C01_JC_data['E6_Fz'] + C01_JC_data['E7_Fz'] + C01_JC_data['E8_Fz'] + C01_JC_data['E9_Fz'] + C01_JC_data['E10_Fz'] + C01_JC_data['E11_Fz'] + C01_JC_data['E12_Fz'] + C01_JC_data['E13_Fz'] + C01_JC_data['E14_Fz'] + C01_JC_data['E15_Fz'] + C01_JC_data['E16_Fz'] + C01_JC_data['E17_Fz'] + C01_JC_data['E18_Fz'] + C01_JC_data['E19_Fz'] + C01_JC_data['E20_Fz'] + C01_JC_data['E21_Fz'] + C01_JC_data['E22_Fz'] + C01_JC_data['E23_Fz'] + C01_JC_data['E24_Fz'] + C01_JC_data['E25_Fz'] + C01_JC_data['E26_Fz']
C01_JC_data['C01_JC_stretch'] = (C01_JC_data['E1_stretch'] + C01_JC_data['E2_stretch'] + C01_JC_data['E3_stretch'] + C01_JC_data['E4_stretch'] + C01_JC_data['E5_stretch'] + C01_JC_data['E6_stretch'] + C01_JC_data['E7_stretch'] + C01_JC_data['E8_stretch'] + C01_JC_data['E9_stretch'] + C01_JC_data['E10_stretch'] + C01_JC_data['E11_stretch'] + C01_JC_data['E12_stretch'] + C01_JC_data['E13_stretch'] + C01_JC_data['E14_stretch'] + C01_JC_data['E15_stretch'] + C01_JC_data['E16_stretch'] + C01_JC_data['E17_stretch'] + C01_JC_data['E18_stretch'] + C01_JC_data['E19_stretch'] + C01_JC_data['E20_stretch'] + C01_JC_data['E21_stretch'] + C01_JC_data['E22_stretch'] + C01_JC_data['E23_stretch'] + C01_JC_data['E24_stretch'] + C01_JC_data['E25_stretch'] + C01_JC_data['E26_stretch']
                            )/ 26  # AVERAGE
C01_JC_data['C01_JC_Fres'] = ((C01_JC_data['C01_JC_Fy'] )**2 + (C01_JC_data['C01_JC_Fz'] )**2)**0.5

# print(C01_JC_data)
C01_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C01_PAOM_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C01_PAOM_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C01_PAOM_data['C01_PAOM_Fr'] = (C01_PAOM_data['E1_Fr'] + C01_PAOM_data['E2_Fr'] + C01_PAOM_data['E3_Fr'] +
                                C01_PAOM_data['E4_Fr']) * -1  # Down & Rearward
C01_PAOM_data['C01_PAOM_Fy'] = (C01_PAOM_data['E1_Fy'] + C01_PAOM_data['E2_Fy'] + C01_PAOM_data['E3_Fy'] +
                                C01_PAOM_data['E4_Fy']) * -1  # Rearward
C01_PAOM_data['C01_PAOM_Fz'] = C01_PAOM_data['E1_Fz'] + C01_PAOM_data['E2_Fz'] + C01_PAOM_data['E3_Fz'] + C01_PAOM_data[
    'E4_Fz']
C01_PAOM_data['C01_PAOM_stretch'] = (C01_PAOM_data['E1_stretch'] + C01_PAOM_data['E2_stretch'] + C01_PAOM_data[
    'E3_stretch'] + C01_PAOM_data['E4_stretch']) / 4  # AVERAGE
C01_PAOM_data['C01_PAOM_Fres'] = ((C01_PAOM_data['C01_PAOM_Fy'] )**2 + (C01_PAOM_data['C01_PAOM_Fz'] )**2)**0.5

# print(C01_PAOM_data)
C01_PAOM_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C02_ALAR_results'  # 2 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element1_Fy = []
element2_Fy = []
element1_Fz = []
element2_Fz = []
element1_stretch = []
element2_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)

C02_ALAR_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch')
                           ], axis=1)

C02_ALAR_data['C02_ALAR_Fr'] = (C02_ALAR_data['E1_Fr'] + C02_ALAR_data['E2_Fr'] ) * -1  # Down & Rearward
C02_ALAR_data['C02_ALAR_Fy'] = (C02_ALAR_data['E1_Fy'] + C02_ALAR_data['E2_Fy'] ) * -1  # Rearward
C02_ALAR_data['C02_ALAR_Fz'] = C02_ALAR_data['E1_Fz'] + C02_ALAR_data['E2_Fz']
C02_ALAR_data['C02_ALAR_stretch'] = (C02_ALAR_data['E1_stretch'] + C02_ALAR_data['E2_stretch']) / 2  # AVERAGE
C02_ALAR_data['C02_ALAR_Fres'] = ((C02_ALAR_data['C02_ALAR_Fy'] )**2 + (C02_ALAR_data['C02_ALAR_Fz'] )**2)**0.5

# print(C02_ALAR_data)
C02_ALAR_data.to_csv(path + filename + ".csv")


###########################################################################################################


filename = 'C02_APICAL_results'  # 1 spring element
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element1_Fy = []
element1_Fz = []
element1_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)

C02_APICAL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch')
                           ], axis=1)

C02_APICAL_data['C02_APICAL_Fr'] = (C02_APICAL_data['E1_Fr']) * -1  # Down & Rearward
C02_APICAL_data['C02_APICAL_Fy'] = (C02_APICAL_data['E1_Fy']) * -1  # Rearward
C02_APICAL_data['C02_APICAL_Fz'] = C02_APICAL_data['E1_Fz']
C02_APICAL_data['C02_APICAL_stretch'] = (C02_APICAL_data['E1_stretch']) / 1  # AVERAGE
C02_APICAL_data['C02_APICAL_Fres'] = ((C02_APICAL_data['C02_APICAL_Fy'] )**2 + (C02_APICAL_data['C02_APICAL_Fz'] )**2)**0.5

# print(C02_APICAL_data)
C02_APICAL_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C02_TM_results'  # 1 spring element
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element1_Fy = []
element1_Fz = []
element1_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)

C02_TM_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch')
                           ], axis=1)

C02_TM_data['C02_TM_Fr'] = (C02_TM_data['E1_Fr']) * -1  # Down & Rearward
C02_TM_data['C02_TM_Fy'] = (C02_TM_data['E1_Fy']) * -1  # Rearward
C02_TM_data['C02_TM_Fz'] = C02_TM_data['E1_Fz']
C02_TM_data['C02_TM_stretch'] = (C02_TM_data['E1_stretch']) / 1  # AVERAGE
C02_TM_data['C02_TM_Fres'] = ((C02_TM_data['C02_TM_Fy'] )**2 + (C02_TM_data['C02_TM_Fz'] )**2)**0.5

# print(C02_TM_data)
C02_TM_data.to_csv(path + filename + ".csv")

###########################################################################################################

###########################################################################################################
filename = 'C02_TM_VC_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C02_TM_VC_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C02_TM_VC_data['C02_TM_VC_Fr'] = (C02_TM_VC_data['E1_Fr'] + C02_TM_VC_data['E2_Fr'] + C02_TM_VC_data['E3_Fr'] +
                                C02_TM_VC_data['E4_Fr']) * -1  # Down & Rearward
C02_TM_VC_data['C02_TM_VC_Fy'] = (C02_TM_VC_data['E1_Fy'] + C02_TM_VC_data['E2_Fy'] + C02_TM_VC_data['E3_Fy'] +
                                C02_TM_VC_data['E4_Fy']) * -1  # Rearward
C02_TM_VC_data['C02_TM_VC_Fz'] = C02_TM_VC_data['E1_Fz'] + C02_TM_VC_data['E2_Fz'] + C02_TM_VC_data['E3_Fz'] + C02_TM_VC_data[
    'E4_Fz']
C02_TM_VC_data['C02_TM_VC_stretch'] = (C02_TM_VC_data['E1_stretch'] + C02_TM_VC_data['E2_stretch'] + C02_TM_VC_data[
    'E3_stretch'] + C02_TM_VC_data['E4_stretch']) / 4  # AVERAGE
C02_TM_VC_data['C02_TM_VC_Fres'] = ((C02_TM_VC_data['C02_TM_VC_Fy'] )**2 + (C02_TM_VC_data['C02_TM_VC_Fz'] )**2)**0.5

# print(C02_TM_VC_data)
C02_TM_VC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C7T1_ALL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C7T1_ALL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C7T1_ALL_data['C7T1_ALL_Fr'] = (C7T1_ALL_data['E1_Fr'] + C7T1_ALL_data['E2_Fr'] + C7T1_ALL_data['E3_Fr'] +
                                C7T1_ALL_data['E4_Fr']) * -1  # Down & Rearward
C7T1_ALL_data['C7T1_ALL_Fy'] = (C7T1_ALL_data['E1_Fy'] + C7T1_ALL_data['E2_Fy'] + C7T1_ALL_data['E3_Fy'] +
                                C7T1_ALL_data['E4_Fy']) * -1  # Rearward
C7T1_ALL_data['C7T1_ALL_Fz'] = C7T1_ALL_data['E1_Fz'] + C7T1_ALL_data['E2_Fz'] + C7T1_ALL_data['E3_Fz'] + C7T1_ALL_data[
    'E4_Fz']
C7T1_ALL_data['C7T1_ALL_stretch'] = (C7T1_ALL_data['E1_stretch'] + C7T1_ALL_data['E2_stretch'] + C7T1_ALL_data[
    'E3_stretch'] + C7T1_ALL_data['E4_stretch']) / 4  # AVERAGE
C7T1_ALL_data['C7T1_ALL_Fres'] = ((C7T1_ALL_data['C7T1_ALL_Fy'] )**2 + (C7T1_ALL_data['C7T1_ALL_Fz'] )**2)**0.5

# print(C7T1_ALL_data)
C7T1_ALL_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C7T1_ISL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C7T1_ISL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C7T1_ISL_data['C7T1_ISL_Fr'] = (C7T1_ISL_data['E1_Fr'] + C7T1_ISL_data['E2_Fr'] + C7T1_ISL_data['E3_Fr'] +
                                C7T1_ISL_data['E4_Fr']) * -1  # Down & Rearward
C7T1_ISL_data['C7T1_ISL_Fy'] = (C7T1_ISL_data['E1_Fy'] + C7T1_ISL_data['E2_Fy'] + C7T1_ISL_data['E3_Fy'] +
                                C7T1_ISL_data['E4_Fy']) * -1  # Rearward
C7T1_ISL_data['C7T1_ISL_Fz'] = C7T1_ISL_data['E1_Fz'] + C7T1_ISL_data['E2_Fz'] + C7T1_ISL_data['E3_Fz'] + C7T1_ISL_data[
    'E4_Fz']
C7T1_ISL_data['C7T1_ISL_stretch'] = (C7T1_ISL_data['E1_stretch'] + C7T1_ISL_data['E2_stretch'] + C7T1_ISL_data[
    'E3_stretch'] + C7T1_ISL_data['E4_stretch']) / 4  # AVERAGE
C7T1_ISL_data['C7T1_ISL_Fres'] = ((C7T1_ISL_data['C7T1_ISL_Fy'] )**2 + (C7T1_ISL_data['C7T1_ISL_Fz'] )**2)**0.5

# print(C7T1_ISL_data)
C7T1_ISL_data.to_csv(path + filename + ".csv")


###########################################################################################################

filename = 'C7T1_JC_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
C7T1_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch')
                  ], axis=1)

C7T1_JC_data['C7T1_JC_Fr'] = (C7T1_JC_data['E1_Fr'] + C7T1_JC_data['E2_Fr'] + C7T1_JC_data['E3_Fr'] + C7T1_JC_data['E4_Fr'] + C7T1_JC_data['E5_Fr'] + C7T1_JC_data['E6_Fr'] + C7T1_JC_data['E7_Fr'] + C7T1_JC_data['E8_Fr'] + C7T1_JC_data['E9_Fr'] + C7T1_JC_data['E10_Fr'] + C7T1_JC_data['E11_Fr'] + C7T1_JC_data['E12_Fr'] + C7T1_JC_data['E13_Fr'] + C7T1_JC_data['E14_Fr'] + C7T1_JC_data['E15_Fr'] + C7T1_JC_data['E16_Fr']
                     )
C7T1_JC_data['C7T1_JC_Fy'] = (C7T1_JC_data['E1_Fy'] + C7T1_JC_data['E2_Fy'] + C7T1_JC_data['E3_Fy'] + C7T1_JC_data['E4_Fy'] + C7T1_JC_data['E5_Fy'] + C7T1_JC_data['E6_Fy'] + C7T1_JC_data['E7_Fy'] + C7T1_JC_data['E8_Fy'] + C7T1_JC_data['E9_Fy'] + C7T1_JC_data['E10_Fy'] + C7T1_JC_data['E11_Fy'] + C7T1_JC_data['E12_Fy'] + C7T1_JC_data['E13_Fy'] + C7T1_JC_data['E14_Fy'] + C7T1_JC_data['E15_Fy'] + C7T1_JC_data['E16_Fy']
                     )*-1 #Rearward
C7T1_JC_data['C7T1_JC_Fz'] = C7T1_JC_data['E1_Fz'] + C7T1_JC_data['E2_Fz'] + C7T1_JC_data['E3_Fz'] + C7T1_JC_data['E4_Fz'] + C7T1_JC_data['E5_Fz'] + C7T1_JC_data['E6_Fz'] + C7T1_JC_data['E7_Fz'] + C7T1_JC_data['E8_Fz'] + C7T1_JC_data['E9_Fz'] + C7T1_JC_data['E10_Fz'] + C7T1_JC_data['E11_Fz'] + C7T1_JC_data['E12_Fz'] + C7T1_JC_data['E13_Fz'] + C7T1_JC_data['E14_Fz'] + C7T1_JC_data['E15_Fz'] + C7T1_JC_data['E16_Fz']
C7T1_JC_data['C7T1_JC_stretch'] = (C7T1_JC_data['E1_stretch'] + C7T1_JC_data['E2_stretch'] + C7T1_JC_data['E3_stretch'] + C7T1_JC_data['E4_stretch'] + C7T1_JC_data['E5_stretch'] + C7T1_JC_data['E6_stretch'] + C7T1_JC_data['E7_stretch'] + C7T1_JC_data['E8_stretch'] + C7T1_JC_data['E9_stretch'] + C7T1_JC_data['E10_stretch'] + C7T1_JC_data['E11_stretch'] + C7T1_JC_data['E12_stretch'] + C7T1_JC_data['E13_stretch'] + C7T1_JC_data['E14_stretch'] + C7T1_JC_data['E15_stretch'] + C7T1_JC_data['E16_stretch']
                            )/ 16  # AVERAGE
C7T1_JC_data['C7T1_JC_Fres'] = ((C7T1_JC_data['C7T1_JC_Fy'] )**2 + (C7T1_JC_data['C7T1_JC_Fz'] )**2)**0.5

# print(C7T1_JC_data)
C7T1_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C7T1_LF_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

C7T1_LF_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                  ], axis=1)

C7T1_LF_data['C7T1_LF_Fr'] = (C7T1_LF_data['E1_Fr'] + C7T1_LF_data['E2_Fr'] + C7T1_LF_data['E3_Fr'] + C7T1_LF_data['E4_Fr'] + C7T1_LF_data['E5_Fr'] + C7T1_LF_data['E6_Fr'] + C7T1_LF_data['E7_Fr'] + C7T1_LF_data['E8_Fr']
                     )
C7T1_LF_data['C7T1_LF_Fy'] = (C7T1_LF_data['E1_Fy'] + C7T1_LF_data['E2_Fy'] + C7T1_LF_data['E3_Fy'] + C7T1_LF_data['E4_Fy'] + C7T1_LF_data['E5_Fy'] + C7T1_LF_data['E6_Fy'] + C7T1_LF_data['E7_Fy'] + C7T1_LF_data['E8_Fy']
                     )*-1 #Rearward
C7T1_LF_data['C7T1_LF_Fz'] = C7T1_LF_data['E1_Fz'] + C7T1_LF_data['E2_Fz'] + C7T1_LF_data['E3_Fz'] + C7T1_LF_data['E4_Fz'] + C7T1_LF_data['E5_Fz'] + C7T1_LF_data['E6_Fz'] + C7T1_LF_data['E7_Fz'] + C7T1_LF_data['E8_Fz']
C7T1_LF_data['C7T1_LF_stretch'] = (C7T1_LF_data['E1_stretch'] + C7T1_LF_data['E2_stretch'] + C7T1_LF_data['E3_stretch'] + C7T1_LF_data['E4_stretch'] + C7T1_LF_data['E5_stretch'] + C7T1_LF_data['E6_stretch'] + C7T1_LF_data['E7_stretch'] + C7T1_LF_data['E8_stretch']
                            )/ 8  # AVERAGE
C7T1_LF_data['C7T1_LF_Fres'] = ((C7T1_LF_data['C7T1_LF_Fy'] )**2 + (C7T1_LF_data['C7T1_LF_Fz'] )**2)**0.5

# print(C7T1_LF_data)
C7T1_LF_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'C7T1_PLL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C7T1_PLL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C7T1_PLL_data['C7T1_PLL_Fr'] = (C7T1_PLL_data['E1_Fr'] + C7T1_PLL_data['E2_Fr'] + C7T1_PLL_data['E3_Fr'] +
                                C7T1_PLL_data['E4_Fr']) * -1  # Down & Rearward
C7T1_PLL_data['C7T1_PLL_Fy'] = (C7T1_PLL_data['E1_Fy'] + C7T1_PLL_data['E2_Fy'] + C7T1_PLL_data['E3_Fy'] +
                                C7T1_PLL_data['E4_Fy']) * -1  # Rearward
C7T1_PLL_data['C7T1_PLL_Fz'] = C7T1_PLL_data['E1_Fz'] + C7T1_PLL_data['E2_Fz'] + C7T1_PLL_data['E3_Fz'] + C7T1_PLL_data[
    'E4_Fz']
C7T1_PLL_data['C7T1_PLL_stretch'] = (C7T1_PLL_data['E1_stretch'] + C7T1_PLL_data['E2_stretch'] + C7T1_PLL_data[
    'E3_stretch'] + C7T1_PLL_data['E4_stretch']) / 4  # AVERAGE
C7T1_PLL_data['C7T1_PLL_Fres'] = ((C7T1_PLL_data['C7T1_PLL_Fy'] )**2 + (C7T1_PLL_data['C7T1_PLL_Fz'] )**2)**0.5

# print(C7T1_PLL_data)
C7T1_PLL_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C12_AAAM_results'  # 6 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)

C12_AAAM_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch')
                 ], axis=1)

C12_AAAM_data['C12_AAAM_Fr'] = (C12_AAAM_data['E1_Fr'] + C12_AAAM_data['E2_Fr'] + C12_AAAM_data['E3_Fr'] + C12_AAAM_data['E4_Fr'] + C12_AAAM_data['E5_Fr'] + C12_AAAM_data['E6_Fr']
                     )
C12_AAAM_data['C12_AAAM_Fy'] = (C12_AAAM_data['E1_Fy'] + C12_AAAM_data['E2_Fy'] + C12_AAAM_data['E3_Fy'] + C12_AAAM_data['E4_Fy'] + C12_AAAM_data['E5_Fy'] + C12_AAAM_data['E6_Fy']
                     )*-1 #Rearward
C12_AAAM_data['C12_AAAM_Fz'] = C12_AAAM_data['E1_Fz'] + C12_AAAM_data['E2_Fz'] + C12_AAAM_data['E3_Fz'] + C12_AAAM_data['E4_Fz'] + C12_AAAM_data['E5_Fz'] + C12_AAAM_data['E6_Fz']
C12_AAAM_data['C12_AAAM_stretch'] = (C12_AAAM_data['E1_stretch'] + C12_AAAM_data['E2_stretch'] + C12_AAAM_data['E3_stretch'] + C12_AAAM_data['E4_stretch'] + C12_AAAM_data['E5_stretch'] + C12_AAAM_data['E6_stretch']
                            )/ 6  # AVERAGE
C12_AAAM_data['C12_AAAM_Fres'] = ((C12_AAAM_data['C12_AAAM_Fy'] )**2 + (C12_AAAM_data['C12_AAAM_Fz'] )**2)**0.5

# print(C12_AAAM_data)
C12_AAAM_data.to_csv(path + filename + ".csv")

###########################################################################################################
filename = 'C12_ISL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C12_ISL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C12_ISL_data['C12_ISL_Fr'] = (C12_ISL_data['E1_Fr'] + C12_ISL_data['E2_Fr'] + C12_ISL_data['E3_Fr'] +
                                C12_ISL_data['E4_Fr']) * -1  # Down & Rearward
C12_ISL_data['C12_ISL_Fy'] = (C12_ISL_data['E1_Fy'] + C12_ISL_data['E2_Fy'] + C12_ISL_data['E3_Fy'] +
                                C12_ISL_data['E4_Fy']) * -1  # Rearward
C12_ISL_data['C12_ISL_Fz'] = C12_ISL_data['E1_Fz'] + C12_ISL_data['E2_Fz'] + C12_ISL_data['E3_Fz'] + C12_ISL_data[
    'E4_Fz']
C12_ISL_data['C12_ISL_stretch'] = (C12_ISL_data['E1_stretch'] + C12_ISL_data['E2_stretch'] + C12_ISL_data[
    'E3_stretch'] + C12_ISL_data['E4_stretch']) / 4  # AVERAGE
C12_ISL_data['C12_ISL_Fres'] = ((C12_ISL_data['C12_ISL_Fy'] )**2 + (C12_ISL_data['C12_ISL_Fz'] )**2)**0.5

# print(C12_ISL_data)
C12_ISL_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C12_JC_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
C12_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch')
                  ], axis=1)

C12_JC_data['C12_JC_Fr'] = (C12_JC_data['E1_Fr'] + C12_JC_data['E2_Fr'] + C12_JC_data['E3_Fr'] + C12_JC_data['E4_Fr'] + C12_JC_data['E5_Fr'] + C12_JC_data['E6_Fr'] + C12_JC_data['E7_Fr'] + C12_JC_data['E8_Fr'] + C12_JC_data['E9_Fr'] + C12_JC_data['E10_Fr'] + C12_JC_data['E11_Fr'] + C12_JC_data['E12_Fr'] + C12_JC_data['E13_Fr'] + C12_JC_data['E14_Fr'] + C12_JC_data['E15_Fr'] + C12_JC_data['E16_Fr']
                     )
C12_JC_data['C12_JC_Fy'] = (C12_JC_data['E1_Fy'] + C12_JC_data['E2_Fy'] + C12_JC_data['E3_Fy'] + C12_JC_data['E4_Fy'] + C12_JC_data['E5_Fy'] + C12_JC_data['E6_Fy'] + C12_JC_data['E7_Fy'] + C12_JC_data['E8_Fy'] + C12_JC_data['E9_Fy'] + C12_JC_data['E10_Fy'] + C12_JC_data['E11_Fy'] + C12_JC_data['E12_Fy'] + C12_JC_data['E13_Fy'] + C12_JC_data['E14_Fy'] + C12_JC_data['E15_Fy'] + C12_JC_data['E16_Fy']
                     )*-1 #Rearward
C12_JC_data['C12_JC_Fz'] = C12_JC_data['E1_Fz'] + C12_JC_data['E2_Fz'] + C12_JC_data['E3_Fz'] + C12_JC_data['E4_Fz'] + C12_JC_data['E5_Fz'] + C12_JC_data['E6_Fz'] + C12_JC_data['E7_Fz'] + C12_JC_data['E8_Fz'] + C12_JC_data['E9_Fz'] + C12_JC_data['E10_Fz'] + C12_JC_data['E11_Fz'] + C12_JC_data['E12_Fz'] + C12_JC_data['E13_Fz'] + C12_JC_data['E14_Fz'] + C12_JC_data['E15_Fz'] + C12_JC_data['E16_Fz']
C12_JC_data['C12_JC_stretch'] = (C12_JC_data['E1_stretch'] + C12_JC_data['E2_stretch'] + C12_JC_data['E3_stretch'] + C12_JC_data['E4_stretch'] + C12_JC_data['E5_stretch'] + C12_JC_data['E6_stretch'] + C12_JC_data['E7_stretch'] + C12_JC_data['E8_stretch'] + C12_JC_data['E9_stretch'] + C12_JC_data['E10_stretch'] + C12_JC_data['E11_stretch'] + C12_JC_data['E12_stretch'] + C12_JC_data['E13_stretch'] + C12_JC_data['E14_stretch'] + C12_JC_data['E15_stretch'] + C12_JC_data['E16_stretch']
                            )/ 16  # AVERAGE
C12_JC_data['C12_JC_Fres'] = ((C12_JC_data['C12_JC_Fy'] )**2 + (C12_JC_data['C12_JC_Fz'] )**2)**0.5

# print(C12_JC_data)
C12_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C12_PAAM_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

C12_PAAM_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                  ], axis=1)

C12_PAAM_data['C12_PAAM_Fr'] = (C12_PAAM_data['E1_Fr'] + C12_PAAM_data['E2_Fr'] + C12_PAAM_data['E3_Fr'] + C12_PAAM_data['E4_Fr'] + C12_PAAM_data['E5_Fr'] + C12_PAAM_data['E6_Fr'] + C12_PAAM_data['E7_Fr'] + C12_PAAM_data['E8_Fr']
                     )
C12_PAAM_data['C12_PAAM_Fy'] = (C12_PAAM_data['E1_Fy'] + C12_PAAM_data['E2_Fy'] + C12_PAAM_data['E3_Fy'] + C12_PAAM_data['E4_Fy'] + C12_PAAM_data['E5_Fy'] + C12_PAAM_data['E6_Fy'] + C12_PAAM_data['E7_Fy'] + C12_PAAM_data['E8_Fy']
                     )*-1 #Rearward
C12_PAAM_data['C12_PAAM_Fz'] = C12_PAAM_data['E1_Fz'] + C12_PAAM_data['E2_Fz'] + C12_PAAM_data['E3_Fz'] + C12_PAAM_data['E4_Fz'] + C12_PAAM_data['E5_Fz'] + C12_PAAM_data['E6_Fz'] + C12_PAAM_data['E7_Fz'] + C12_PAAM_data['E8_Fz']
C12_PAAM_data['C12_PAAM_stretch'] = (C12_PAAM_data['E1_stretch'] + C12_PAAM_data['E2_stretch'] + C12_PAAM_data['E3_stretch'] + C12_PAAM_data['E4_stretch'] + C12_PAAM_data['E5_stretch'] + C12_PAAM_data['E6_stretch'] + C12_PAAM_data['E7_stretch'] + C12_PAAM_data['E8_stretch']
                            )/ 8  # AVERAGE
C12_PAAM_data['C12_PAAM_Fres'] = ((C12_PAAM_data['C12_PAAM_Fy'] )**2 + (C12_PAAM_data['C12_PAAM_Fz'] )**2)**0.5

# print(C12_PAAM_data)
C12_PAAM_data.to_csv(path + filename + ".csv")

###########################################################################################################
filename = 'C12_TL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C12_TL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C12_TL_data['C12_TL_Fr'] = (C12_TL_data['E1_Fr'] + C12_TL_data['E2_Fr'] + C12_TL_data['E3_Fr'] +
                                C12_TL_data['E4_Fr']) * -1  # Down & Rearward
C12_TL_data['C12_TL_Fy'] = (C12_TL_data['E1_Fy'] + C12_TL_data['E2_Fy'] + C12_TL_data['E3_Fy'] +
                                C12_TL_data['E4_Fy']) * -1  # Rearward
C12_TL_data['C12_TL_Fz'] = C12_TL_data['E1_Fz'] + C12_TL_data['E2_Fz'] + C12_TL_data['E3_Fz'] + C12_TL_data[
    'E4_Fz']
C12_TL_data['C12_TL_stretch'] = (C12_TL_data['E1_stretch'] + C12_TL_data['E2_stretch'] + C12_TL_data[
    'E3_stretch'] + C12_TL_data['E4_stretch']) / 4  # AVERAGE
C12_TL_data['C12_TL_Fres'] = ((C12_TL_data['C12_TL_Fy'] )**2 + (C12_TL_data['C12_TL_Fz'] )**2)**0.5

# print(C12_TL_data)
C12_TL_data.to_csv(path + filename + ".csv")
###########################################################################################################



###########################################################################################################

filename = 'C23_ALL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C23_ALL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C23_ALL_data['C23_ALL_Fr'] = (C23_ALL_data['E1_Fr'] + C23_ALL_data['E2_Fr'] + C23_ALL_data['E3_Fr'] +
                                C23_ALL_data['E4_Fr']) * -1  # Down & Rearward
C23_ALL_data['C23_ALL_Fy'] = (C23_ALL_data['E1_Fy'] + C23_ALL_data['E2_Fy'] + C23_ALL_data['E3_Fy'] +
                                C23_ALL_data['E4_Fy']) * -1  # Rearward
C23_ALL_data['C23_ALL_Fz'] = C23_ALL_data['E1_Fz'] + C23_ALL_data['E2_Fz'] + C23_ALL_data['E3_Fz'] + C23_ALL_data[
    'E4_Fz']
C23_ALL_data['C23_ALL_stretch'] = (C23_ALL_data['E1_stretch'] + C23_ALL_data['E2_stretch'] + C23_ALL_data[
    'E3_stretch'] + C23_ALL_data['E4_stretch']) / 4  # AVERAGE
C23_ALL_data['C23_ALL_Fres'] = ((C23_ALL_data['C23_ALL_Fy'] )**2 + (C23_ALL_data['C23_ALL_Fz'] )**2)**0.5

# print(C23_ALL_data)
C23_ALL_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C23_ISL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C23_ISL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C23_ISL_data['C23_ISL_Fr'] = (C23_ISL_data['E1_Fr'] + C23_ISL_data['E2_Fr'] + C23_ISL_data['E3_Fr'] +
                                C23_ISL_data['E4_Fr']) * -1  # Down & Rearward
C23_ISL_data['C23_ISL_Fy'] = (C23_ISL_data['E1_Fy'] + C23_ISL_data['E2_Fy'] + C23_ISL_data['E3_Fy'] +
                                C23_ISL_data['E4_Fy']) * -1  # Rearward
C23_ISL_data['C23_ISL_Fz'] = C23_ISL_data['E1_Fz'] + C23_ISL_data['E2_Fz'] + C23_ISL_data['E3_Fz'] + C23_ISL_data[
    'E4_Fz']
C23_ISL_data['C23_ISL_stretch'] = (C23_ISL_data['E1_stretch'] + C23_ISL_data['E2_stretch'] + C23_ISL_data[
    'E3_stretch'] + C23_ISL_data['E4_stretch']) / 4  # AVERAGE
C23_ISL_data['C23_ISL_Fres'] = ((C23_ISL_data['C23_ISL_Fy'] )**2 + (C23_ISL_data['C23_ISL_Fz'] )**2)**0.5

# print(C23_ISL_data)
C23_ISL_data.to_csv(path + filename + ".csv")


###########################################################################################################

filename = 'C23_JC_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
C23_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch')
                  ], axis=1)

C23_JC_data['C23_JC_Fr'] = (C23_JC_data['E1_Fr'] + C23_JC_data['E2_Fr'] + C23_JC_data['E3_Fr'] + C23_JC_data['E4_Fr'] + C23_JC_data['E5_Fr'] + C23_JC_data['E6_Fr'] + C23_JC_data['E7_Fr'] + C23_JC_data['E8_Fr'] + C23_JC_data['E9_Fr'] + C23_JC_data['E10_Fr'] + C23_JC_data['E11_Fr'] + C23_JC_data['E12_Fr'] + C23_JC_data['E13_Fr'] + C23_JC_data['E14_Fr'] + C23_JC_data['E15_Fr'] + C23_JC_data['E16_Fr']
                     )
C23_JC_data['C23_JC_Fy'] = (C23_JC_data['E1_Fy'] + C23_JC_data['E2_Fy'] + C23_JC_data['E3_Fy'] + C23_JC_data['E4_Fy'] + C23_JC_data['E5_Fy'] + C23_JC_data['E6_Fy'] + C23_JC_data['E7_Fy'] + C23_JC_data['E8_Fy'] + C23_JC_data['E9_Fy'] + C23_JC_data['E10_Fy'] + C23_JC_data['E11_Fy'] + C23_JC_data['E12_Fy'] + C23_JC_data['E13_Fy'] + C23_JC_data['E14_Fy'] + C23_JC_data['E15_Fy'] + C23_JC_data['E16_Fy']
                     )*-1 #Rearward
C23_JC_data['C23_JC_Fz'] = C23_JC_data['E1_Fz'] + C23_JC_data['E2_Fz'] + C23_JC_data['E3_Fz'] + C23_JC_data['E4_Fz'] + C23_JC_data['E5_Fz'] + C23_JC_data['E6_Fz'] + C23_JC_data['E7_Fz'] + C23_JC_data['E8_Fz'] + C23_JC_data['E9_Fz'] + C23_JC_data['E10_Fz'] + C23_JC_data['E11_Fz'] + C23_JC_data['E12_Fz'] + C23_JC_data['E13_Fz'] + C23_JC_data['E14_Fz'] + C23_JC_data['E15_Fz'] + C23_JC_data['E16_Fz']
C23_JC_data['C23_JC_stretch'] = (C23_JC_data['E1_stretch'] + C23_JC_data['E2_stretch'] + C23_JC_data['E3_stretch'] + C23_JC_data['E4_stretch'] + C23_JC_data['E5_stretch'] + C23_JC_data['E6_stretch'] + C23_JC_data['E7_stretch'] + C23_JC_data['E8_stretch'] + C23_JC_data['E9_stretch'] + C23_JC_data['E10_stretch'] + C23_JC_data['E11_stretch'] + C23_JC_data['E12_stretch'] + C23_JC_data['E13_stretch'] + C23_JC_data['E14_stretch'] + C23_JC_data['E15_stretch'] + C23_JC_data['E16_stretch']
                            )/ 16  # AVERAGE
C23_JC_data['C23_JC_Fres'] = ((C23_JC_data['C23_JC_Fy'] )**2 + (C23_JC_data['C23_JC_Fz'] )**2)**0.5

# print(C23_JC_data)
C23_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C23_LF_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

C23_LF_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                  ], axis=1)

C23_LF_data['C23_LF_Fr'] = (C23_LF_data['E1_Fr'] + C23_LF_data['E2_Fr'] + C23_LF_data['E3_Fr'] + C23_LF_data['E4_Fr'] + C23_LF_data['E5_Fr'] + C23_LF_data['E6_Fr'] + C23_LF_data['E7_Fr'] + C23_LF_data['E8_Fr']
                     )
C23_LF_data['C23_LF_Fy'] = (C23_LF_data['E1_Fy'] + C23_LF_data['E2_Fy'] + C23_LF_data['E3_Fy'] + C23_LF_data['E4_Fy'] + C23_LF_data['E5_Fy'] + C23_LF_data['E6_Fy'] + C23_LF_data['E7_Fy'] + C23_LF_data['E8_Fy']
                     )*-1 #Rearward
C23_LF_data['C23_LF_Fz'] = C23_LF_data['E1_Fz'] + C23_LF_data['E2_Fz'] + C23_LF_data['E3_Fz'] + C23_LF_data['E4_Fz'] + C23_LF_data['E5_Fz'] + C23_LF_data['E6_Fz'] + C23_LF_data['E7_Fz'] + C23_LF_data['E8_Fz']
C23_LF_data['C23_LF_stretch'] = (C23_LF_data['E1_stretch'] + C23_LF_data['E2_stretch'] + C23_LF_data['E3_stretch'] + C23_LF_data['E4_stretch'] + C23_LF_data['E5_stretch'] + C23_LF_data['E6_stretch'] + C23_LF_data['E7_stretch'] + C23_LF_data['E8_stretch']
                            )/ 8  # AVERAGE
C23_LF_data['C23_LF_Fres'] = ((C23_LF_data['C23_LF_Fy'] )**2 + (C23_LF_data['C23_LF_Fz'] )**2)**0.5

# print(C23_LF_data)
C23_LF_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'C23_PLL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C23_PLL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C23_PLL_data['C23_PLL_Fr'] = (C23_PLL_data['E1_Fr'] + C23_PLL_data['E2_Fr'] + C23_PLL_data['E3_Fr'] +
                                C23_PLL_data['E4_Fr']) * -1  # Down & Rearward
C23_PLL_data['C23_PLL_Fy'] = (C23_PLL_data['E1_Fy'] + C23_PLL_data['E2_Fy'] + C23_PLL_data['E3_Fy'] +
                                C23_PLL_data['E4_Fy']) * -1  # Rearward
C23_PLL_data['C23_PLL_Fz'] = C23_PLL_data['E1_Fz'] + C23_PLL_data['E2_Fz'] + C23_PLL_data['E3_Fz'] + C23_PLL_data[
    'E4_Fz']
C23_PLL_data['C23_PLL_stretch'] = (C23_PLL_data['E1_stretch'] + C23_PLL_data['E2_stretch'] + C23_PLL_data[
    'E3_stretch'] + C23_PLL_data['E4_stretch']) / 4  # AVERAGE
C23_PLL_data['C23_PLL_Fres'] = ((C23_PLL_data['C23_PLL_Fy'] )**2 + (C23_PLL_data['C23_PLL_Fz'] )**2)**0.5

# print(C23_PLL_data)
C23_PLL_data.to_csv(path + filename + ".csv")

###########################################################################################################

###########################################################################################################

filename = 'C34_ALL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C34_ALL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C34_ALL_data['C34_ALL_Fr'] = (C34_ALL_data['E1_Fr'] + C34_ALL_data['E2_Fr'] + C34_ALL_data['E3_Fr'] +
                                C34_ALL_data['E4_Fr']) * -1  # Down & Rearward
C34_ALL_data['C34_ALL_Fy'] = (C34_ALL_data['E1_Fy'] + C34_ALL_data['E2_Fy'] + C34_ALL_data['E3_Fy'] +
                                C34_ALL_data['E4_Fy']) * -1  # Rearward
C34_ALL_data['C34_ALL_Fz'] = C34_ALL_data['E1_Fz'] + C34_ALL_data['E2_Fz'] + C34_ALL_data['E3_Fz'] + C34_ALL_data[
    'E4_Fz']
C34_ALL_data['C34_ALL_stretch'] = (C34_ALL_data['E1_stretch'] + C34_ALL_data['E2_stretch'] + C34_ALL_data[
    'E3_stretch'] + C34_ALL_data['E4_stretch']) / 4  # AVERAGE
C34_ALL_data['C34_ALL_Fres'] = ((C34_ALL_data['C34_ALL_Fy'] )**2 + (C34_ALL_data['C34_ALL_Fz'] )**2)**0.5

# print(C34_ALL_data)
C34_ALL_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C34_ISL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C34_ISL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C34_ISL_data['C34_ISL_Fr'] = (C34_ISL_data['E1_Fr'] + C34_ISL_data['E2_Fr'] + C34_ISL_data['E3_Fr'] +
                                C34_ISL_data['E4_Fr']) * -1  # Down & Rearward
C34_ISL_data['C34_ISL_Fy'] = (C34_ISL_data['E1_Fy'] + C34_ISL_data['E2_Fy'] + C34_ISL_data['E3_Fy'] +
                                C34_ISL_data['E4_Fy']) * -1  # Rearward
C34_ISL_data['C34_ISL_Fz'] = C34_ISL_data['E1_Fz'] + C34_ISL_data['E2_Fz'] + C34_ISL_data['E3_Fz'] + C34_ISL_data[
    'E4_Fz']
C34_ISL_data['C34_ISL_stretch'] = (C34_ISL_data['E1_stretch'] + C34_ISL_data['E2_stretch'] + C34_ISL_data[
    'E3_stretch'] + C34_ISL_data['E4_stretch']) / 4  # AVERAGE
C34_ISL_data['C34_ISL_Fres'] = ((C34_ISL_data['C34_ISL_Fy'] )**2 + (C34_ISL_data['C34_ISL_Fz'] )**2)**0.5

# print(C34_ISL_data)
C34_ISL_data.to_csv(path + filename + ".csv")


###########################################################################################################

filename = 'C34_JC_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
C34_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch')
                  ], axis=1)

C34_JC_data['C34_JC_Fr'] = (C34_JC_data['E1_Fr'] + C34_JC_data['E2_Fr'] + C34_JC_data['E3_Fr'] + C34_JC_data['E4_Fr'] + C34_JC_data['E5_Fr'] + C34_JC_data['E6_Fr'] + C34_JC_data['E7_Fr'] + C34_JC_data['E8_Fr'] + C34_JC_data['E9_Fr'] + C34_JC_data['E10_Fr'] + C34_JC_data['E11_Fr'] + C34_JC_data['E12_Fr'] + C34_JC_data['E13_Fr'] + C34_JC_data['E14_Fr'] + C34_JC_data['E15_Fr'] + C34_JC_data['E16_Fr']
                     )
C34_JC_data['C34_JC_Fy'] = (C34_JC_data['E1_Fy'] + C34_JC_data['E2_Fy'] + C34_JC_data['E3_Fy'] + C34_JC_data['E4_Fy'] + C34_JC_data['E5_Fy'] + C34_JC_data['E6_Fy'] + C34_JC_data['E7_Fy'] + C34_JC_data['E8_Fy'] + C34_JC_data['E9_Fy'] + C34_JC_data['E10_Fy'] + C34_JC_data['E11_Fy'] + C34_JC_data['E12_Fy'] + C34_JC_data['E13_Fy'] + C34_JC_data['E14_Fy'] + C34_JC_data['E15_Fy'] + C34_JC_data['E16_Fy']
                     )*-1 #Rearward
C34_JC_data['C34_JC_Fz'] = C34_JC_data['E1_Fz'] + C34_JC_data['E2_Fz'] + C34_JC_data['E3_Fz'] + C34_JC_data['E4_Fz'] + C34_JC_data['E5_Fz'] + C34_JC_data['E6_Fz'] + C34_JC_data['E7_Fz'] + C34_JC_data['E8_Fz'] + C34_JC_data['E9_Fz'] + C34_JC_data['E10_Fz'] + C34_JC_data['E11_Fz'] + C34_JC_data['E12_Fz'] + C34_JC_data['E13_Fz'] + C34_JC_data['E14_Fz'] + C34_JC_data['E15_Fz'] + C34_JC_data['E16_Fz']
C34_JC_data['C34_JC_stretch'] = (C34_JC_data['E1_stretch'] + C34_JC_data['E2_stretch'] + C34_JC_data['E3_stretch'] + C34_JC_data['E4_stretch'] + C34_JC_data['E5_stretch'] + C34_JC_data['E6_stretch'] + C34_JC_data['E7_stretch'] + C34_JC_data['E8_stretch'] + C34_JC_data['E9_stretch'] + C34_JC_data['E10_stretch'] + C34_JC_data['E11_stretch'] + C34_JC_data['E12_stretch'] + C34_JC_data['E13_stretch'] + C34_JC_data['E14_stretch'] + C34_JC_data['E15_stretch'] + C34_JC_data['E16_stretch']
                            )/ 16  # AVERAGE
C34_JC_data['C34_JC_Fres'] = ((C34_JC_data['C34_JC_Fy'] )**2 + (C34_JC_data['C34_JC_Fz'] )**2)**0.5

# print(C34_JC_data)
C34_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C34_LF_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

C34_LF_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                  ], axis=1)

C34_LF_data['C34_LF_Fr'] = (C34_LF_data['E1_Fr'] + C34_LF_data['E2_Fr'] + C34_LF_data['E3_Fr'] + C34_LF_data['E4_Fr'] + C34_LF_data['E5_Fr'] + C34_LF_data['E6_Fr'] + C34_LF_data['E7_Fr'] + C34_LF_data['E8_Fr']
                     )
C34_LF_data['C34_LF_Fy'] = (C34_LF_data['E1_Fy'] + C34_LF_data['E2_Fy'] + C34_LF_data['E3_Fy'] + C34_LF_data['E4_Fy'] + C34_LF_data['E5_Fy'] + C34_LF_data['E6_Fy'] + C34_LF_data['E7_Fy'] + C34_LF_data['E8_Fy']
                     )*-1 #Rearward
C34_LF_data['C34_LF_Fz'] = C34_LF_data['E1_Fz'] + C34_LF_data['E2_Fz'] + C34_LF_data['E3_Fz'] + C34_LF_data['E4_Fz'] + C34_LF_data['E5_Fz'] + C34_LF_data['E6_Fz'] + C34_LF_data['E7_Fz'] + C34_LF_data['E8_Fz']
C34_LF_data['C34_LF_stretch'] = (C34_LF_data['E1_stretch'] + C34_LF_data['E2_stretch'] + C34_LF_data['E3_stretch'] + C34_LF_data['E4_stretch'] + C34_LF_data['E5_stretch'] + C34_LF_data['E6_stretch'] + C34_LF_data['E7_stretch'] + C34_LF_data['E8_stretch']
                            )/ 8  # AVERAGE
C34_LF_data['C34_LF_Fres'] = ((C34_LF_data['C34_LF_Fy'] )**2 + (C34_LF_data['C34_LF_Fz'] )**2)**0.5

# print(C34_LF_data)
C34_LF_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'C34_PLL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C34_PLL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C34_PLL_data['C34_PLL_Fr'] = (C34_PLL_data['E1_Fr'] + C34_PLL_data['E2_Fr'] + C34_PLL_data['E3_Fr'] +
                                C34_PLL_data['E4_Fr']) * -1  # Down & Rearward
C34_PLL_data['C34_PLL_Fy'] = (C34_PLL_data['E1_Fy'] + C34_PLL_data['E2_Fy'] + C34_PLL_data['E3_Fy'] +
                                C34_PLL_data['E4_Fy']) * -1  # Rearward
C34_PLL_data['C34_PLL_Fz'] = C34_PLL_data['E1_Fz'] + C34_PLL_data['E2_Fz'] + C34_PLL_data['E3_Fz'] + C34_PLL_data[
    'E4_Fz']
C34_PLL_data['C34_PLL_stretch'] = (C34_PLL_data['E1_stretch'] + C34_PLL_data['E2_stretch'] + C34_PLL_data[
    'E3_stretch'] + C34_PLL_data['E4_stretch']) / 4  # AVERAGE
C34_PLL_data['C34_PLL_Fres'] = ((C34_PLL_data['C34_PLL_Fy'] )**2 + (C34_PLL_data['C34_PLL_Fz'] )**2)**0.5

# print(C34_PLL_data)
C34_PLL_data.to_csv(path + filename + ".csv")

###########################################################################################################

###########################################################################################################

filename = 'C45_ALL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C45_ALL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C45_ALL_data['C45_ALL_Fr'] = (C45_ALL_data['E1_Fr'] + C45_ALL_data['E2_Fr'] + C45_ALL_data['E3_Fr'] +
                                C45_ALL_data['E4_Fr']) * -1  # Down & Rearward
C45_ALL_data['C45_ALL_Fy'] = (C45_ALL_data['E1_Fy'] + C45_ALL_data['E2_Fy'] + C45_ALL_data['E3_Fy'] +
                                C45_ALL_data['E4_Fy']) * -1  # Rearward
C45_ALL_data['C45_ALL_Fz'] = C45_ALL_data['E1_Fz'] + C45_ALL_data['E2_Fz'] + C45_ALL_data['E3_Fz'] + C45_ALL_data[
    'E4_Fz']
C45_ALL_data['C45_ALL_stretch'] = (C45_ALL_data['E1_stretch'] + C45_ALL_data['E2_stretch'] + C45_ALL_data[
    'E3_stretch'] + C45_ALL_data['E4_stretch']) / 4  # AVERAGE
C45_ALL_data['C45_ALL_Fres'] = ((C45_ALL_data['C45_ALL_Fy'] )**2 + (C45_ALL_data['C45_ALL_Fz'] )**2)**0.5

# print(C45_ALL_data)
C45_ALL_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C45_ISL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C45_ISL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C45_ISL_data['C45_ISL_Fr'] = (C45_ISL_data['E1_Fr'] + C45_ISL_data['E2_Fr'] + C45_ISL_data['E3_Fr'] +
                                C45_ISL_data['E4_Fr']) * -1  # Down & Rearward
C45_ISL_data['C45_ISL_Fy'] = (C45_ISL_data['E1_Fy'] + C45_ISL_data['E2_Fy'] + C45_ISL_data['E3_Fy'] +
                                C45_ISL_data['E4_Fy']) * -1  # Rearward
C45_ISL_data['C45_ISL_Fz'] = C45_ISL_data['E1_Fz'] + C45_ISL_data['E2_Fz'] + C45_ISL_data['E3_Fz'] + C45_ISL_data[
    'E4_Fz']
C45_ISL_data['C45_ISL_stretch'] = (C45_ISL_data['E1_stretch'] + C45_ISL_data['E2_stretch'] + C45_ISL_data[
    'E3_stretch'] + C45_ISL_data['E4_stretch']) / 4  # AVERAGE
C45_ISL_data['C45_ISL_Fres'] = ((C45_ISL_data['C45_ISL_Fy'] )**2 + (C45_ISL_data['C45_ISL_Fz'] )**2)**0.5

# print(C45_ISL_data)
C45_ISL_data.to_csv(path + filename + ".csv")


###########################################################################################################

filename = 'C45_JC_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
C45_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch')
                  ], axis=1)

C45_JC_data['C45_JC_Fr'] = (C45_JC_data['E1_Fr'] + C45_JC_data['E2_Fr'] + C45_JC_data['E3_Fr'] + C45_JC_data['E4_Fr'] + C45_JC_data['E5_Fr'] + C45_JC_data['E6_Fr'] + C45_JC_data['E7_Fr'] + C45_JC_data['E8_Fr'] + C45_JC_data['E9_Fr'] + C45_JC_data['E10_Fr'] + C45_JC_data['E11_Fr'] + C45_JC_data['E12_Fr'] + C45_JC_data['E13_Fr'] + C45_JC_data['E14_Fr'] + C45_JC_data['E15_Fr'] + C45_JC_data['E16_Fr']
                     )
C45_JC_data['C45_JC_Fy'] = (C45_JC_data['E1_Fy'] + C45_JC_data['E2_Fy'] + C45_JC_data['E3_Fy'] + C45_JC_data['E4_Fy'] + C45_JC_data['E5_Fy'] + C45_JC_data['E6_Fy'] + C45_JC_data['E7_Fy'] + C45_JC_data['E8_Fy'] + C45_JC_data['E9_Fy'] + C45_JC_data['E10_Fy'] + C45_JC_data['E11_Fy'] + C45_JC_data['E12_Fy'] + C45_JC_data['E13_Fy'] + C45_JC_data['E14_Fy'] + C45_JC_data['E15_Fy'] + C45_JC_data['E16_Fy']
                     )*-1 #Rearward
C45_JC_data['C45_JC_Fz'] = C45_JC_data['E1_Fz'] + C45_JC_data['E2_Fz'] + C45_JC_data['E3_Fz'] + C45_JC_data['E4_Fz'] + C45_JC_data['E5_Fz'] + C45_JC_data['E6_Fz'] + C45_JC_data['E7_Fz'] + C45_JC_data['E8_Fz'] + C45_JC_data['E9_Fz'] + C45_JC_data['E10_Fz'] + C45_JC_data['E11_Fz'] + C45_JC_data['E12_Fz'] + C45_JC_data['E13_Fz'] + C45_JC_data['E14_Fz'] + C45_JC_data['E15_Fz'] + C45_JC_data['E16_Fz']
C45_JC_data['C45_JC_stretch'] = (C45_JC_data['E1_stretch'] + C45_JC_data['E2_stretch'] + C45_JC_data['E3_stretch'] + C45_JC_data['E4_stretch'] + C45_JC_data['E5_stretch'] + C45_JC_data['E6_stretch'] + C45_JC_data['E7_stretch'] + C45_JC_data['E8_stretch'] + C45_JC_data['E9_stretch'] + C45_JC_data['E10_stretch'] + C45_JC_data['E11_stretch'] + C45_JC_data['E12_stretch'] + C45_JC_data['E13_stretch'] + C45_JC_data['E14_stretch'] + C45_JC_data['E15_stretch'] + C45_JC_data['E16_stretch']
                            )/ 16  # AVERAGE
C45_JC_data['C45_JC_Fres'] = ((C45_JC_data['C45_JC_Fy'] )**2 + (C45_JC_data['C45_JC_Fz'] )**2)**0.5

# print(C45_JC_data)
C45_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C45_LF_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)

C45_LF_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element1_Fr, name='E9_Fr'), pd.Series(element1_Fy, name='E9_Fy'), pd.Series(element1_Fz, name='E9_Fz'), pd.Series(element1_stretch, name='E9_stretch'),
                  pd.Series(element2_Fr, name='E10_Fr'), pd.Series(element2_Fy, name='E10_Fy'), pd.Series(element2_Fz, name='E10_Fz'), pd.Series(element2_stretch, name='E10_stretch'),
                  pd.Series(element3_Fr, name='E11_Fr'), pd.Series(element3_Fy, name='E11_Fy'), pd.Series(element3_Fz, name='E11_Fz'), pd.Series(element3_stretch, name='E11_stretch'),
                  pd.Series(element4_Fr, name='E12_Fr'), pd.Series(element4_Fy, name='E12_Fy'), pd.Series(element4_Fz, name='E12_Fz'), pd.Series(element4_stretch, name='E12_stretch'),
                  pd.Series(element5_Fr, name='E13_Fr'), pd.Series(element5_Fy, name='E13_Fy'), pd.Series(element5_Fz, name='E13_Fz'), pd.Series(element5_stretch, name='E13_stretch'),
                  pd.Series(element6_Fr, name='E14_Fr'), pd.Series(element6_Fy, name='E14_Fy'), pd.Series(element6_Fz, name='E14_Fz'), pd.Series(element6_stretch, name='E14_stretch'),
                  pd.Series(element7_Fr, name='E15_Fr'), pd.Series(element7_Fy, name='E15_Fy'), pd.Series(element7_Fz, name='E15_Fz'), pd.Series(element7_stretch, name='E15_stretch'),
                  pd.Series(element8_Fr, name='E16_Fr'), pd.Series(element8_Fy, name='E16_Fy'), pd.Series(element8_Fz, name='E16_Fz'), pd.Series(element8_stretch, name='E16_stretch')

                  ], axis=1)

C45_LF_data['C45_LF_Fr'] = (C45_LF_data['E1_Fr'] + C45_LF_data['E2_Fr'] + C45_LF_data['E3_Fr'] + C45_LF_data['E4_Fr'] + C45_LF_data['E5_Fr'] + C45_LF_data['E6_Fr'] + C45_LF_data['E7_Fr'] + C45_LF_data['E8_Fr'] +
C45_LF_data['E9_Fr'] + C45_LF_data['E10_Fr'] + C45_LF_data['E11_Fr'] + C45_LF_data['E12_Fr'] + C45_LF_data['E13_Fr'] +  C45_LF_data['E14_Fr'] + C45_LF_data['E15_Fr'] + C45_LF_data['E16_Fr']
 )
C45_LF_data['C45_LF_Fy'] = (C45_LF_data['E1_Fy'] + C45_LF_data['E2_Fy'] + C45_LF_data['E3_Fy'] + C45_LF_data['E4_Fy'] + C45_LF_data['E5_Fy'] + C45_LF_data['E6_Fy'] + C45_LF_data['E7_Fy'] + C45_LF_data['E8_Fy'] +
C45_LF_data['E9_Fy'] + C45_LF_data['E10_Fy'] + C45_LF_data['E11_Fy'] + C45_LF_data['E12_Fy'] + C45_LF_data['E13_Fy'] +  C45_LF_data['E14_Fy'] + C45_LF_data['E15_Fy'] + C45_LF_data['E16_Fy']
 )*-1
C45_LF_data['C45_LF_Fz'] = (C45_LF_data['E1_Fz'] + C45_LF_data['E2_Fz'] + C45_LF_data['E3_Fz'] + C45_LF_data['E4_Fz'] + C45_LF_data['E5_Fz'] + C45_LF_data['E6_Fz'] + C45_LF_data['E7_Fz'] + C45_LF_data['E8_Fz'] +
C45_LF_data['E9_Fz'] + C45_LF_data['E10_Fz'] + C45_LF_data['E11_Fz'] + C45_LF_data['E12_Fz'] + C45_LF_data['E13_Fz'] +  C45_LF_data['E14_Fz'] + C45_LF_data['E15_Fz'] + C45_LF_data['E16_Fz']
 )
C45_LF_data['C45_LF_stretch'] = (C45_LF_data['E1_stretch'] + C45_LF_data['E2_stretch'] + C45_LF_data['E3_stretch'] + C45_LF_data['E4_stretch'] + C45_LF_data['E5_stretch'] + C45_LF_data['E6_stretch'] + C45_LF_data['E7_stretch'] + C45_LF_data['E8_stretch'] +
C45_LF_data['E9_stretch'] + C45_LF_data['E10_stretch'] + C45_LF_data['E11_stretch'] + C45_LF_data['E12_stretch'] + C45_LF_data['E13_stretch'] +  C45_LF_data['E14_stretch'] + C45_LF_data['E15_stretch'] + C45_LF_data['E16_stretch']
 )/ 16  # AVERAGE

C45_LF_data['C45_LF_Fres'] = ((C45_LF_data['C45_LF_Fy'] )**2 + (C45_LF_data['C45_LF_Fz'] )**2)**0.5

# print(C45_LF_data)
C45_LF_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'C45_PLL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C45_PLL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C45_PLL_data['C45_PLL_Fr'] = (C45_PLL_data['E1_Fr'] + C45_PLL_data['E2_Fr'] + C45_PLL_data['E3_Fr'] +
                                C45_PLL_data['E4_Fr']) * -1  # Down & Rearward
C45_PLL_data['C45_PLL_Fy'] = (C45_PLL_data['E1_Fy'] + C45_PLL_data['E2_Fy'] + C45_PLL_data['E3_Fy'] +
                                C45_PLL_data['E4_Fy']) * -1  # Rearward
C45_PLL_data['C45_PLL_Fz'] = C45_PLL_data['E1_Fz'] + C45_PLL_data['E2_Fz'] + C45_PLL_data['E3_Fz'] + C45_PLL_data[
    'E4_Fz']
C45_PLL_data['C45_PLL_stretch'] = (C45_PLL_data['E1_stretch'] + C45_PLL_data['E2_stretch'] + C45_PLL_data[
    'E3_stretch'] + C45_PLL_data['E4_stretch']) / 4  # AVERAGE
C45_PLL_data['C45_PLL_Fres'] = ((C45_PLL_data['C45_PLL_Fy'] )**2 + (C45_PLL_data['C45_PLL_Fz'] )**2)**0.5

print(C45_PLL_data)
C45_PLL_data.to_csv(path + filename + ".csv")

###########################################################################################################

###########################################################################################################

filename = 'C56_ALL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C56_ALL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C56_ALL_data['C56_ALL_Fr'] = (C56_ALL_data['E1_Fr'] + C56_ALL_data['E2_Fr'] + C56_ALL_data['E3_Fr'] +
                                C56_ALL_data['E4_Fr']) * -1  # Down & Rearward
C56_ALL_data['C56_ALL_Fy'] = (C56_ALL_data['E1_Fy'] + C56_ALL_data['E2_Fy'] + C56_ALL_data['E3_Fy'] +
                                C56_ALL_data['E4_Fy']) * -1  # Rearward
C56_ALL_data['C56_ALL_Fz'] = C56_ALL_data['E1_Fz'] + C56_ALL_data['E2_Fz'] + C56_ALL_data['E3_Fz'] + C56_ALL_data[
    'E4_Fz']
C56_ALL_data['C56_ALL_stretch'] = (C56_ALL_data['E1_stretch'] + C56_ALL_data['E2_stretch'] + C56_ALL_data[
    'E3_stretch'] + C56_ALL_data['E4_stretch']) / 4  # AVERAGE
C56_ALL_data['C56_ALL_Fres'] = ((C56_ALL_data['C56_ALL_Fy'] )**2 + (C56_ALL_data['C56_ALL_Fz'] )**2)**0.5

# print(C56_ALL_data)
C56_ALL_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C56_ISL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C56_ISL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C56_ISL_data['C56_ISL_Fr'] = (C56_ISL_data['E1_Fr'] + C56_ISL_data['E2_Fr'] + C56_ISL_data['E3_Fr'] +
                                C56_ISL_data['E4_Fr']) * -1  # Down & Rearward
C56_ISL_data['C56_ISL_Fy'] = (C56_ISL_data['E1_Fy'] + C56_ISL_data['E2_Fy'] + C56_ISL_data['E3_Fy'] +
                                C56_ISL_data['E4_Fy']) * -1  # Rearward
C56_ISL_data['C56_ISL_Fz'] = C56_ISL_data['E1_Fz'] + C56_ISL_data['E2_Fz'] + C56_ISL_data['E3_Fz'] + C56_ISL_data[
    'E4_Fz']
C56_ISL_data['C56_ISL_stretch'] = (C56_ISL_data['E1_stretch'] + C56_ISL_data['E2_stretch'] + C56_ISL_data[
    'E3_stretch'] + C56_ISL_data['E4_stretch']) / 4  # AVERAGE
C56_ISL_data['C56_ISL_Fres'] = ((C56_ISL_data['C56_ISL_Fy'] )**2 + (C56_ISL_data['C56_ISL_Fz'] )**2)**0.5

# print(C56_ISL_data)
C56_ISL_data.to_csv(path + filename + ".csv")


###########################################################################################################

filename = 'C56_JC_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
C56_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch')
                  ], axis=1)

C56_JC_data['C56_JC_Fr'] = (C56_JC_data['E1_Fr'] + C56_JC_data['E2_Fr'] + C56_JC_data['E3_Fr'] + C56_JC_data['E4_Fr'] + C56_JC_data['E5_Fr'] + C56_JC_data['E6_Fr'] + C56_JC_data['E7_Fr'] + C56_JC_data['E8_Fr'] + C56_JC_data['E9_Fr'] + C56_JC_data['E10_Fr'] + C56_JC_data['E11_Fr'] + C56_JC_data['E12_Fr'] + C56_JC_data['E13_Fr'] + C56_JC_data['E14_Fr'] + C56_JC_data['E15_Fr'] + C56_JC_data['E16_Fr']
                     )
C56_JC_data['C56_JC_Fy'] = (C56_JC_data['E1_Fy'] + C56_JC_data['E2_Fy'] + C56_JC_data['E3_Fy'] + C56_JC_data['E4_Fy'] + C56_JC_data['E5_Fy'] + C56_JC_data['E6_Fy'] + C56_JC_data['E7_Fy'] + C56_JC_data['E8_Fy'] + C56_JC_data['E9_Fy'] + C56_JC_data['E10_Fy'] + C56_JC_data['E11_Fy'] + C56_JC_data['E12_Fy'] + C56_JC_data['E13_Fy'] + C56_JC_data['E14_Fy'] + C56_JC_data['E15_Fy'] + C56_JC_data['E16_Fy']
                     )*-1 #Rearward
C56_JC_data['C56_JC_Fz'] = C56_JC_data['E1_Fz'] + C56_JC_data['E2_Fz'] + C56_JC_data['E3_Fz'] + C56_JC_data['E4_Fz'] + C56_JC_data['E5_Fz'] + C56_JC_data['E6_Fz'] + C56_JC_data['E7_Fz'] + C56_JC_data['E8_Fz'] + C56_JC_data['E9_Fz'] + C56_JC_data['E10_Fz'] + C56_JC_data['E11_Fz'] + C56_JC_data['E12_Fz'] + C56_JC_data['E13_Fz'] + C56_JC_data['E14_Fz'] + C56_JC_data['E15_Fz'] + C56_JC_data['E16_Fz']
C56_JC_data['C56_JC_stretch'] = (C56_JC_data['E1_stretch'] + C56_JC_data['E2_stretch'] + C56_JC_data['E3_stretch'] + C56_JC_data['E4_stretch'] + C56_JC_data['E5_stretch'] + C56_JC_data['E6_stretch'] + C56_JC_data['E7_stretch'] + C56_JC_data['E8_stretch'] + C56_JC_data['E9_stretch'] + C56_JC_data['E10_stretch'] + C56_JC_data['E11_stretch'] + C56_JC_data['E12_stretch'] + C56_JC_data['E13_stretch'] + C56_JC_data['E14_stretch'] + C56_JC_data['E15_stretch'] + C56_JC_data['E16_stretch']
                            )/ 16  # AVERAGE
C56_JC_data['C56_JC_Fres'] = ((C56_JC_data['C56_JC_Fy'] )**2 + (C56_JC_data['C56_JC_Fz'] )**2)**0.5

# print(C56_JC_data)
C56_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C56_LF_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

C56_LF_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                  ], axis=1)

C56_LF_data['C56_LF_Fr'] = (C56_LF_data['E1_Fr'] + C56_LF_data['E2_Fr'] + C56_LF_data['E3_Fr'] + C56_LF_data['E4_Fr'] + C56_LF_data['E5_Fr'] + C56_LF_data['E6_Fr'] + C56_LF_data['E7_Fr'] + C56_LF_data['E8_Fr']
                     )
C56_LF_data['C56_LF_Fy'] = (C56_LF_data['E1_Fy'] + C56_LF_data['E2_Fy'] + C56_LF_data['E3_Fy'] + C56_LF_data['E4_Fy'] + C56_LF_data['E5_Fy'] + C56_LF_data['E6_Fy'] + C56_LF_data['E7_Fy'] + C56_LF_data['E8_Fy']
                     )*-1 #Rearward
C56_LF_data['C56_LF_Fz'] = C56_LF_data['E1_Fz'] + C56_LF_data['E2_Fz'] + C56_LF_data['E3_Fz'] + C56_LF_data['E4_Fz'] + C56_LF_data['E5_Fz'] + C56_LF_data['E6_Fz'] + C56_LF_data['E7_Fz'] + C56_LF_data['E8_Fz']
C56_LF_data['C56_LF_stretch'] = (C56_LF_data['E1_stretch'] + C56_LF_data['E2_stretch'] + C56_LF_data['E3_stretch'] + C56_LF_data['E4_stretch'] + C56_LF_data['E5_stretch'] + C56_LF_data['E6_stretch'] + C56_LF_data['E7_stretch'] + C56_LF_data['E8_stretch']
                            )/ 8  # AVERAGE
C56_LF_data['C56_LF_Fres'] = ((C56_LF_data['C56_LF_Fy'] )**2 + (C56_LF_data['C56_LF_Fz'] )**2)**0.5

# print(C56_LF_data)
C56_LF_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'C56_PLL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C56_PLL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C56_PLL_data['C56_PLL_Fr'] = (C56_PLL_data['E1_Fr'] + C56_PLL_data['E2_Fr'] + C56_PLL_data['E3_Fr'] +
                                C56_PLL_data['E4_Fr']) * -1  # Down & Rearward
C56_PLL_data['C56_PLL_Fy'] = (C56_PLL_data['E1_Fy'] + C56_PLL_data['E2_Fy'] + C56_PLL_data['E3_Fy'] +
                                C56_PLL_data['E4_Fy']) * -1  # Rearward
C56_PLL_data['C56_PLL_Fz'] = C56_PLL_data['E1_Fz'] + C56_PLL_data['E2_Fz'] + C56_PLL_data['E3_Fz'] + C56_PLL_data[
    'E4_Fz']
C56_PLL_data['C56_PLL_stretch'] = (C56_PLL_data['E1_stretch'] + C56_PLL_data['E2_stretch'] + C56_PLL_data[
    'E3_stretch'] + C56_PLL_data['E4_stretch']) / 4  # AVERAGE
C56_PLL_data['C56_PLL_Fres'] = ((C56_PLL_data['C56_PLL_Fy'] )**2 + (C56_PLL_data['C56_PLL_Fz'] )**2)**0.5

# print(C56_PLL_data)
C56_PLL_data.to_csv(path + filename + ".csv")

###########################################################################################################
###########################################################################################################

filename = 'C67_ALL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C67_ALL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C67_ALL_data['C67_ALL_Fr'] = (C67_ALL_data['E1_Fr'] + C67_ALL_data['E2_Fr'] + C67_ALL_data['E3_Fr'] +
                                C67_ALL_data['E4_Fr']) * -1  # Down & Rearward
C67_ALL_data['C67_ALL_Fy'] = (C67_ALL_data['E1_Fy'] + C67_ALL_data['E2_Fy'] + C67_ALL_data['E3_Fy'] +
                                C67_ALL_data['E4_Fy']) * -1  # Rearward
C67_ALL_data['C67_ALL_Fz'] = C67_ALL_data['E1_Fz'] + C67_ALL_data['E2_Fz'] + C67_ALL_data['E3_Fz'] + C67_ALL_data[
    'E4_Fz']
C67_ALL_data['C67_ALL_stretch'] = (C67_ALL_data['E1_stretch'] + C67_ALL_data['E2_stretch'] + C67_ALL_data[
    'E3_stretch'] + C67_ALL_data['E4_stretch']) / 4  # AVERAGE
C67_ALL_data['C67_ALL_Fres'] = ((C67_ALL_data['C67_ALL_Fy'] )**2 + (C67_ALL_data['C67_ALL_Fz'] )**2)**0.5

# print(C67_ALL_data)
C67_ALL_data.to_csv(path + filename + ".csv")

###########################################################################################################


filename = 'C67_ISL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C67_ISL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C67_ISL_data['C67_ISL_Fr'] = (C67_ISL_data['E1_Fr'] + C67_ISL_data['E2_Fr'] + C67_ISL_data['E3_Fr'] +
                                C67_ISL_data['E4_Fr']) * -1  # Down & Rearward
C67_ISL_data['C67_ISL_Fy'] = (C67_ISL_data['E1_Fy'] + C67_ISL_data['E2_Fy'] + C67_ISL_data['E3_Fy'] +
                                C67_ISL_data['E4_Fy']) * -1  # Rearward
C67_ISL_data['C67_ISL_Fz'] = C67_ISL_data['E1_Fz'] + C67_ISL_data['E2_Fz'] + C67_ISL_data['E3_Fz'] + C67_ISL_data[
    'E4_Fz']
C67_ISL_data['C67_ISL_stretch'] = (C67_ISL_data['E1_stretch'] + C67_ISL_data['E2_stretch'] + C67_ISL_data[
    'E3_stretch'] + C67_ISL_data['E4_stretch']) / 4  # AVERAGE
C67_ISL_data['C67_ISL_Fres'] = ((C67_ISL_data['C67_ISL_Fy'] )**2 + (C67_ISL_data['C67_ISL_Fz'] )**2)**0.5

# print(C67_ISL_data)
C67_ISL_data.to_csv(path + filename + ".csv")


###########################################################################################################

filename = 'C67_JC_results'  # 16 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
element9_Fr = []
element10_Fr = []
element11_Fr = []
element12_Fr = []
element13_Fr = []
element14_Fr = []
element15_Fr = []
element16_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
element9_Fy = []
element10_Fy = []
element11_Fy = []
element12_Fy = []
element13_Fy = []
element14_Fy = []
element15_Fy = []
element16_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
element9_Fz = []
element10_Fz = []
element11_Fz = []
element12_Fz = []
element13_Fz = []
element14_Fz = []
element15_Fz = []
element16_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []
element9_stretch = []
element10_stretch = []
element11_stretch = []
element12_stretch = []
element13_stretch = []
element14_stretch = []
element15_stretch = []
element16_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        element9 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 8])
        element10 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 9])
        element11 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 10])
        element12 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 11])
        element13 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 12])
        element14 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 13])
        element15 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 14])
        element16 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 15])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        e9_Fr = float(element9[1])
        e9_Fr = round(e9_Fr, 6)
        e9_Fy = float(element9[3])
        e9_Fy = round(e9_Fy, 6)
        e9_Fz = float(element9[4])
        e9_Fz = round(e9_Fz, 6)
        e9_stretch = float(element9[5])
        e9_stretch = round(e9_stretch, 6)

        e10_Fr = float(element10[1])
        e10_Fr = round(e10_Fr, 6)
        e10_Fy = float(element10[3])
        e10_Fy = round(e10_Fy, 6)
        e10_Fz = float(element10[4])
        e10_Fz = round(e10_Fz, 6)
        e10_stretch = float(element10[5])
        e10_stretch = round(e10_stretch, 6)

        e11_Fr = float(element11[1])
        e11_Fr = round(e11_Fr, 6)
        e11_Fy = float(element11[3])
        e11_Fy = round(e11_Fy, 6)
        e11_Fz = float(element11[4])
        e11_Fz = round(e11_Fz, 6)
        e11_stretch = float(element11[5])
        e11_stretch = round(e11_stretch, 6)

        e12_Fr = float(element12[1])
        e12_Fr = round(e12_Fr, 6)
        e12_Fy = float(element12[3])
        e12_Fy = round(e12_Fy, 6)
        e12_Fz = float(element12[4])
        e12_Fz = round(e12_Fz, 6)
        e12_stretch = float(element12[5])
        e12_stretch = round(e12_stretch, 6)

        e13_Fr = float(element13[1])
        e13_Fr = round(e13_Fr, 6)
        e13_Fy = float(element13[3])
        e13_Fy = round(e13_Fy, 6)
        e13_Fz = float(element13[4])
        e13_Fz = round(e13_Fz, 6)
        e13_stretch = float(element13[5])
        e13_stretch = round(e13_stretch, 6)

        e14_Fr = float(element14[1])
        e14_Fr = round(e14_Fr, 6)
        e14_Fy = float(element14[3])
        e14_Fy = round(e14_Fy, 6)
        e14_Fz = float(element14[4])
        e14_Fz = round(e14_Fz, 6)
        e14_stretch = float(element14[5])
        e14_stretch = round(e14_stretch, 6)

        e15_Fr = float(element15[1])
        e15_Fr = round(e15_Fr, 6)
        e15_Fy = float(element15[3])
        e15_Fy = round(e15_Fy, 6)
        e15_Fz = float(element15[4])
        e15_Fz = round(e15_Fz, 6)
        e15_stretch = float(element15[5])
        e15_stretch = round(e15_stretch, 6)

        e16_Fr = float(element16[1])
        e16_Fr = round(e16_Fr, 6)
        e16_Fy = float(element16[3])
        e16_Fy = round(e16_Fy, 6)
        e16_Fz = float(element16[4])
        e16_Fz = round(e16_Fz, 6)
        e16_stretch = float(element16[5])
        e16_stretch = round(e16_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)
        element9_Fr.append(e9_Fr)
        element9_Fy.append(e9_Fy)
        element9_Fz.append(e9_Fz)
        element9_stretch.append(e9_stretch)
        element10_Fr.append(e10_Fr)
        element10_Fy.append(e10_Fy)
        element10_Fz.append(e10_Fz)
        element10_stretch.append(e10_stretch)
        element11_Fr.append(e11_Fr)
        element11_Fy.append(e11_Fy)
        element11_Fz.append(e11_Fz)
        element11_stretch.append(e11_stretch)
        element12_Fr.append(e12_Fr)
        element12_Fy.append(e12_Fy)
        element12_Fz.append(e12_Fz)
        element12_stretch.append(e12_stretch)
        element13_Fr.append(e13_Fr)
        element13_Fy.append(e13_Fy)
        element13_Fz.append(e13_Fz)
        element13_stretch.append(e13_stretch)
        element14_Fr.append(e14_Fr)
        element14_Fy.append(e14_Fy)
        element14_Fz.append(e14_Fz)
        element14_stretch.append(e14_stretch)
        element15_Fr.append(e15_Fr)
        element15_Fy.append(e15_Fy)
        element15_Fz.append(e15_Fz)
        element15_stretch.append(e15_stretch)
        element16_Fr.append(e16_Fr)
        element16_Fy.append(e16_Fy)
        element16_Fz.append(e16_Fz)
        element16_stretch.append(e16_stretch)
C67_JC_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch'),
                  pd.Series(element9_Fr, name='E9_Fr'), pd.Series(element9_Fy, name='E9_Fy'), pd.Series(element9_Fz, name='E9_Fz'), pd.Series(element9_stretch, name='E9_stretch'),
                  pd.Series(element10_Fr, name='E10_Fr'), pd.Series(element10_Fy, name='E10_Fy'), pd.Series(element10_Fz, name='E10_Fz'), pd.Series(element10_stretch, name='E10_stretch'),
                  pd.Series(element11_Fr, name='E11_Fr'), pd.Series(element11_Fy, name='E11_Fy'), pd.Series(element11_Fz, name='E11_Fz'), pd.Series(element11_stretch, name='E11_stretch'),
                  pd.Series(element12_Fr, name='E12_Fr'), pd.Series(element12_Fy, name='E12_Fy'), pd.Series(element12_Fz, name='E12_Fz'), pd.Series(element12_stretch, name='E12_stretch'),
                  pd.Series(element13_Fr, name='E13_Fr'), pd.Series(element13_Fy, name='E13_Fy'), pd.Series(element13_Fz, name='E13_Fz'), pd.Series(element13_stretch, name='E13_stretch'),
                  pd.Series(element14_Fr, name='E14_Fr'), pd.Series(element14_Fy, name='E14_Fy'), pd.Series(element14_Fz, name='E14_Fz'), pd.Series(element14_stretch, name='E14_stretch'),
                  pd.Series(element15_Fr, name='E15_Fr'), pd.Series(element15_Fy, name='E15_Fy'), pd.Series(element15_Fz, name='E15_Fz'), pd.Series(element15_stretch, name='E15_stretch'),
                  pd.Series(element16_Fr, name='E16_Fr'), pd.Series(element16_Fy, name='E16_Fy'), pd.Series(element16_Fz, name='E16_Fz'), pd.Series(element16_stretch, name='E16_stretch')
                  ], axis=1)

C67_JC_data['C67_JC_Fr'] = (C67_JC_data['E1_Fr'] + C67_JC_data['E2_Fr'] + C67_JC_data['E3_Fr'] + C67_JC_data['E4_Fr'] + C67_JC_data['E5_Fr'] + C67_JC_data['E6_Fr'] + C67_JC_data['E7_Fr'] + C67_JC_data['E8_Fr'] + C67_JC_data['E9_Fr'] + C67_JC_data['E10_Fr'] + C67_JC_data['E11_Fr'] + C67_JC_data['E12_Fr'] + C67_JC_data['E13_Fr'] + C67_JC_data['E14_Fr'] + C67_JC_data['E15_Fr'] + C67_JC_data['E16_Fr']
                     )
C67_JC_data['C67_JC_Fy'] = (C67_JC_data['E1_Fy'] + C67_JC_data['E2_Fy'] + C67_JC_data['E3_Fy'] + C67_JC_data['E4_Fy'] + C67_JC_data['E5_Fy'] + C67_JC_data['E6_Fy'] + C67_JC_data['E7_Fy'] + C67_JC_data['E8_Fy'] + C67_JC_data['E9_Fy'] + C67_JC_data['E10_Fy'] + C67_JC_data['E11_Fy'] + C67_JC_data['E12_Fy'] + C67_JC_data['E13_Fy'] + C67_JC_data['E14_Fy'] + C67_JC_data['E15_Fy'] + C67_JC_data['E16_Fy']
                     )*-1 #Rearward
C67_JC_data['C67_JC_Fz'] = C67_JC_data['E1_Fz'] + C67_JC_data['E2_Fz'] + C67_JC_data['E3_Fz'] + C67_JC_data['E4_Fz'] + C67_JC_data['E5_Fz'] + C67_JC_data['E6_Fz'] + C67_JC_data['E7_Fz'] + C67_JC_data['E8_Fz'] + C67_JC_data['E9_Fz'] + C67_JC_data['E10_Fz'] + C67_JC_data['E11_Fz'] + C67_JC_data['E12_Fz'] + C67_JC_data['E13_Fz'] + C67_JC_data['E14_Fz'] + C67_JC_data['E15_Fz'] + C67_JC_data['E16_Fz']
C67_JC_data['C67_JC_stretch'] = (C67_JC_data['E1_stretch'] + C67_JC_data['E2_stretch'] + C67_JC_data['E3_stretch'] + C67_JC_data['E4_stretch'] + C67_JC_data['E5_stretch'] + C67_JC_data['E6_stretch'] + C67_JC_data['E7_stretch'] + C67_JC_data['E8_stretch'] + C67_JC_data['E9_stretch'] + C67_JC_data['E10_stretch'] + C67_JC_data['E11_stretch'] + C67_JC_data['E12_stretch'] + C67_JC_data['E13_stretch'] + C67_JC_data['E14_stretch'] + C67_JC_data['E15_stretch'] + C67_JC_data['E16_stretch']
                            )/ 16  # AVERAGE
C67_JC_data['C67_JC_Fres'] = ((C67_JC_data['C67_JC_Fy'] )**2 + (C67_JC_data['C67_JC_Fz'] )**2)**0.5

# print(C67_JC_data)
C67_JC_data.to_csv(path + filename + ".csv")

###########################################################################################################

filename = 'C67_LF_results'  # 8 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element5_Fr = []
element6_Fr = []
element7_Fr = []
element8_Fr = []
#
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element5_Fy = []
element6_Fy = []
element7_Fy = []
element8_Fy = []
#
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element5_Fz = []
element6_Fz = []
element7_Fz = []
element8_Fz = []
#
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []
element5_stretch = []
element6_stretch = []
element7_stretch = []
element8_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        element5 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 4])
        element6 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 5])
        element7 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 6])
        element8 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 7])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        e5_Fr = float(element5[1])
        e5_Fr = round(e5_Fr, 6)
        e5_Fy = float(element5[3])
        e5_Fy = round(e5_Fy, 6)
        e5_Fz = float(element5[4])
        e5_Fz = round(e5_Fz, 6)
        e5_stretch = float(element5[5])
        e5_stretch = round(e5_stretch, 6)

        e6_Fr = float(element6[1])
        e6_Fr = round(e6_Fr, 6)
        e6_Fy = float(element6[3])
        e6_Fy = round(e6_Fy, 6)
        e6_Fz = float(element6[4])
        e6_Fz = round(e6_Fz, 6)
        e6_stretch = float(element6[5])
        e6_stretch = round(e6_stretch, 6)

        e7_Fr = float(element7[1])
        e7_Fr = round(e7_Fr, 6)
        e7_Fy = float(element7[3])
        e7_Fy = round(e7_Fy, 6)
        e7_Fz = float(element7[4])
        e7_Fz = round(e7_Fz, 6)
        e7_stretch = float(element7[5])
        e7_stretch = round(e7_stretch, 6)

        e8_Fr = float(element8[1])
        e8_Fr = round(e8_Fr, 6)
        e8_Fy = float(element8[3])
        e8_Fy = round(e8_Fy, 6)
        e8_Fz = float(element8[4])
        e8_Fz = round(e8_Fz, 6)
        e8_stretch = float(element8[5])
        e8_stretch = round(e8_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)
        element5_Fr.append(e5_Fr)
        element5_Fy.append(e5_Fy)
        element5_Fz.append(e5_Fz)
        element5_stretch.append(e5_stretch)
        element6_Fr.append(e6_Fr)
        element6_Fy.append(e6_Fy)
        element6_Fz.append(e6_Fz)
        element6_stretch.append(e6_stretch)
        element7_Fr.append(e7_Fr)
        element7_Fy.append(e7_Fy)
        element7_Fz.append(e7_Fz)
        element7_stretch.append(e7_stretch)
        element8_Fr.append(e8_Fr)
        element8_Fy.append(e8_Fy)
        element8_Fz.append(e8_Fz)
        element8_stretch.append(e8_stretch)

C67_LF_data = pd.concat([pd.Series(time, name='Sim_Time_s'),
                  pd.Series(element1_Fr, name='E1_Fr'), pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'), pd.Series(element1_stretch, name='E1_stretch'),
                  pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'), pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                  pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'), pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                  pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'), pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch'),
                  pd.Series(element5_Fr, name='E5_Fr'), pd.Series(element5_Fy, name='E5_Fy'), pd.Series(element5_Fz, name='E5_Fz'), pd.Series(element5_stretch, name='E5_stretch'),
                  pd.Series(element6_Fr, name='E6_Fr'), pd.Series(element6_Fy, name='E6_Fy'), pd.Series(element6_Fz, name='E6_Fz'), pd.Series(element6_stretch, name='E6_stretch'),
                  pd.Series(element7_Fr, name='E7_Fr'), pd.Series(element7_Fy, name='E7_Fy'), pd.Series(element7_Fz, name='E7_Fz'), pd.Series(element7_stretch, name='E7_stretch'),
                  pd.Series(element8_Fr, name='E8_Fr'), pd.Series(element8_Fy, name='E8_Fy'), pd.Series(element8_Fz, name='E8_Fz'), pd.Series(element8_stretch, name='E8_stretch')
                  ], axis=1)

C67_LF_data['C67_LF_Fr'] = (C67_LF_data['E1_Fr'] + C67_LF_data['E2_Fr'] + C67_LF_data['E3_Fr'] + C67_LF_data['E4_Fr'] + C67_LF_data['E5_Fr'] + C67_LF_data['E6_Fr'] + C67_LF_data['E7_Fr'] + C67_LF_data['E8_Fr']
                     )
C67_LF_data['C67_LF_Fy'] = (C67_LF_data['E1_Fy'] + C67_LF_data['E2_Fy'] + C67_LF_data['E3_Fy'] + C67_LF_data['E4_Fy'] + C67_LF_data['E5_Fy'] + C67_LF_data['E6_Fy'] + C67_LF_data['E7_Fy'] + C67_LF_data['E8_Fy']
                     )*-1 #Rearward
C67_LF_data['C67_LF_Fz'] = C67_LF_data['E1_Fz'] + C67_LF_data['E2_Fz'] + C67_LF_data['E3_Fz'] + C67_LF_data['E4_Fz'] + C67_LF_data['E5_Fz'] + C67_LF_data['E6_Fz'] + C67_LF_data['E7_Fz'] + C67_LF_data['E8_Fz']
C67_LF_data['C67_LF_stretch'] = (C67_LF_data['E1_stretch'] + C67_LF_data['E2_stretch'] + C67_LF_data['E3_stretch'] + C67_LF_data['E4_stretch'] + C67_LF_data['E5_stretch'] + C67_LF_data['E6_stretch'] + C67_LF_data['E7_stretch'] + C67_LF_data['E8_stretch']
                            )/ 8  # AVERAGE
C67_LF_data['C67_LF_Fres'] = ((C67_LF_data['C67_LF_Fy'] )**2 + (C67_LF_data['C67_LF_Fz'] )**2)**0.5

# print(C67_LF_data)
C67_LF_data.to_csv(path + filename + ".csv")
###########################################################################################################
filename = 'C67_PLL_results'  # 4 spring elements
with open(path + filename + '.txt') as data:
    lines = data.readlines()

element1_Fr = []
element2_Fr = []
element3_Fr = []
element4_Fr = []
element1_Fy = []
element2_Fy = []
element3_Fy = []
element4_Fy = []
element1_Fz = []
element2_Fz = []
element3_Fz = []
element4_Fz = []
element1_stretch = []
element2_stretch = []
element3_stretch = []
element4_stretch = []

time = []

for i, j in enumerate(lines):
    values = []
    if "Time  = " in j:
        start = i + 2
        timevalues1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start - 2])
        element1 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start])
        element2 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 1])
        element3 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 2])
        element4 = re.findall(r'-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', lines[start + 3])
        timevalues1 = float(timevalues1[0])
        timevalues1 = round(timevalues1, 6)

        e1_Fr = float(element1[1])
        e1_Fr = round(e1_Fr, 6)
        e1_Fy = float(element1[3])
        e1_Fy = round(e1_Fy, 6)
        e1_Fz = float(element1[4])
        e1_Fz = round(e1_Fz, 6)
        e1_stretch = float(element1[5])
        e1_stretch = round(e1_stretch, 6)

        e2_Fr = float(element2[1])
        e2_Fr = round(e2_Fr, 6)
        e2_Fy = float(element2[3])
        e2_Fy = round(e2_Fy, 6)
        e2_Fz = float(element2[4])
        e2_Fz = round(e2_Fz, 6)
        e2_stretch = float(element2[5])
        e2_stretch = round(e2_stretch, 6)

        e3_Fr = float(element3[1])
        e3_Fr = round(e3_Fr, 6)
        e3_Fy = float(element3[3])
        e3_Fy = round(e3_Fy, 6)
        e3_Fz = float(element3[4])
        e3_Fz = round(e3_Fz, 6)
        e3_stretch = float(element3[5])
        e3_stretch = round(e3_stretch, 6)

        e4_Fr = float(element4[1])
        e4_Fr = round(e4_Fr, 6)
        e4_Fy = float(element4[3])
        e4_Fy = round(e4_Fy, 6)
        e4_Fz = float(element4[4])
        e4_Fz = round(e4_Fz, 6)
        e4_stretch = float(element4[5])
        e4_stretch = round(e4_stretch, 6)

        time.append(timevalues1)
        element1_Fr.append(e1_Fr)
        element1_Fy.append(e1_Fy)
        element1_Fz.append(e1_Fz)
        element1_stretch.append(e1_stretch)
        element2_Fr.append(e2_Fr)
        element2_Fy.append(e2_Fy)
        element2_Fz.append(e2_Fz)
        element2_stretch.append(e2_stretch)
        element3_Fr.append(e3_Fr)
        element3_Fy.append(e3_Fy)
        element3_Fz.append(e3_Fz)
        element3_stretch.append(e3_stretch)
        element4_Fr.append(e4_Fr)
        element4_Fy.append(e4_Fy)
        element4_Fz.append(e4_Fz)
        element4_stretch.append(e4_stretch)

C67_PLL_data = pd.concat([pd.Series(time, name='Sim_Time_s'), pd.Series(element1_Fr, name='E1_Fr'),
                           pd.Series(element1_Fy, name='E1_Fy'), pd.Series(element1_Fz, name='E1_Fz'),
                           pd.Series(element1_stretch, name='E1_stretch'),
                           pd.Series(element2_Fr, name='E2_Fr'), pd.Series(element2_Fy, name='E2_Fy'),
                           pd.Series(element2_Fz, name='E2_Fz'), pd.Series(element2_stretch, name='E2_stretch'),
                           pd.Series(element3_Fr, name='E3_Fr'), pd.Series(element3_Fy, name='E3_Fy'),
                           pd.Series(element3_Fz, name='E3_Fz'), pd.Series(element3_stretch, name='E3_stretch'),
                           pd.Series(element4_Fr, name='E4_Fr'), pd.Series(element4_Fy, name='E4_Fy'),
                           pd.Series(element4_Fz, name='E4_Fz'), pd.Series(element4_stretch, name='E4_stretch')
                           ], axis=1)

C67_PLL_data['C67_PLL_Fr'] = (C67_PLL_data['E1_Fr'] + C67_PLL_data['E2_Fr'] + C67_PLL_data['E3_Fr'] +
                                C67_PLL_data['E4_Fr']) * -1  # Down & Rearward
C67_PLL_data['C67_PLL_Fy'] = (C67_PLL_data['E1_Fy'] + C67_PLL_data['E2_Fy'] + C67_PLL_data['E3_Fy'] +
                                C67_PLL_data['E4_Fy']) * -1  # Rearward
C67_PLL_data['C67_PLL_Fz'] = C67_PLL_data['E1_Fz'] + C67_PLL_data['E2_Fz'] + C67_PLL_data['E3_Fz'] + C67_PLL_data[
    'E4_Fz']
C67_PLL_data['C67_PLL_stretch'] = (C67_PLL_data['E1_stretch'] + C67_PLL_data['E2_stretch'] + C67_PLL_data[
    'E3_stretch'] + C67_PLL_data['E4_stretch']) / 4  # AVERAGE
C67_PLL_data['C67_PLL_Fres'] = ((C67_PLL_data['C67_PLL_Fy'] )**2 + (C67_PLL_data['C67_PLL_Fz'] )**2)**0.5

# print(C67_PLL_data)
C67_PLL_data.to_csv(path + filename + ".csv")

frames_df = [C01_AAOM_data, C01_JC_data, C01_PAOM_data, C02_ALAR_data, C02_APICAL_data, C02_TM_data, C02_TM_VC_data, C12_AAAM_data, C12_ISL_data, C12_JC_data, C12_PAAM_data, C12_TL_data,
          C23_ALL_data, C23_ISL_data, C23_JC_data, C23_LF_data, C23_PLL_data, C34_ALL_data, C34_ISL_data, C34_JC_data, C34_LF_data, C34_PLL_data,
          C45_ALL_data, C45_ISL_data, C45_JC_data, C45_LF_data, C45_PLL_data, C56_ALL_data, C56_ISL_data, C56_JC_data, C56_LF_data, C56_PLL_data,
C67_ALL_data, C67_ISL_data, C67_JC_data, C67_LF_data, C67_PLL_data, C7T1_ALL_data, C7T1_ISL_data, C7T1_JC_data, C7T1_LF_data, C7T1_PLL_data]
summary_df = pd.concat(frames_df, axis="columns")
summary_df = summary_df.loc[:, ~summary_df.columns.str.contains("E")]
print(C45_JC_data)
summary_df.to_csv("Ligament Data.csv")
print(summary_df['C45_JC_Fres'])

print(summary_df.values.max())
print(summary_df.values.min())

###########################################################################################################

#Quick Plot
import matplotlib as mpl
import matplotlib.pyplot as plt

channelsimt = 'Sim_Time_s'

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fres'], label ='C01_AAOM_Fres', color = 'red')
ax.plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fy'], label ='C01_AAOM_Fy', color = 'orange')
ax.plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fz'], label ='C01_AAOM_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C01_AAOM (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C01_AAOM N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_stretch'], label ='C01_AAOM_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C01_AAOM')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C01_AAOM.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fres'], label ='C01_JC_Fres', color = 'red')
ax.plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fy'], label ='C01_JC_Fy', color = 'orange')
ax.plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fz'], label ='C01_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C01_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C01_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_stretch'], label ='C01_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C01_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C01_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fres'], label ='C01_PAOM_Fres', color = 'red')
ax.plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fy'], label ='C01_PAOM_Fy', color = 'orange')
ax.plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fz'], label ='C01_PAOM_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C01_PAOM (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C01_PAOM N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_stretch'], label ='C01_PAOM_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C01_PAOM')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C01_PAOM.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fres'], label ='C02_ALAR_Fres', color = 'red')
ax.plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fy'], label ='C02_ALAR_Fy', color = 'orange')
ax.plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fz'], label ='C02_ALAR_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C02_ALAR (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C02_ALAR N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_stretch'], label ='C02_ALAR_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C02_ALAR')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C02_ALAR.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fres'], label ='C02_APICAL_Fres', color = 'red')
ax.plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fy'], label ='C02_APICAL_Fy', color = 'orange')
ax.plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fz'], label ='C02_APICAL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C02_APICAL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C02_APICAL N.png')

plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_stretch'], label ='C02_APICAL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C02_APICAL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C02_APICAL.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fres'], label ='C02_TM_Fres', color = 'red')
ax.plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fy'], label ='C02_TM_Fy', color = 'orange')
ax.plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fz'], label ='C02_TM_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C02_TM (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C02_TM N.png')

plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_stretch'], label ='C02_TM_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C02_TM')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C02_TM.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fres'], label ='C02_TM_VC_Fres', color = 'red')
ax.plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fy'], label ='C02_TM_VC_Fy', color = 'orange')
ax.plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fz'], label ='C02_TM_VC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C02_TM_VC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C02_TM_VC N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_stretch'], label ='C02_TM_VC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C02_TM_VC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C02_TM_VC.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fres'], label ='C7T1_ALL_Fres', color = 'red')
ax.plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fy'], label ='C7T1_ALL_Fy', color = 'orange')
ax.plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fz'], label ='C7T1_ALL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C7T1_ALL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C7T1_ALL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_stretch'], label ='C7T1_ALL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C7T1_ALL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C7T1_ALL.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fres'], label ='C7T1_ISL_Fres', color = 'red')
ax.plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fy'], label ='C7T1_ISL_Fy', color = 'orange')
ax.plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fz'], label ='C7T1_ISL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C7T1_ISL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C7T1_ISL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_stretch'], label ='C7T1_ISL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C7T1_ISL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C7T1_ISL.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fres'], label ='C7T1_JC_Fres', color = 'red')
ax.plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fy'], label ='C7T1_JC_Fy', color = 'orange')
ax.plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fz'], label ='C7T1_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C7T1_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C7T1_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_stretch'], label ='C7T1_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C7T1_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C7T1_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fres'], label ='C7T1_LF_Fres', color = 'red')
ax.plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fy'], label ='C7T1_LF_Fy', color = 'orange')
ax.plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fz'], label ='C7T1_LF_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C7T1_LF (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C7T1_LF N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_stretch'], label ='C7T1_LF_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C7T1_LF')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C7T1_LF.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fres'], label ='C7T1_PLL_Fres', color = 'red')
ax.plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fy'], label ='C7T1_PLL_Fy', color = 'orange')
ax.plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fz'], label ='C7T1_PLL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C7T1_PLL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C7T1_PLL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_stretch'], label ='C7T1_PLL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C7T1_PLL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C7T1_PLL.png')
plt.show()
###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fres'], label ='C12_AAAM_Fres', color = 'red')
ax.plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fy'], label ='C12_AAAM_Fy', color = 'orange')
ax.plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fz'], label ='C12_AAAM_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C12_AAAM (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C12_AAAM N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_stretch'], label ='C12_AAAM_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C12_AAAM')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C12_AAAM.png')
plt.show()
###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fres'], label ='C12_ISL_Fres', color = 'red')
ax.plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fy'], label ='C12_ISL_Fy', color = 'orange')
ax.plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fz'], label ='C12_ISL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C12_ISL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C12_ISL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_stretch'], label ='C12_ISL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C12_ISL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C12_ISL.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fres'], label ='C12_JC_Fres', color = 'red')
ax.plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fy'], label ='C12_JC_Fy', color = 'orange')
ax.plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fz'], label ='C12_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C12_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C12_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_stretch'], label ='C12_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C12_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C12_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fres'], label ='C12_PAAM_Fres', color = 'red')
ax.plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fy'], label ='C12_PAAM_Fy', color = 'orange')
ax.plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fz'], label ='C12_PAAM_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C12_PAAM (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C12_PAAM N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_stretch'], label ='C12_PAAM_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C12_PAAM')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C12_PAAM.png')
plt.show()

###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fres'], label ='C12_TL_Fres', color = 'red')
ax.plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fy'], label ='C12_TL_Fy', color = 'orange')
ax.plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fz'], label ='C12_TL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C12_TL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C12_TL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_stretch'], label ='C12_TL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C12_TL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C12_TL.png')
plt.show()

###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fres'], label ='C23_ALL_Fres', color = 'red')
ax.plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fy'], label ='C23_ALL_Fy', color = 'orange')
ax.plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fz'], label ='C23_ALL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C23_ALL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C23_ALL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_stretch'], label ='C23_ALL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C23_ALL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C23_ALL.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fres'], label ='C23_ISL_Fres', color = 'red')
ax.plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fy'], label ='C23_ISL_Fy', color = 'orange')
ax.plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fz'], label ='C23_ISL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C23_ISL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C23_ISL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_stretch'], label ='C23_ISL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C23_ISL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C23_ISL.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fres'], label ='C23_JC_Fres', color = 'red')
ax.plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fy'], label ='C23_JC_Fy', color = 'orange')
ax.plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fz'], label ='C23_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C23_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C23_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_stretch'], label ='C23_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C23_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C23_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fres'], label ='C23_LF_Fres', color = 'red')
ax.plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fy'], label ='C23_LF_Fy', color = 'orange')
ax.plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fz'], label ='C23_LF_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C23_LF (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C23_LF N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_stretch'], label ='C23_LF_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C23_LF')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C23_LF.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fres'], label ='C23_PLL_Fres', color = 'red')
ax.plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fy'], label ='C23_PLL_Fy', color = 'orange')
ax.plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fz'], label ='C23_PLL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C23_PLL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C23_PLL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_stretch'], label ='C23_PLL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C23_PLL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C23_PLL.png')
plt.show()
###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fres'], label ='C34_ALL_Fres', color = 'red')
ax.plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fy'], label ='C34_ALL_Fy', color = 'orange')
ax.plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fz'], label ='C34_ALL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C34_ALL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C34_ALL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_stretch'], label ='C34_ALL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C34_ALL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C34_ALL.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fres'], label ='C34_ISL_Fres', color = 'red')
ax.plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fy'], label ='C34_ISL_Fy', color = 'orange')
ax.plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fz'], label ='C34_ISL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C34_ISL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C34_ISL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_stretch'], label ='C34_ISL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C34_ISL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C34_ISL.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fres'], label ='C34_JC_Fres', color = 'red')
ax.plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fy'], label ='C34_JC_Fy', color = 'orange')
ax.plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fz'], label ='C34_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C34_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C34_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_stretch'], label ='C34_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C34_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C34_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fres'], label ='C34_LF_Fres', color = 'red')
ax.plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fy'], label ='C34_LF_Fy', color = 'orange')
ax.plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fz'], label ='C34_LF_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C34_LF (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C34_LF N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_stretch'], label ='C34_LF_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C34_LF')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C34_LF.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fres'], label ='C34_PLL_Fres', color = 'red')
ax.plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fy'], label ='C34_PLL_Fy', color = 'orange')
ax.plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fz'], label ='C34_PLL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C34_PLL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C34_PLL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_stretch'], label ='C34_PLL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C34_PLL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C34_PLL.png')
plt.show()
###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fres'], label ='C45_ALL_Fres', color = 'red')
ax.plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fy'], label ='C45_ALL_Fy', color = 'orange')
ax.plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fz'], label ='C45_ALL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C45_ALL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C45_ALL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_stretch'], label ='C45_ALL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C45_ALL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C45_ALL.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fres'], label ='C45_ISL_Fres', color = 'red')
ax.plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fy'], label ='C45_ISL_Fy', color = 'orange')
ax.plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fz'], label ='C45_ISL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C45_ISL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C45_ISL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_stretch'], label ='C45_ISL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C45_ISL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C45_ISL.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fres'], label ='C45_JC_Fres', color = 'red')
ax.plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fy'], label ='C45_JC_Fy', color = 'orange')
ax.plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fz'], label ='C45_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C45_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C45_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_stretch'], label ='C45_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C45_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C45_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fres'], label ='C45_LF_Fres', color = 'red')
ax.plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fy'], label ='C45_LF_Fy', color = 'orange')
ax.plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fz'], label ='C45_LF_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C45_LF (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C45_LF N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_stretch'], label ='C45_LF_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C45_LF')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C45_LF.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fres'], label ='C45_PLL_Fres', color = 'red')
ax.plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fy'], label ='C45_PLL_Fy', color = 'orange')
ax.plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fz'], label ='C45_PLL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C45_PLL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C45_PLL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_stretch'], label ='C45_PLL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C45_PLL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C45_PLL.png')
plt.show()
###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fres'], label ='C56_ALL_Fres', color = 'red')
ax.plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fy'], label ='C56_ALL_Fy', color = 'orange')
ax.plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fz'], label ='C56_ALL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C56_ALL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C56_ALL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_stretch'], label ='C56_ALL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C56_ALL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C56_ALL.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fres'], label ='C56_ISL_Fres', color = 'red')
ax.plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fy'], label ='C56_ISL_Fy', color = 'orange')
ax.plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fz'], label ='C56_ISL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C56_ISL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C56_ISL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_stretch'], label ='C56_ISL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C56_ISL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C56_ISL.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fres'], label ='C56_JC_Fres', color = 'red')
ax.plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fy'], label ='C56_JC_Fy', color = 'orange')
ax.plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fz'], label ='C56_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C56_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C56_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_stretch'], label ='C56_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C56_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C56_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fres'], label ='C56_LF_Fres', color = 'red')
ax.plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fy'], label ='C56_LF_Fy', color = 'orange')
ax.plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fz'], label ='C56_LF_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C56_LF (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C56_LF N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_stretch'], label ='C56_LF_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C56_LF')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C56_LF.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fres'], label ='C56_PLL_Fres', color = 'red')
ax.plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fy'], label ='C56_PLL_Fy', color = 'orange')
ax.plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fz'], label ='C56_PLL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C56_PLL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C56_PLL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_stretch'], label ='C56_PLL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C56_PLL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C56_PLL.png')
plt.show()
###########################################################################################################
###########################################################################################################


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fres'], label ='C67_ALL_Fres', color = 'red')
ax.plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fy'], label ='C67_ALL_Fy', color = 'orange')
ax.plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fz'], label ='C67_ALL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C67_ALL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C67_ALL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_stretch'], label ='C67_ALL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C67_ALL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C67_ALL.png')
plt.show()

###########################################################################################################
# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fres'], label ='C67_ISL_Fres', color = 'red')
ax.plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fy'], label ='C67_ISL_Fy', color = 'orange')
ax.plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fz'], label ='C67_ISL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C67_ISL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C67_ISL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_stretch'], label ='C67_ISL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C67_ISL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C67_ISL.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fres'], label ='C67_JC_Fres', color = 'red')
ax.plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fy'], label ='C67_JC_Fy', color = 'orange')
ax.plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fz'], label ='C67_JC_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C67_JC (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C67_JC N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_stretch'], label ='C67_JC_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C67_JC')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C67_JC.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fres'], label ='C67_LF_Fres', color = 'red')
ax.plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fy'], label ='C67_LF_Fy', color = 'orange')
ax.plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fz'], label ='C67_LF_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C67_LF (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C67_LF N.png')
plt.show()


# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_stretch'], label ='C67_LF_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C67_LF')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C67_LF.png')
plt.show()

###########################################################################################################

# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fres'], label ='C67_PLL_Fres', color = 'red')
ax.plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fy'], label ='C67_PLL_Fy', color = 'orange')
ax.plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fz'], label ='C67_PLL_Fz', color = 'green')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Force (N)')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Forces - C67_PLL (N)')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Forces - C67_PLL N.png')

plt.show()# mpl.use('TkAgg')  # or can use 'TkAgg' or Qt5Agg, whatever you have/prefer
fig,ax = plt.subplots()
ax.plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_stretch'], label ='C67_PLL_stretch', color = 'blue')

ax.set_xlim(0, 0.25)
ax.set_xlabel('Time (s)')
ax.set_ylabel('Stretch')
ax.grid(True)
ax.legend()
ax.set_title('Ligament Stretch - C67_PLL')
plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('Ligament Stretch - C67_PLL.png')
plt.show()
###########################################################################################################
###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fres'], label ='C23_ALL_Fres', color = 'red')
ax[0,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fy'], label ='C23_ALL_Fy', color = 'orange')
ax[0,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fz'], label ='C23_ALL_Fz', color = 'green')
ax[0, 0].set_title('C23_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_ylim(-600, 600)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fres'], label ='C23_ISL_Fres', color = 'red')
ax[0,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fy'], label ='C23_ISL_Fy', color = 'orange')
ax[0,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fz'], label ='C23_ISL_Fz', color = 'green')
ax[0, 1].set_title('C23_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_ylim(-600, 600)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fres'], label ='C23_JC_Fres', color = 'red')
ax[0,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fy'], label ='C23_JC_Fy', color = 'orange')
ax[0,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fz'], label ='C23_JC_Fz', color = 'green')
ax[0, 2].set_title('C23_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_ylim(-600, 600)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fres'], label ='C23_LF_Fres', color = 'red')
ax[0,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fy'], label ='C23_LF_Fy', color = 'orange')
ax[0,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fz'], label ='C23_LF_Fz', color = 'green')
ax[0, 3].set_title('C23_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_ylim(-600, 600)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fres'], label ='C23_PLL_Fres', color = 'red')
ax[0,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fy'], label ='C23_PLL_Fy', color = 'orange')
ax[0,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fz'], label ='C23_PLL_Fz', color = 'green')
ax[0, 4].set_title('C23_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_ylim(-600, 600)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_stretch'], label ='C23_ALL_stretch', color = 'red')
ax[1, 0].set_title('C23_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].set_ylim(0, 3.0)
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_stretch'], label ='C23_ISL_stretch', color = 'red')
ax[1, 1].set_title('C23_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].set_ylim(0, 3.0)
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_stretch'], label ='C23_JC_stretch', color = 'red')
ax[1, 2].set_title('C23_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].set_ylim(0, 3.0)
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_stretch'], label ='C23_LF_stretch', color = 'red')
ax[1, 3].set_title('C23_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].set_ylim(0, 3.0)
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_stretch'], label ='C23_PLL_stretch', color = 'red')
ax[1, 4].set_title('C23_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].set_ylim(0, 3.0)
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C23 Ligament Summary.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fres'], label ='C34_ALL_Fres', color = 'red')
ax[0,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fy'], label ='C34_ALL_Fy', color = 'orange')
ax[0,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fz'], label ='C34_ALL_Fz', color = 'green')
ax[0, 0].set_title('C34_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_ylim(-600, 600)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fres'], label ='C34_ISL_Fres', color = 'red')
ax[0,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fy'], label ='C34_ISL_Fy', color = 'orange')
ax[0,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fz'], label ='C34_ISL_Fz', color = 'green')
ax[0, 1].set_title('C34_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_ylim(-600, 600)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fres'], label ='C34_JC_Fres', color = 'red')
ax[0,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fy'], label ='C34_JC_Fy', color = 'orange')
ax[0,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fz'], label ='C34_JC_Fz', color = 'green')
ax[0, 2].set_title('C34_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_ylim(-600, 600)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fres'], label ='C34_LF_Fres', color = 'red')
ax[0,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fy'], label ='C34_LF_Fy', color = 'orange')
ax[0,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fz'], label ='C34_LF_Fz', color = 'green')
ax[0, 3].set_title('C34_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_ylim(-600, 600)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fres'], label ='C34_PLL_Fres', color = 'red')
ax[0,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fy'], label ='C34_PLL_Fy', color = 'orange')
ax[0,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fz'], label ='C34_PLL_Fz', color = 'green')
ax[0, 4].set_title('C34_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_ylim(-600, 600)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_stretch'], label ='C34_ALL_stretch', color = 'red')
ax[1, 0].set_title('C34_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].set_ylim(0, 3.0)
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_stretch'], label ='C34_ISL_stretch', color = 'red')
ax[1, 1].set_title('C34_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].set_ylim(0, 3.0)
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_stretch'], label ='C34_JC_stretch', color = 'red')
ax[1, 2].set_title('C34_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].set_ylim(0, 3.0)
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_stretch'], label ='C34_LF_stretch', color = 'red')
ax[1, 3].set_title('C34_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].set_ylim(0, 3.0)
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_stretch'], label ='C34_PLL_stretch', color = 'red')
ax[1, 4].set_title('C34_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].set_ylim(0, 3.0)
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C34 Ligament Summary.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fres'], label ='C45_ALL_Fres', color = 'red')
ax[0,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fy'], label ='C45_ALL_Fy', color = 'orange')
ax[0,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fz'], label ='C45_ALL_Fz', color = 'green')
ax[0, 0].set_title('C45_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_ylim(-600, 600)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fres'], label ='C45_ISL_Fres', color = 'red')
ax[0,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fy'], label ='C45_ISL_Fy', color = 'orange')
ax[0,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fz'], label ='C45_ISL_Fz', color = 'green')
ax[0, 1].set_title('C45_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_ylim(-600, 600)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fres'], label ='C45_JC_Fres', color = 'red')
ax[0,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fy'], label ='C45_JC_Fy', color = 'orange')
ax[0,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fz'], label ='C45_JC_Fz', color = 'green')
ax[0, 2].set_title('C45_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_ylim(-600, 600)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fres'], label ='C45_LF_Fres', color = 'red')
ax[0,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fy'], label ='C45_LF_Fy', color = 'orange')
ax[0,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fz'], label ='C45_LF_Fz', color = 'green')
ax[0, 3].set_title('C45_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_ylim(-600, 600)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fres'], label ='C45_PLL_Fres', color = 'red')
ax[0,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fy'], label ='C45_PLL_Fy', color = 'orange')
ax[0,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fz'], label ='C45_PLL_Fz', color = 'green')
ax[0, 4].set_title('C45_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_ylim(-600, 600)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_stretch'], label ='C45_ALL_stretch', color = 'red')
ax[1, 0].set_title('C45_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].set_ylim(0, 3.0)
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_stretch'], label ='C45_ISL_stretch', color = 'red')
ax[1, 1].set_title('C45_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].set_ylim(0, 3.0)
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_stretch'], label ='C45_JC_stretch', color = 'red')
ax[1, 2].set_title('C45_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].set_ylim(0, 3.0)
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_stretch'], label ='C45_LF_stretch', color = 'red')
ax[1, 3].set_title('C45_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].set_ylim(0, 3.0)
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_stretch'], label ='C45_PLL_stretch', color = 'red')
ax[1, 4].set_title('C45_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].set_ylim(0, 3.0)
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C45 Ligament Summary.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fres'], label ='C56_ALL_Fres', color = 'red')
ax[0,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fy'], label ='C56_ALL_Fy', color = 'orange')
ax[0,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fz'], label ='C56_ALL_Fz', color = 'green')
ax[0, 0].set_title('C56_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_ylim(-600, 600)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fres'], label ='C56_ISL_Fres', color = 'red')
ax[0,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fy'], label ='C56_ISL_Fy', color = 'orange')
ax[0,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fz'], label ='C56_ISL_Fz', color = 'green')
ax[0, 1].set_title('C56_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_ylim(-600, 600)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fres'], label ='C56_JC_Fres', color = 'red')
ax[0,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fy'], label ='C56_JC_Fy', color = 'orange')
ax[0,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fz'], label ='C56_JC_Fz', color = 'green')
ax[0, 2].set_title('C56_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_ylim(-600, 600)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fres'], label ='C56_LF_Fres', color = 'red')
ax[0,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fy'], label ='C56_LF_Fy', color = 'orange')
ax[0,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fz'], label ='C56_LF_Fz', color = 'green')
ax[0, 3].set_title('C56_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_ylim(-600, 600)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fres'], label ='C56_PLL_Fres', color = 'red')
ax[0,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fy'], label ='C56_PLL_Fy', color = 'orange')
ax[0,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fz'], label ='C56_PLL_Fz', color = 'green')
ax[0, 4].set_title('C56_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_ylim(-600, 600)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_stretch'], label ='C56_ALL_stretch', color = 'red')
ax[1, 0].set_title('C56_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].set_ylim(0, 3.0)
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_stretch'], label ='C56_ISL_stretch', color = 'red')
ax[1, 1].set_title('C56_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].set_ylim(0, 3.0)
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_stretch'], label ='C56_JC_stretch', color = 'red')
ax[1, 2].set_title('C56_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].set_ylim(0, 3.0)
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_stretch'], label ='C56_LF_stretch', color = 'red')
ax[1, 3].set_title('C56_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].set_ylim(0, 3.0)
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_stretch'], label ='C56_PLL_stretch', color = 'red')
ax[1, 4].set_title('C56_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].set_ylim(0, 3.0)
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C56 Ligament Summary.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fres'], label ='C67_ALL_Fres', color = 'red')
ax[0,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fy'], label ='C67_ALL_Fy', color = 'orange')
ax[0,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fz'], label ='C67_ALL_Fz', color = 'green')
ax[0, 0].set_title('C67_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_ylim(-600, 600)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fres'], label ='C67_ISL_Fres', color = 'red')
ax[0,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fy'], label ='C67_ISL_Fy', color = 'orange')
ax[0,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fz'], label ='C67_ISL_Fz', color = 'green')
ax[0, 1].set_title('C67_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_ylim(-600, 600)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fres'], label ='C67_JC_Fres', color = 'red')
ax[0,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fy'], label ='C67_JC_Fy', color = 'orange')
ax[0,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fz'], label ='C67_JC_Fz', color = 'green')
ax[0, 2].set_title('C67_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_ylim(-600, 600)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fres'], label ='C67_LF_Fres', color = 'red')
ax[0,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fy'], label ='C67_LF_Fy', color = 'orange')
ax[0,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fz'], label ='C67_LF_Fz', color = 'green')
ax[0, 3].set_title('C67_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_ylim(-600, 600)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fres'], label ='C67_PLL_Fres', color = 'red')
ax[0,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fy'], label ='C67_PLL_Fy', color = 'orange')
ax[0,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fz'], label ='C67_PLL_Fz', color = 'green')
ax[0, 4].set_title('C67_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_ylim(-600, 600)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_stretch'], label ='C67_ALL_stretch', color = 'red')
ax[1, 0].set_title('C67_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].set_ylim(0, 3.0)
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_stretch'], label ='C67_ISL_stretch', color = 'red')
ax[1, 1].set_title('C67_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].set_ylim(0, 3.0)
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_stretch'], label ='C67_JC_stretch', color = 'red')
ax[1, 2].set_title('C67_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].set_ylim(0, 3.0)
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_stretch'], label ='C67_LF_stretch', color = 'red')
ax[1, 3].set_title('C67_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].set_ylim(0, 3.0)
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_stretch'], label ='C67_PLL_stretch', color = 'red')
ax[1, 4].set_title('C67_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].set_ylim(0, 3.0)
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C67 Ligament Summary.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fres'], label ='C7T1_ALL_Fres', color = 'red')
ax[0,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fy'], label ='C7T1_ALL_Fy', color = 'orange')
ax[0,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fz'], label ='C7T1_ALL_Fz', color = 'green')
ax[0, 0].set_title('C7T1_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_ylim(-600, 600)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fres'], label ='C7T1_ISL_Fres', color = 'red')
ax[0,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fy'], label ='C7T1_ISL_Fy', color = 'orange')
ax[0,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fz'], label ='C7T1_ISL_Fz', color = 'green')
ax[0, 1].set_title('C7T1_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_ylim(-600, 600)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fres'], label ='C7T1_JC_Fres', color = 'red')
ax[0,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fy'], label ='C7T1_JC_Fy', color = 'orange')
ax[0,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fz'], label ='C7T1_JC_Fz', color = 'green')
ax[0, 2].set_title('C7T1_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_ylim(-600, 600)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fres'], label ='C7T1_LF_Fres', color = 'red')
ax[0,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fy'], label ='C7T1_LF_Fy', color = 'orange')
ax[0,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fz'], label ='C7T1_LF_Fz', color = 'green')
ax[0, 3].set_title('C7T1_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_ylim(-600, 600)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fres'], label ='C7T1_PLL_Fres', color = 'red')
ax[0,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fy'], label ='C7T1_PLL_Fy', color = 'orange')
ax[0,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fz'], label ='C7T1_PLL_Fz', color = 'green')
ax[0, 4].set_title('C7T1_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_ylim(-600, 600)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_stretch'], label ='C7T1_ALL_stretch', color = 'red')
ax[1, 0].set_title('C7T1_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].set_ylim(0, 3.0)
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_stretch'], label ='C7T1_ISL_stretch', color = 'red')
ax[1, 1].set_title('C7T1_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].set_ylim(0, 3.0)
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_stretch'], label ='C7T1_JC_stretch', color = 'red')
ax[1, 2].set_title('C7T1_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].set_ylim(0, 3.0)
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_stretch'], label ='C7T1_LF_stretch', color = 'red')
ax[1, 3].set_title('C7T1_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].set_ylim(0, 3.0)
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_stretch'], label ='C7T1_PLL_stretch', color = 'red')
ax[1, 4].set_title('C7T1_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].set_ylim(0, 3.0)
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C7T1 Ligament Summary.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot C02 summaries')
figure, ax = plt.subplots(6, 5,figsize=(50,60)) #columns then rows size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

###### C01
ax[0,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fres'], label ='C01_AAOM_Fres', color = 'red')
ax[0,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fy'], label ='C01_AAOM_Fy', color = 'orange')
ax[0,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fz'], label ='C01_AAOM_Fz', color = 'green')
ax[0, 0].set_title('C01_AAOM')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_ylim(-600, 600)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fres'], label ='C01_JC_Fres', color = 'red')
ax[0,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fy'], label ='C01_JC_Fy', color = 'orange')
ax[0,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fz'], label ='C01_JC_Fz', color = 'green')
ax[0, 1].set_title('C01_JC')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_ylim(-600, 600)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fres'], label ='C01_PAOM_Fres', color = 'red')
ax[0,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fy'], label ='C01_PAOM_Fy', color = 'orange')
ax[0,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fz'], label ='C01_PAOM_Fz', color = 'green')
ax[0, 2].set_title('C01_PAOM')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_ylim(-600, 600)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()

ax[1,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_stretch'], label ='C01_AAOM_stretch', color = 'red')
ax[1, 0].set_title('C01_AAOM')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].set_ylim(0, 3.0)
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_stretch'], label ='C01_JC_stretch', color = 'red')
ax[1, 1].set_title('C01_JC')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].set_ylim(0, 3.0)
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_stretch'], label ='C01_PAOM_stretch', color = 'red')
ax[1, 2].set_title('C01_PAOM')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].set_ylim(0, 3.0)
ax[1, 2].grid(True)
ax[1, 2].legend()

###### C12
ax[2,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fres'], label ='C12_AAAM_Fres', color = 'red')
ax[2,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fy'], label ='C12_AAAM_Fy', color = 'orange')
ax[2,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fz'], label ='C12_AAAM_Fz', color = 'green')
ax[2, 0].set_title('C12_AAAM')
ax[2, 0].set_xlim(0, 0.25)
ax[2, 0].set_ylim(-600, 600)
ax[2, 0].set_xlabel('Time (s)')
ax[2, 0].set_ylabel('Force (N)')
ax[2, 0].grid(True)
ax[2, 0].legend()
ax[2,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fres'], label ='C12_ISL_Fres', color = 'red')
ax[2,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fy'], label ='C12_ISL_Fy', color = 'orange')
ax[2,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fz'], label ='C12_ISL_Fz', color = 'green')
ax[2, 1].set_title('C12_ISL')
ax[2, 1].set_xlim(0, 0.25)
ax[2, 1].set_ylim(-600, 600)
ax[2, 1].set_xlabel('Time (s)')
ax[2, 1].set_ylabel('Force (N)')
ax[2, 1].grid(True)
ax[2, 1].legend()
ax[2,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fres'], label ='C12_JC_Fres', color = 'red')
ax[2,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fy'], label ='C12_JC_Fy', color = 'orange')
ax[2,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fz'], label ='C12_JC_Fz', color = 'green')
ax[2, 2].set_title('C12_JC')
ax[2, 2].set_xlim(0, 0.25)
ax[2, 2].set_ylim(-600, 600)
ax[2, 2].set_xlabel('Time (s)')
ax[2, 2].set_ylabel('Force (N)')
ax[2, 2].grid(True)
ax[2, 2].legend()
ax[2,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fres'], label ='C12_PAAM_Fres', color = 'red')
ax[2,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fy'], label ='C12_PAAM_Fy', color = 'orange')
ax[2,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fz'], label ='C12_PAAM_Fz', color = 'green')
ax[2, 3].set_title('C12_PAAM')
ax[2, 3].set_xlim(0, 0.25)
ax[2, 3].set_ylim(-600, 600)
ax[2, 3].set_xlabel('Time (s)')
ax[2, 3].set_ylabel('Force (N)')
ax[2, 3].grid(True)
ax[2, 3].legend()
ax[2,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fres'], label ='C12_TL_Fres', color = 'red')
ax[2,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fy'], label ='C12_TL_Fy', color = 'orange')
ax[2,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fz'], label ='C12_TL_Fz', color = 'green')
ax[2, 4].set_title('C12_TL')
ax[2, 4].set_xlim(0, 0.25)
ax[2, 4].set_ylim(-600, 600)
ax[2, 4].set_xlabel('Time (s)')
ax[2, 4].set_ylabel('Force (N)')
ax[2, 4].grid(True)
ax[2, 4].legend()
#
ax[3,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_stretch'], label ='C12_AAAM_stretch', color = 'red')
ax[3, 0].set_title('C12_AAAM')
ax[3, 0].set_xlim(0, 0.25)
ax[3, 0].set_xlabel('Time (s)')
ax[3, 0].set_ylabel('Stretch')
ax[3, 0].set_ylim(0, 3.0)
ax[3, 0].grid(True)
ax[3, 0].legend()
ax[3,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_stretch'], label ='C12_ISL_stretch', color = 'red')
ax[3, 1].set_title('C12_ISL')
ax[3, 1].set_xlim(0, 0.25)
ax[3, 1].set_xlabel('Time (s)')
ax[3, 1].set_ylabel('Stretch')
ax[3, 1].set_ylim(0, 3.0)
ax[3, 1].grid(True)
ax[3, 1].legend()
ax[3,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_stretch'], label ='C12_JC_stretch', color = 'red')
ax[3, 2].set_title('C12_JC')
ax[3, 2].set_xlim(0, 0.25)
ax[3, 2].set_xlabel('Time (s)')
ax[3, 2].set_ylabel('Stretch')
ax[3, 2].set_ylim(0, 3.0)
ax[3, 2].grid(True)
ax[3, 2].legend()
ax[3,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_stretch'], label ='C12_PAAM_stretch', color = 'red')
ax[3, 3].set_title('C12_PAAM')
ax[3, 3].set_xlim(0, 0.25)
ax[3, 3].set_xlabel('Time (s)')
ax[3, 3].set_ylabel('Stretch')
ax[3, 3].set_ylim(0, 3.0)
ax[3, 3].grid(True)
ax[3, 3].legend()
ax[3,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_stretch'], label ='C12_TL_stretch', color = 'red')
ax[3, 4].set_title('C12_TL')
ax[3, 4].set_xlim(0, 0.25)
ax[3, 4].set_xlabel('Time (s)')
ax[3, 4].set_ylabel('Stretch')
ax[3, 4].set_ylim(0, 3.0)
ax[3, 4].grid(True)
ax[3, 4].legend()

###### C02
ax[4,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fres'], label ='C02_ALAR_Fres', color = 'red')
ax[4,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fy'], label ='C02_ALAR_Fy', color = 'orange')
ax[4,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fz'], label ='C02_ALAR_Fz', color = 'green')
ax[4, 0].set_title('C02_ALAR')
ax[4, 0].set_xlim(0, 0.25)
ax[4, 0].set_ylim(-600, 600)
ax[4, 0].set_xlabel('Time (s)')
ax[4, 0].set_ylabel('Force (N)')
ax[4, 0].grid(True)
ax[4, 0].legend()
ax[4,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fres'], label ='C02_APICAL_Fres', color = 'red')
ax[4,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fy'], label ='C02_APICAL_Fy', color = 'orange')
ax[4,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fz'], label ='C02_APICAL_Fz', color = 'green')
ax[4, 1].set_title('C02_APICAL')
ax[4, 1].set_xlim(0, 0.25)
ax[4, 1].set_ylim(-600, 600)
ax[4, 1].set_xlabel('Time (s)')
ax[4, 1].set_ylabel('Force (N)')
ax[4, 1].grid(True)
ax[4, 1].legend()
ax[4,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fres'], label ='C02_TM_Fres', color = 'red')
ax[4,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fy'], label ='C02_TM_Fy', color = 'orange')
ax[4,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fz'], label ='C02_TM_Fz', color = 'green')
ax[4, 2].set_title('C02_TM')
ax[4, 2].set_xlim(0, 0.25)
ax[4, 2].set_ylim(-600, 600)
ax[4, 2].set_xlabel('Time (s)')
ax[4, 2].set_ylabel('Force (N)')
ax[4, 2].grid(True)
ax[4, 2].legend()
ax[4,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fres'], label ='C02_TM_VC_Fres', color = 'red')
ax[4,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fy'], label ='C02_TM_VC_Fy', color = 'orange')
ax[4,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fz'], label ='C02_TM_VC_Fz', color = 'green')
ax[4, 3].set_title('C02_TM_VC')
ax[4, 3].set_xlim(0, 0.25)
ax[4, 3].set_ylim(-600, 600)
ax[4, 3].set_xlabel('Time (s)')
ax[4, 3].set_ylabel('Force (N)')
ax[4, 3].grid(True)
ax[4, 3].legend()
#
ax[5,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_stretch'], label ='C02_ALAR_stretch', color = 'red')
ax[5, 0].set_title('C02_ALAR')
ax[5, 0].set_xlim(0, 0.25)
ax[5, 0].set_xlabel('Time (s)')
ax[5, 0].set_ylabel('Stretch')
ax[5, 0].set_ylim(0, 3.0)
ax[5, 0].grid(True)
ax[5, 0].legend()
ax[5,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_stretch'], label ='C02_APICAL_stretch', color = 'red')
ax[5, 1].set_title('C02_APICAL')
ax[5, 1].set_xlim(0, 0.25)
ax[5, 1].set_xlabel('Time (s)')
ax[5, 1].set_ylabel('Stretch')
ax[5, 1].set_ylim(0, 3.0)
ax[5, 1].grid(True)
ax[5, 1].legend()
ax[5,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_stretch'], label ='C02_TM_stretch', color = 'red')
ax[5, 2].set_title('C02_TM')
ax[5, 2].set_xlim(0, 0.25)
ax[5, 2].set_xlabel('Time (s)')
ax[5, 2].set_ylabel('Stretch')
ax[5, 2].set_ylim(0, 3.0)
ax[5, 2].grid(True)
ax[5, 2].legend()
ax[5,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_stretch'], label ='C02_TM_VC_stretch', color = 'red')
ax[5, 3].set_title('C02_TM_VC')
ax[5, 3].set_xlim(0, 0.25)
ax[5, 3].set_xlabel('Time (s)')
ax[5, 3].set_ylabel('Stretch')
ax[5, 3].set_ylim(0, 3.0)
ax[5, 3].grid(True)
ax[5, 3].legend()


for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
#
for item in ([ax[2,0].title, ax[2,0].xaxis.label, ax[2,0].yaxis.label] +
             ax[2,0].get_xticklabels() + ax[2,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,1].title, ax[2,1].xaxis.label, ax[2,1].yaxis.label] +
             ax[2,1].get_xticklabels() + ax[2,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,2].title, ax[2,2].xaxis.label, ax[2,2].yaxis.label] +
             ax[2,2].get_xticklabels() + ax[2,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,3].title, ax[2,3].xaxis.label, ax[2,3].yaxis.label] +
             ax[2,3].get_xticklabels() + ax[2,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,4].title, ax[2,4].xaxis.label, ax[2,4].yaxis.label] +
             ax[2,4].get_xticklabels() + ax[2,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,0].title, ax[3,0].xaxis.label, ax[3,0].yaxis.label] +
             ax[3,0].get_xticklabels() + ax[3,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,1].title, ax[3,1].xaxis.label, ax[3,1].yaxis.label] +
             ax[3,1].get_xticklabels() + ax[3,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,2].title, ax[3,2].xaxis.label, ax[3,2].yaxis.label] +
             ax[3,2].get_xticklabels() + ax[3,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,3].title, ax[3,3].xaxis.label, ax[3,3].yaxis.label] +
             ax[3,3].get_xticklabels() + ax[3,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,4].title, ax[3,4].xaxis.label, ax[3,4].yaxis.label] +
             ax[3,4].get_xticklabels() + ax[3,4].get_yticklabels()):
    item.set_fontsize(20)
#
for item in ([ax[4,0].title, ax[4,0].xaxis.label, ax[4,0].yaxis.label] +
             ax[4,0].get_xticklabels() + ax[4,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,1].title, ax[4,1].xaxis.label, ax[4,1].yaxis.label] +
             ax[4,1].get_xticklabels() + ax[4,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,2].title, ax[4,2].xaxis.label, ax[4,2].yaxis.label] +
             ax[4,2].get_xticklabels() + ax[4,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,3].title, ax[4,3].xaxis.label, ax[4,3].yaxis.label] +
             ax[4,3].get_xticklabels() + ax[4,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,4].title, ax[4,4].xaxis.label, ax[4,4].yaxis.label] +
             ax[4,4].get_xticklabels() + ax[4,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,0].title, ax[5,0].xaxis.label, ax[5,0].yaxis.label] +
             ax[5,0].get_xticklabels() + ax[5,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,1].title, ax[5,1].xaxis.label, ax[5,1].yaxis.label] +
             ax[5,1].get_xticklabels() + ax[5,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,2].title, ax[5,2].xaxis.label, ax[5,2].yaxis.label] +
             ax[5,2].get_xticklabels() + ax[5,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,3].title, ax[5,3].xaxis.label, ax[5,3].yaxis.label] +
             ax[5,3].get_xticklabels() + ax[5,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,4].title, ax[5,4].xaxis.label, ax[5,4].yaxis.label] +
             ax[5,4].get_xticklabels() + ax[5,4].get_yticklabels()):
    item.set_fontsize(20)


plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C02 Ligament Summary.png')
plt.show()

###########################################################################################################
###########################################################################################################
###########################################################################################################
print("summary, no limit")
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fres'], label ='C23_ALL_Fres', color = 'red')
ax[0,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fy'], label ='C23_ALL_Fy', color = 'orange')
ax[0,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_Fz'], label ='C23_ALL_Fz', color = 'green')
ax[0, 0].set_title('C23_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fres'], label ='C23_ISL_Fres', color = 'red')
ax[0,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fy'], label ='C23_ISL_Fy', color = 'orange')
ax[0,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_Fz'], label ='C23_ISL_Fz', color = 'green')
ax[0, 1].set_title('C23_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fres'], label ='C23_JC_Fres', color = 'red')
ax[0,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fy'], label ='C23_JC_Fy', color = 'orange')
ax[0,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_Fz'], label ='C23_JC_Fz', color = 'green')
ax[0, 2].set_title('C23_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fres'], label ='C23_LF_Fres', color = 'red')
ax[0,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fy'], label ='C23_LF_Fy', color = 'orange')
ax[0,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_Fz'], label ='C23_LF_Fz', color = 'green')
ax[0, 3].set_title('C23_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fres'], label ='C23_PLL_Fres', color = 'red')
ax[0,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fy'], label ='C23_PLL_Fy', color = 'orange')
ax[0,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_Fz'], label ='C23_PLL_Fz', color = 'green')
ax[0, 4].set_title('C23_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C23_ALL_data[channelsimt],C23_ALL_data['C23_ALL_stretch'], label ='C23_ALL_stretch', color = 'red')
ax[1, 0].set_title('C23_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C23_ISL_data[channelsimt],C23_ISL_data['C23_ISL_stretch'], label ='C23_ISL_stretch', color = 'red')
ax[1, 1].set_title('C23_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C23_JC_data[channelsimt],C23_JC_data['C23_JC_stretch'], label ='C23_JC_stretch', color = 'red')
ax[1, 2].set_title('C23_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C23_LF_data[channelsimt],C23_LF_data['C23_LF_stretch'], label ='C23_LF_stretch', color = 'red')
ax[1, 3].set_title('C23_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C23_PLL_data[channelsimt],C23_PLL_data['C23_PLL_stretch'], label ='C23_PLL_stretch', color = 'red')
ax[1, 4].set_title('C23_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C23 Ligament  Summary - No Limit.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fres'], label ='C34_ALL_Fres', color = 'red')
ax[0,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fy'], label ='C34_ALL_Fy', color = 'orange')
ax[0,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_Fz'], label ='C34_ALL_Fz', color = 'green')
ax[0, 0].set_title('C34_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fres'], label ='C34_ISL_Fres', color = 'red')
ax[0,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fy'], label ='C34_ISL_Fy', color = 'orange')
ax[0,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_Fz'], label ='C34_ISL_Fz', color = 'green')
ax[0, 1].set_title('C34_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fres'], label ='C34_JC_Fres', color = 'red')
ax[0,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fy'], label ='C34_JC_Fy', color = 'orange')
ax[0,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_Fz'], label ='C34_JC_Fz', color = 'green')
ax[0, 2].set_title('C34_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fres'], label ='C34_LF_Fres', color = 'red')
ax[0,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fy'], label ='C34_LF_Fy', color = 'orange')
ax[0,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_Fz'], label ='C34_LF_Fz', color = 'green')
ax[0, 3].set_title('C34_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fres'], label ='C34_PLL_Fres', color = 'red')
ax[0,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fy'], label ='C34_PLL_Fy', color = 'orange')
ax[0,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_Fz'], label ='C34_PLL_Fz', color = 'green')
ax[0, 4].set_title('C34_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C34_ALL_data[channelsimt],C34_ALL_data['C34_ALL_stretch'], label ='C34_ALL_stretch', color = 'red')
ax[1, 0].set_title('C34_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C34_ISL_data[channelsimt],C34_ISL_data['C34_ISL_stretch'], label ='C34_ISL_stretch', color = 'red')
ax[1, 1].set_title('C34_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C34_JC_data[channelsimt],C34_JC_data['C34_JC_stretch'], label ='C34_JC_stretch', color = 'red')
ax[1, 2].set_title('C34_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C34_LF_data[channelsimt],C34_LF_data['C34_LF_stretch'], label ='C34_LF_stretch', color = 'red')
ax[1, 3].set_title('C34_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C34_PLL_data[channelsimt],C34_PLL_data['C34_PLL_stretch'], label ='C34_PLL_stretch', color = 'red')
ax[1, 4].set_title('C34_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C34 Ligament  Summary - No Limit.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fres'], label ='C45_ALL_Fres', color = 'red')
ax[0,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fy'], label ='C45_ALL_Fy', color = 'orange')
ax[0,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_Fz'], label ='C45_ALL_Fz', color = 'green')
ax[0, 0].set_title('C45_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fres'], label ='C45_ISL_Fres', color = 'red')
ax[0,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fy'], label ='C45_ISL_Fy', color = 'orange')
ax[0,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_Fz'], label ='C45_ISL_Fz', color = 'green')
ax[0, 1].set_title('C45_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fres'], label ='C45_JC_Fres', color = 'red')
ax[0,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fy'], label ='C45_JC_Fy', color = 'orange')
ax[0,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_Fz'], label ='C45_JC_Fz', color = 'green')
ax[0, 2].set_title('C45_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fres'], label ='C45_LF_Fres', color = 'red')
ax[0,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fy'], label ='C45_LF_Fy', color = 'orange')
ax[0,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_Fz'], label ='C45_LF_Fz', color = 'green')
ax[0, 3].set_title('C45_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fres'], label ='C45_PLL_Fres', color = 'red')
ax[0,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fy'], label ='C45_PLL_Fy', color = 'orange')
ax[0,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_Fz'], label ='C45_PLL_Fz', color = 'green')
ax[0, 4].set_title('C45_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C45_ALL_data[channelsimt],C45_ALL_data['C45_ALL_stretch'], label ='C45_ALL_stretch', color = 'red')
ax[1, 0].set_title('C45_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C45_ISL_data[channelsimt],C45_ISL_data['C45_ISL_stretch'], label ='C45_ISL_stretch', color = 'red')
ax[1, 1].set_title('C45_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C45_JC_data[channelsimt],C45_JC_data['C45_JC_stretch'], label ='C45_JC_stretch', color = 'red')
ax[1, 2].set_title('C45_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C45_LF_data[channelsimt],C45_LF_data['C45_LF_stretch'], label ='C45_LF_stretch', color = 'red')
ax[1, 3].set_title('C45_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C45_PLL_data[channelsimt],C45_PLL_data['C45_PLL_stretch'], label ='C45_PLL_stretch', color = 'red')
ax[1, 4].set_title('C45_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C45 Ligament  Summary - No Limit.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fres'], label ='C56_ALL_Fres', color = 'red')
ax[0,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fy'], label ='C56_ALL_Fy', color = 'orange')
ax[0,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_Fz'], label ='C56_ALL_Fz', color = 'green')
ax[0, 0].set_title('C56_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fres'], label ='C56_ISL_Fres', color = 'red')
ax[0,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fy'], label ='C56_ISL_Fy', color = 'orange')
ax[0,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_Fz'], label ='C56_ISL_Fz', color = 'green')
ax[0, 1].set_title('C56_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fres'], label ='C56_JC_Fres', color = 'red')
ax[0,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fy'], label ='C56_JC_Fy', color = 'orange')
ax[0,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_Fz'], label ='C56_JC_Fz', color = 'green')
ax[0, 2].set_title('C56_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fres'], label ='C56_LF_Fres', color = 'red')
ax[0,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fy'], label ='C56_LF_Fy', color = 'orange')
ax[0,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_Fz'], label ='C56_LF_Fz', color = 'green')
ax[0, 3].set_title('C56_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fres'], label ='C56_PLL_Fres', color = 'red')
ax[0,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fy'], label ='C56_PLL_Fy', color = 'orange')
ax[0,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_Fz'], label ='C56_PLL_Fz', color = 'green')
ax[0, 4].set_title('C56_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C56_ALL_data[channelsimt],C56_ALL_data['C56_ALL_stretch'], label ='C56_ALL_stretch', color = 'red')
ax[1, 0].set_title('C56_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C56_ISL_data[channelsimt],C56_ISL_data['C56_ISL_stretch'], label ='C56_ISL_stretch', color = 'red')
ax[1, 1].set_title('C56_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C56_JC_data[channelsimt],C56_JC_data['C56_JC_stretch'], label ='C56_JC_stretch', color = 'red')
ax[1, 2].set_title('C56_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C56_LF_data[channelsimt],C56_LF_data['C56_LF_stretch'], label ='C56_LF_stretch', color = 'red')
ax[1, 3].set_title('C56_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C56_PLL_data[channelsimt],C56_PLL_data['C56_PLL_stretch'], label ='C56_PLL_stretch', color = 'red')
ax[1, 4].set_title('C56_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C56 Ligament  Summary - No Limit.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fres'], label ='C67_ALL_Fres', color = 'red')
ax[0,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fy'], label ='C67_ALL_Fy', color = 'orange')
ax[0,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_Fz'], label ='C67_ALL_Fz', color = 'green')
ax[0, 0].set_title('C67_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fres'], label ='C67_ISL_Fres', color = 'red')
ax[0,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fy'], label ='C67_ISL_Fy', color = 'orange')
ax[0,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_Fz'], label ='C67_ISL_Fz', color = 'green')
ax[0, 1].set_title('C67_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fres'], label ='C67_JC_Fres', color = 'red')
ax[0,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fy'], label ='C67_JC_Fy', color = 'orange')
ax[0,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_Fz'], label ='C67_JC_Fz', color = 'green')
ax[0, 2].set_title('C67_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fres'], label ='C67_LF_Fres', color = 'red')
ax[0,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fy'], label ='C67_LF_Fy', color = 'orange')
ax[0,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_Fz'], label ='C67_LF_Fz', color = 'green')
ax[0, 3].set_title('C67_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fres'], label ='C67_PLL_Fres', color = 'red')
ax[0,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fy'], label ='C67_PLL_Fy', color = 'orange')
ax[0,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_Fz'], label ='C67_PLL_Fz', color = 'green')
ax[0, 4].set_title('C67_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C67_ALL_data[channelsimt],C67_ALL_data['C67_ALL_stretch'], label ='C67_ALL_stretch', color = 'red')
ax[1, 0].set_title('C67_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C67_ISL_data[channelsimt],C67_ISL_data['C67_ISL_stretch'], label ='C67_ISL_stretch', color = 'red')
ax[1, 1].set_title('C67_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C67_JC_data[channelsimt],C67_JC_data['C67_JC_stretch'], label ='C67_JC_stretch', color = 'red')
ax[1, 2].set_title('C67_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C67_LF_data[channelsimt],C67_LF_data['C67_LF_stretch'], label ='C67_LF_stretch', color = 'red')
ax[1, 3].set_title('C67_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C67_PLL_data[channelsimt],C67_PLL_data['C67_PLL_stretch'], label ='C67_PLL_stretch', color = 'red')
ax[1, 4].set_title('C67_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C67 Ligament  Summary - No Limit.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot summaries')
figure, ax = plt.subplots(2, 5,figsize=(50,20)) #y then x size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

ax[0,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fres'], label ='C7T1_ALL_Fres', color = 'red')
ax[0,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fy'], label ='C7T1_ALL_Fy', color = 'orange')
ax[0,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_Fz'], label ='C7T1_ALL_Fz', color = 'green')
ax[0, 0].set_title('C7T1_ALL')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fres'], label ='C7T1_ISL_Fres', color = 'red')
ax[0,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fy'], label ='C7T1_ISL_Fy', color = 'orange')
ax[0,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_Fz'], label ='C7T1_ISL_Fz', color = 'green')
ax[0, 1].set_title('C7T1_ISL')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fres'], label ='C7T1_JC_Fres', color = 'red')
ax[0,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fy'], label ='C7T1_JC_Fy', color = 'orange')
ax[0,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_Fz'], label ='C7T1_JC_Fz', color = 'green')
ax[0, 2].set_title('C7T1_JC')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()
ax[0,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fres'], label ='C7T1_LF_Fres', color = 'red')
ax[0,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fy'], label ='C7T1_LF_Fy', color = 'orange')
ax[0,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_Fz'], label ='C7T1_LF_Fz', color = 'green')
ax[0, 3].set_title('C7T1_LF')
ax[0, 3].set_xlim(0, 0.25)
ax[0, 3].set_xlabel('Time (s)')
ax[0, 3].set_ylabel('Force (N)')
ax[0, 3].grid(True)
ax[0, 3].legend()
ax[0,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fres'], label ='C7T1_PLL_Fres', color = 'red')
ax[0,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fy'], label ='C7T1_PLL_Fy', color = 'orange')
ax[0,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_Fz'], label ='C7T1_PLL_Fz', color = 'green')
ax[0, 4].set_title('C7T1_PLL')
ax[0, 4].set_xlim(0, 0.25)
ax[0, 4].set_xlabel('Time (s)')
ax[0, 4].set_ylabel('Force (N)')
ax[0, 4].grid(True)
ax[0, 4].legend()
#
ax[1,0].plot(C7T1_ALL_data[channelsimt],C7T1_ALL_data['C7T1_ALL_stretch'], label ='C7T1_ALL_stretch', color = 'red')
ax[1, 0].set_title('C7T1_ALL')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C7T1_ISL_data[channelsimt],C7T1_ISL_data['C7T1_ISL_stretch'], label ='C7T1_ISL_stretch', color = 'red')
ax[1, 1].set_title('C7T1_ISL')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C7T1_JC_data[channelsimt],C7T1_JC_data['C7T1_JC_stretch'], label ='C7T1_JC_stretch', color = 'red')
ax[1, 2].set_title('C7T1_JC')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].grid(True)
ax[1, 2].legend()
ax[1,3].plot(C7T1_LF_data[channelsimt],C7T1_LF_data['C7T1_LF_stretch'], label ='C7T1_LF_stretch', color = 'red')
ax[1, 3].set_title('C7T1_LF')
ax[1, 3].set_xlim(0, 0.25)
ax[1, 3].set_xlabel('Time (s)')
ax[1, 3].set_ylabel('Stretch')
ax[1, 3].grid(True)
ax[1, 3].legend()
ax[1,4].plot(C7T1_PLL_data[channelsimt],C7T1_PLL_data['C7T1_PLL_stretch'], label ='C7T1_PLL_stretch', color = 'red')
ax[1, 4].set_title('C7T1_PLL')
ax[1, 4].set_xlim(0, 0.25)
ax[1, 4].set_xlabel('Time (s)')
ax[1, 4].set_ylabel('Stretch')
ax[1, 4].grid(True)
ax[1, 4].legend()

for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,3].title, ax[0,3].xaxis.label, ax[0,3].yaxis.label] +
             ax[0,3].get_xticklabels() + ax[0,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,4].title, ax[0,4].xaxis.label, ax[0,4].yaxis.label] +
             ax[0,4].get_xticklabels() + ax[0,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,3].title, ax[1,3].xaxis.label, ax[1,3].yaxis.label] +
             ax[1,3].get_xticklabels() + ax[1,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,4].title, ax[1,4].xaxis.label, ax[1,4].yaxis.label] +
             ax[1,4].get_xticklabels() + ax[1,4].get_yticklabels()):
    item.set_fontsize(20)

plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C7T1 Ligament  Summary - No Limit.png')
plt.show()

###########################################################################################################
###########################################################################################################
print('plot C02 summaries')
figure, ax = plt.subplots(6, 5,figsize=(50,60)) #columns then rows size
plt.rcParams['font.size'] = '20'
# fig = plt.figure(figsize=(16,16))

###### C01
ax[0,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fres'], label ='C01_AAOM_Fres', color = 'red')
ax[0,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fy'], label ='C01_AAOM_Fy', color = 'orange')
ax[0,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_Fz'], label ='C01_AAOM_Fz', color = 'green')
ax[0, 0].set_title('C01_AAOM')
ax[0, 0].set_xlim(0, 0.25)
ax[0, 0].set_xlabel('Time (s)')
ax[0, 0].set_ylabel('Force (N)')
ax[0, 0].grid(True)
ax[0, 0].legend()
ax[0,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fres'], label ='C01_JC_Fres', color = 'red')
ax[0,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fy'], label ='C01_JC_Fy', color = 'orange')
ax[0,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_Fz'], label ='C01_JC_Fz', color = 'green')
ax[0, 1].set_title('C01_JC')
ax[0, 1].set_xlim(0, 0.25)
ax[0, 1].set_xlabel('Time (s)')
ax[0, 1].set_ylabel('Force (N)')
ax[0, 1].grid(True)
ax[0, 1].legend()
ax[0,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fres'], label ='C01_PAOM_Fres', color = 'red')
ax[0,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fy'], label ='C01_PAOM_Fy', color = 'orange')
ax[0,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_Fz'], label ='C01_PAOM_Fz', color = 'green')
ax[0, 2].set_title('C01_PAOM')
ax[0, 2].set_xlim(0, 0.25)
ax[0, 2].set_xlabel('Time (s)')
ax[0, 2].set_ylabel('Force (N)')
ax[0, 2].grid(True)
ax[0, 2].legend()

ax[1,0].plot(C01_AAOM_data[channelsimt],C01_AAOM_data['C01_AAOM_stretch'], label ='C01_AAOM_stretch', color = 'red')
ax[1, 0].set_title('C01_AAOM')
ax[1, 0].set_xlim(0, 0.25)
ax[1, 0].set_xlabel('Time (s)')
ax[1, 0].set_ylabel('Stretch')
ax[1, 0].grid(True)
ax[1, 0].legend()
ax[1,1].plot(C01_JC_data[channelsimt],C01_JC_data['C01_JC_stretch'], label ='C01_JC_stretch', color = 'red')
ax[1, 1].set_title('C01_JC')
ax[1, 1].set_xlim(0, 0.25)
ax[1, 1].set_xlabel('Time (s)')
ax[1, 1].set_ylabel('Stretch')
ax[1, 1].grid(True)
ax[1, 1].legend()
ax[1,2].plot(C01_PAOM_data[channelsimt],C01_PAOM_data['C01_PAOM_stretch'], label ='C01_PAOM_stretch', color = 'red')
ax[1, 2].set_title('C01_PAOM')
ax[1, 2].set_xlim(0, 0.25)
ax[1, 2].set_xlabel('Time (s)')
ax[1, 2].set_ylabel('Stretch')
ax[1, 2].grid(True)
ax[1, 2].legend()

###### C12
ax[2,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fres'], label ='C12_AAAM_Fres', color = 'red')
ax[2,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fy'], label ='C12_AAAM_Fy', color = 'orange')
ax[2,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_Fz'], label ='C12_AAAM_Fz', color = 'green')
ax[2, 0].set_title('C12_AAAM')
ax[2, 0].set_xlim(0, 0.25)
ax[2, 0].set_xlabel('Time (s)')
ax[2, 0].set_ylabel('Force (N)')
ax[2, 0].grid(True)
ax[2, 0].legend()
ax[2,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fres'], label ='C12_ISL_Fres', color = 'red')
ax[2,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fy'], label ='C12_ISL_Fy', color = 'orange')
ax[2,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_Fz'], label ='C12_ISL_Fz', color = 'green')
ax[2, 1].set_title('C12_ISL')
ax[2, 1].set_xlim(0, 0.25)
ax[2, 1].set_xlabel('Time (s)')
ax[2, 1].set_ylabel('Force (N)')
ax[2, 1].grid(True)
ax[2, 1].legend()
ax[2,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fres'], label ='C12_JC_Fres', color = 'red')
ax[2,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fy'], label ='C12_JC_Fy', color = 'orange')
ax[2,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_Fz'], label ='C12_JC_Fz', color = 'green')
ax[2, 2].set_title('C12_JC')
ax[2, 2].set_xlim(0, 0.25)
ax[2, 2].set_xlabel('Time (s)')
ax[2, 2].set_ylabel('Force (N)')
ax[2, 2].grid(True)
ax[2, 2].legend()
ax[2,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fres'], label ='C12_PAAM_Fres', color = 'red')
ax[2,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fy'], label ='C12_PAAM_Fy', color = 'orange')
ax[2,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_Fz'], label ='C12_PAAM_Fz', color = 'green')
ax[2, 3].set_title('C12_PAAM')
ax[2, 3].set_xlim(0, 0.25)
ax[2, 3].set_xlabel('Time (s)')
ax[2, 3].set_ylabel('Force (N)')
ax[2, 3].grid(True)
ax[2, 3].legend()
ax[2,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fres'], label ='C12_TL_Fres', color = 'red')
ax[2,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fy'], label ='C12_TL_Fy', color = 'orange')
ax[2,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_Fz'], label ='C12_TL_Fz', color = 'green')
ax[2, 4].set_title('C12_TL')
ax[2, 4].set_xlim(0, 0.25)
ax[2, 4].set_xlabel('Time (s)')
ax[2, 4].set_ylabel('Force (N)')
ax[2, 4].grid(True)
ax[2, 4].legend()
#
ax[3,0].plot(C12_AAAM_data[channelsimt],C12_AAAM_data['C12_AAAM_stretch'], label ='C12_AAAM_stretch', color = 'red')
ax[3, 0].set_title('C12_AAAM')
ax[3, 0].set_xlim(0, 0.25)
ax[3, 0].set_xlabel('Time (s)')
ax[3, 0].set_ylabel('Stretch')
ax[3, 0].grid(True)
ax[3, 0].legend()
ax[3,1].plot(C12_ISL_data[channelsimt],C12_ISL_data['C12_ISL_stretch'], label ='C12_ISL_stretch', color = 'red')
ax[3, 1].set_title('C12_ISL')
ax[3, 1].set_xlim(0, 0.25)
ax[3, 1].set_xlabel('Time (s)')
ax[3, 1].set_ylabel('Stretch')
ax[3, 1].grid(True)
ax[3, 1].legend()
ax[3,2].plot(C12_JC_data[channelsimt],C12_JC_data['C12_JC_stretch'], label ='C12_JC_stretch', color = 'red')
ax[3, 2].set_title('C12_JC')
ax[3, 2].set_xlim(0, 0.25)
ax[3, 2].set_xlabel('Time (s)')
ax[3, 2].set_ylabel('Stretch')
ax[3, 2].grid(True)
ax[3, 2].legend()
ax[3,3].plot(C12_PAAM_data[channelsimt],C12_PAAM_data['C12_PAAM_stretch'], label ='C12_PAAM_stretch', color = 'red')
ax[3, 3].set_title('C12_PAAM')
ax[3, 3].set_xlim(0, 0.25)
ax[3, 3].set_xlabel('Time (s)')
ax[3, 3].set_ylabel('Stretch')
ax[3, 3].grid(True)
ax[3, 3].legend()
ax[3,4].plot(C12_TL_data[channelsimt],C12_TL_data['C12_TL_stretch'], label ='C12_TL_stretch', color = 'red')
ax[3, 4].set_title('C12_TL')
ax[3, 4].set_xlim(0, 0.25)
ax[3, 4].set_xlabel('Time (s)')
ax[3, 4].set_ylabel('Stretch')
ax[3, 4].grid(True)
ax[3, 4].legend()

###### C02
ax[4,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fres'], label ='C02_ALAR_Fres', color = 'red')
ax[4,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fy'], label ='C02_ALAR_Fy', color = 'orange')
ax[4,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_Fz'], label ='C02_ALAR_Fz', color = 'green')
ax[4, 0].set_title('C02_ALAR')
ax[4, 0].set_xlim(0, 0.25)
ax[4, 0].set_xlabel('Time (s)')
ax[4, 0].set_ylabel('Force (N)')
ax[4, 0].grid(True)
ax[4, 0].legend()
ax[4,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fres'], label ='C02_APICAL_Fres', color = 'red')
ax[4,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fy'], label ='C02_APICAL_Fy', color = 'orange')
ax[4,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_Fz'], label ='C02_APICAL_Fz', color = 'green')
ax[4, 1].set_title('C02_APICAL')
ax[4, 1].set_xlim(0, 0.25)
ax[4, 1].set_xlabel('Time (s)')
ax[4, 1].set_ylabel('Force (N)')
ax[4, 1].grid(True)
ax[4, 1].legend()
ax[4,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fres'], label ='C02_TM_Fres', color = 'red')
ax[4,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fy'], label ='C02_TM_Fy', color = 'orange')
ax[4,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_Fz'], label ='C02_TM_Fz', color = 'green')
ax[4, 2].set_title('C02_TM')
ax[4, 2].set_xlim(0, 0.25)
ax[4, 2].set_xlabel('Time (s)')
ax[4, 2].set_ylabel('Force (N)')
ax[4, 2].grid(True)
ax[4, 2].legend()
ax[4,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fres'], label ='C02_TM_VC_Fres', color = 'red')
ax[4,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fy'], label ='C02_TM_VC_Fy', color = 'orange')
ax[4,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_Fz'], label ='C02_TM_VC_Fz', color = 'green')
ax[4, 3].set_title('C02_TM_VC')
ax[4, 3].set_xlim(0, 0.25)
ax[4, 3].set_xlabel('Time (s)')
ax[4, 3].set_ylabel('Force (N)')
ax[4, 3].grid(True)
ax[4, 3].legend()
#
ax[5,0].plot(C02_ALAR_data[channelsimt],C02_ALAR_data['C02_ALAR_stretch'], label ='C02_ALAR_stretch', color = 'red')
ax[5, 0].set_title('C02_ALAR')
ax[5, 0].set_xlim(0, 0.25)
ax[5, 0].set_xlabel('Time (s)')
ax[5, 0].set_ylabel('Stretch')
ax[5, 0].grid(True)
ax[5, 0].legend()
ax[5,1].plot(C02_APICAL_data[channelsimt],C02_APICAL_data['C02_APICAL_stretch'], label ='C02_APICAL_stretch', color = 'red')
ax[5, 1].set_title('C02_APICAL')
ax[5, 1].set_xlim(0, 0.25)
ax[5, 1].set_xlabel('Time (s)')
ax[5, 1].set_ylabel('Stretch')
ax[5, 1].grid(True)
ax[5, 1].legend()
ax[5,2].plot(C02_TM_data[channelsimt],C02_TM_data['C02_TM_stretch'], label ='C02_TM_stretch', color = 'red')
ax[5, 2].set_title('C02_TM')
ax[5, 2].set_xlim(0, 0.25)
ax[5, 2].set_xlabel('Time (s)')
ax[5, 2].set_ylabel('Stretch')
ax[5, 2].grid(True)
ax[5, 2].legend()
ax[5,3].plot(C02_TM_VC_data[channelsimt],C02_TM_VC_data['C02_TM_VC_stretch'], label ='C02_TM_VC_stretch', color = 'red')
ax[5, 3].set_title('C02_TM_VC')
ax[5, 3].set_xlim(0, 0.25)
ax[5, 3].set_xlabel('Time (s)')
ax[5, 3].set_ylabel('Stretch')
ax[5, 3].grid(True)
ax[5, 3].legend()


for item in ([ax[0,0].title, ax[0,0].xaxis.label, ax[0,0].yaxis.label] +
             ax[0,0].get_xticklabels() + ax[0,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,1].title, ax[0,1].xaxis.label, ax[0,1].yaxis.label] +
             ax[0,1].get_xticklabels() + ax[0,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[0,2].title, ax[0,2].xaxis.label, ax[0,2].yaxis.label] +
             ax[0,2].get_xticklabels() + ax[0,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,0].title, ax[1,0].xaxis.label, ax[1,0].yaxis.label] +
             ax[1,0].get_xticklabels() + ax[1,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,1].title, ax[1,1].xaxis.label, ax[1,1].yaxis.label] +
             ax[1,1].get_xticklabels() + ax[1,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[1,2].title, ax[1,2].xaxis.label, ax[1,2].yaxis.label] +
             ax[1,2].get_xticklabels() + ax[1,2].get_yticklabels()):
    item.set_fontsize(20)
#
for item in ([ax[2,0].title, ax[2,0].xaxis.label, ax[2,0].yaxis.label] +
             ax[2,0].get_xticklabels() + ax[2,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,1].title, ax[2,1].xaxis.label, ax[2,1].yaxis.label] +
             ax[2,1].get_xticklabels() + ax[2,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,2].title, ax[2,2].xaxis.label, ax[2,2].yaxis.label] +
             ax[2,2].get_xticklabels() + ax[2,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,3].title, ax[2,3].xaxis.label, ax[2,3].yaxis.label] +
             ax[2,3].get_xticklabels() + ax[2,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[2,4].title, ax[2,4].xaxis.label, ax[2,4].yaxis.label] +
             ax[2,4].get_xticklabels() + ax[2,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,0].title, ax[3,0].xaxis.label, ax[3,0].yaxis.label] +
             ax[3,0].get_xticklabels() + ax[3,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,1].title, ax[3,1].xaxis.label, ax[3,1].yaxis.label] +
             ax[3,1].get_xticklabels() + ax[3,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,2].title, ax[3,2].xaxis.label, ax[3,2].yaxis.label] +
             ax[3,2].get_xticklabels() + ax[3,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,3].title, ax[3,3].xaxis.label, ax[3,3].yaxis.label] +
             ax[3,3].get_xticklabels() + ax[3,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[3,4].title, ax[3,4].xaxis.label, ax[3,4].yaxis.label] +
             ax[3,4].get_xticklabels() + ax[3,4].get_yticklabels()):
    item.set_fontsize(20)
#
for item in ([ax[4,0].title, ax[4,0].xaxis.label, ax[4,0].yaxis.label] +
             ax[4,0].get_xticklabels() + ax[4,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,1].title, ax[4,1].xaxis.label, ax[4,1].yaxis.label] +
             ax[4,1].get_xticklabels() + ax[4,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,2].title, ax[4,2].xaxis.label, ax[4,2].yaxis.label] +
             ax[4,2].get_xticklabels() + ax[4,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,3].title, ax[4,3].xaxis.label, ax[4,3].yaxis.label] +
             ax[4,3].get_xticklabels() + ax[4,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[4,4].title, ax[4,4].xaxis.label, ax[4,4].yaxis.label] +
             ax[4,4].get_xticklabels() + ax[4,4].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,0].title, ax[5,0].xaxis.label, ax[5,0].yaxis.label] +
             ax[5,0].get_xticklabels() + ax[5,0].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,1].title, ax[5,1].xaxis.label, ax[5,1].yaxis.label] +
             ax[5,1].get_xticklabels() + ax[5,1].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,2].title, ax[5,2].xaxis.label, ax[5,2].yaxis.label] +
             ax[5,2].get_xticklabels() + ax[5,2].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,3].title, ax[5,3].xaxis.label, ax[5,3].yaxis.label] +
             ax[5,3].get_xticklabels() + ax[5,3].get_yticklabels()):
    item.set_fontsize(20)
for item in ([ax[5,4].title, ax[5,4].xaxis.label, ax[5,4].yaxis.label] +
             ax[5,4].get_xticklabels() + ax[5,4].get_yticklabels()):
    item.set_fontsize(20)


plt.tight_layout()

# plt.subplots_adjust(left = 0.17, bottom = 0.13)
plt.savefig('C02 Ligament  Summary - No Limit.png')
plt.show()

###########################################################################################################
###########################################################################################################
###########################################################################################################

print("complete")